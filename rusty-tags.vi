!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    A(A),$/;"	e	enum:Either
AbortedAfterConsumeOutput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    AbortedAfterConsumeOutput = 4,$/;"	e	enum:CombiAbort
AbortedAfterFinish	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    AbortedAfterFinish = 3,$/;"	e	enum:CombiAbort
AbortedFirstPoll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    AbortedFirstPoll = 2,$/;"	e	enum:CombiAbort
AbortedImmediately	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    AbortedImmediately = 1,$/;"	e	enum:CombiAbort
AccessError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl Error for AccessError {}$/;"	c
AccessError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl fmt::Debug for AccessError {$/;"	c
AccessError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl fmt::Display for AccessError {$/;"	c
AccessError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^pub struct AccessError {$/;"	s
Acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl Drop for Acquire<'_> {$/;"	c
Acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl Future for Acquire<'_> {$/;"	c
Acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl<'a> Acquire<'a> {$/;"	c
Acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^pub(crate) struct Acquire<'a> {$/;"	s
Acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^unsafe impl Sync for Acquire<'_> {}$/;"	c
AcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl AcquireError {$/;"	c
AcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl fmt::Display for AcquireError {$/;"	c
AcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl std::error::Error for AcquireError {}$/;"	c
AcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^pub struct AcquireError(());$/;"	s
Address	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl Address {$/;"	c
Address	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^pub(crate) struct Address(usize);$/;"	s
AllWaiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    AllWaiters,$/;"	e	enum:NotificationType
Allocator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T: Entry> Allocator<T> {$/;"	c
Allocator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> fmt::Debug for Allocator<T> {$/;"	c
Allocator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^pub(crate) struct Allocator<T> {$/;"	s
AlreadyInitializedError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    AlreadyInitializedError(T),$/;"	e	enum:SetError
Arc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^impl Unpark for Arc<dyn Unpark> {$/;"	c
Arc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl Schedule for Arc<Shared> {$/;"	c
Arc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl task::Schedule for Arc<Shared> {$/;"	c
Arc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl task::Schedule for Arc<Shared> {$/;"	c
AsRawHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^        pub trait AsRawHandle {$/;"	i	module:windows::io
AssertDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^impl AssertDrop {$/;"	c
AssertDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^impl Drop for AssertDrop {$/;"	c
AssertDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^struct AssertDrop {$/;"	s
AssertDropHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^impl AssertDropHandle {$/;"	c
AssertDropHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^struct AssertDropHandle {$/;"	s
AssertSend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^trait AssertSend: Send {}$/;"	i
AssertSync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^trait AssertSync: Send {}$/;"	i
AsyncBufRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^pub trait AsyncBufRead: AsyncRead {$/;"	i
AsyncFd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<T: AsRawFd> AsRawFd for AsyncFd<T> {$/;"	c
AsyncFd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<T: AsRawFd> AsyncFd<T> {$/;"	c
AsyncFd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<T: AsRawFd> Drop for AsyncFd<T> {$/;"	c
AsyncFd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<T: std::fmt::Debug + AsRawFd> std::fmt::Debug for AsyncFd<T> {$/;"	c
AsyncFd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^pub struct AsyncFd<T: AsRawFd> {$/;"	s
AsyncFdReadyGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<'a, Inner: AsRawFd> AsyncFdReadyGuard<'a, Inner> {$/;"	c
AsyncFdReadyGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<'a, T: std::fmt::Debug + AsRawFd> std::fmt::Debug for AsyncFdReadyGuard<'a, T> {$/;"	c
AsyncFdReadyGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^pub struct AsyncFdReadyGuard<'a, T: AsRawFd> {$/;"	s
AsyncFdReadyMutGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<'a, Inner: AsRawFd> AsyncFdReadyMutGuard<'a, Inner> {$/;"	c
AsyncFdReadyMutGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^impl<'a, T: std::fmt::Debug + AsRawFd> std::fmt::Debug for AsyncFdReadyMutGuard<'a, T> {$/;"	c
AsyncFdReadyMutGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^pub struct AsyncFdReadyMutGuard<'a, T: AsRawFd> {$/;"	s
AsyncRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^pub trait AsyncRead {$/;"	i
AsyncSeek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^pub trait AsyncSeek {$/;"	i
AsyncWrite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^pub trait AsyncWrite {$/;"	i
AtCapacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    AtCapacity = 2,$/;"	e	enum:Kind
AtomicCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^impl<T> AtomicCell<T> {$/;"	c
AtomicCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^impl<T> Drop for AtomicCell<T> {$/;"	c
AtomicCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^pub(super) struct AtomicCell<T> {$/;"	s
AtomicCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^unsafe impl<T: Send> Send for AtomicCell<T> {}$/;"	c
AtomicCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^unsafe impl<T: Send> Sync for AtomicCell<T> {}$/;"	c
AtomicOneshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^impl<T> AtomicOneshot<T> {$/;"	c
AtomicOneshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^struct AtomicOneshot<T> {$/;"	s
AtomicPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^impl<T> AtomicPtr<T> {$/;"	c
AtomicPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^impl<T> Deref for AtomicPtr<T> {$/;"	c
AtomicPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^impl<T> DerefMut for AtomicPtr<T> {$/;"	c
AtomicPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^impl<T> fmt::Debug for AtomicPtr<T> {$/;"	c
AtomicPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^pub(crate) struct AtomicPtr<T> {$/;"	s
AtomicState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl AtomicState {$/;"	c	module:state
AtomicState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub(super) struct AtomicState(AtomicUsize);$/;"	s	module:state
AtomicTake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    impl<T> AtomicTake<T> {$/;"	c	module:atomic_take
AtomicTake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    impl<T> Drop for AtomicTake<T> {$/;"	c	module:atomic_take
AtomicTake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    pub(super) struct AtomicTake<T> {$/;"	s	module:atomic_take
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^impl AtomicU16 {$/;"	c
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^impl Deref for AtomicU16 {$/;"	c
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^impl fmt::Debug for AtomicU16 {$/;"	c
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^pub(crate) struct AtomicU16 {$/;"	s
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^unsafe impl Send for AtomicU16 {}$/;"	c
AtomicU16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^unsafe impl Sync for AtomicU16 {}$/;"	c
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^impl AtomicU32 {$/;"	c
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^impl Deref for AtomicU32 {$/;"	c
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^impl fmt::Debug for AtomicU32 {$/;"	c
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^pub(crate) struct AtomicU32 {$/;"	s
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^unsafe impl Send for AtomicU32 {}$/;"	c
AtomicU32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^unsafe impl Sync for AtomicU32 {}$/;"	c
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^impl AtomicU8 {$/;"	c
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^impl Deref for AtomicU8 {$/;"	c
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^impl fmt::Debug for AtomicU8 {$/;"	c
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^pub(crate) struct AtomicU8 {$/;"	s
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^unsafe impl Send for AtomicU8 {}$/;"	c
AtomicU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^unsafe impl Sync for AtomicU8 {}$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^impl AtomicUsize {$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^impl fmt::Debug for AtomicUsize {$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^impl ops::Deref for AtomicUsize {$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^impl ops::DerefMut for AtomicUsize {$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^pub(crate) struct AtomicUsize {$/;"	s
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^unsafe impl Send for AtomicUsize {}$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^unsafe impl Sync for AtomicUsize {}$/;"	c
AtomicUsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl Semaphore for AtomicUsize {$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^impl AtomicWaker {$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^impl Default for AtomicWaker {$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^impl fmt::Debug for AtomicWaker {$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^pub(crate) struct AtomicWaker {$/;"	s
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^unsafe impl Send for AtomicWaker {}$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^unsafe impl Sync for AtomicWaker {}$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^impl AssertSend for AtomicWaker {}$/;"	c
AtomicWaker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^impl AssertSync for AtomicWaker {}$/;"	c
B	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    B(B),$/;"	e	enum:Either
Barrier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^impl Barrier {$/;"	c
Barrier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^pub struct Barrier {$/;"	s
BarrierState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^struct BarrierState {$/;"	s
BarrierWaitResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^impl BarrierWaitResult {$/;"	c
BarrierWaitResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^pub struct BarrierWaitResult(bool);$/;"	s
Basic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^    Basic(basic_scheduler::Spawner),$/;"	e	enum:Spawner
BasicScheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> BasicScheduler<P> {$/;"	c
BasicScheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> Drop for BasicScheduler<P> {$/;"	c
BasicScheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> fmt::Debug for BasicScheduler<P> {$/;"	c
BasicScheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^pub(crate) struct BasicScheduler<P: Park> {$/;"	s
BatchTaskIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^        impl<'a, T: 'static> Iterator for BatchTaskIter<'a, T> {$/;"	c	method:Local::push_overflow
BatchTaskIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^        struct BatchTaskIter<'a, T: 'static> {$/;"	s	method:Local::push_overflow
Block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^impl<T> Block<T> {$/;"	c
Block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^pub(crate) struct Block<T> {$/;"	s
BlockedFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^impl Future for BlockedFuture {$/;"	c
BlockedFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^struct BlockedFuture {$/;"	s
Blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^impl<T> AsyncRead for Blocking<T>$/;"	c
Blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^impl<T> AsyncWrite for Blocking<T>$/;"	c
Blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^pub(crate) struct Blocking<T> {$/;"	s
BlockingPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl BlockingPool {$/;"	c
BlockingPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl Drop for BlockingPool {$/;"	c
BlockingPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl fmt::Debug for BlockingPool {$/;"	c
BlockingPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^pub(crate) struct BlockingPool {$/;"	s
BlockingTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^impl<T, R> Future for BlockingTask<T>$/;"	c
BlockingTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^impl<T> BlockingTask<T> {$/;"	c
BlockingTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^impl<T> Unpin for BlockingTask<T> {}$/;"	c
BlockingTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^pub(crate) struct BlockingTask<T> {$/;"	s
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^impl<T: ?Sized + AsyncBufRead + Unpin> AsyncBufRead for Box<T> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^impl<T: ?Sized + AsyncRead + Unpin> AsyncRead for Box<T> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^impl<T: ?Sized + AsyncSeek + Unpin> AsyncSeek for Box<T> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl<T: ?Sized + AsyncWrite + Unpin> AsyncWrite for Box<T> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^impl Unpark for Box<dyn Unpark> {$/;"	c
Budget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^impl Budget {$/;"	c
Budget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^pub(crate) struct Budget(Option<u8>);$/;"	s
Buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^impl Buf {$/;"	c
Buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^pub(crate) struct Buf {$/;"	s
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: AsyncRead + AsyncSeek> AsyncSeek for BufReader<R> {$/;"	c
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: AsyncRead + AsyncWrite> AsyncWrite for BufReader<R> {$/;"	c
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: AsyncRead> AsyncBufRead for BufReader<R> {$/;"	c
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: AsyncRead> AsyncRead for BufReader<R> {$/;"	c
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: AsyncRead> BufReader<R> {$/;"	c
BufReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^impl<R: fmt::Debug> fmt::Debug for BufReader<R> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW: AsyncRead + AsyncWrite + AsyncSeek> AsyncSeek for BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW: AsyncRead + AsyncWrite> AsyncBufRead for BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW: AsyncRead + AsyncWrite> AsyncRead for BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW: AsyncRead + AsyncWrite> AsyncWrite for BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW: AsyncRead + AsyncWrite> BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW> From<BufReader<BufWriter<RW>>> for BufStream<RW> {$/;"	c
BufStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^impl<RW> From<BufWriter<BufReader<RW>>> for BufStream<RW> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: AsyncWrite + AsyncBufRead> AsyncBufRead for BufWriter<W> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: AsyncWrite + AsyncRead> AsyncRead for BufWriter<W> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: AsyncWrite + AsyncSeek> AsyncSeek for BufWriter<W> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: AsyncWrite> AsyncWrite for BufWriter<W> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: AsyncWrite> BufWriter<W> {$/;"	c
BufWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^impl<W: fmt::Debug> fmt::Debug for BufWriter<W> {$/;"	c
Builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^impl Builder {$/;"	c
Builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^impl fmt::Debug for Builder {$/;"	c
Builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^pub struct Builder {$/;"	s
Builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^impl<'a> Builder<'a> {$/;"	c
Builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^pub struct Builder<'a> {$/;"	s
Burst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    Burst,$/;"	e	enum:MissedTickBehavior
Busy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    Busy(JoinHandle<(Operation, Buf)>),$/;"	e	enum:State
Busy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    Busy(sys::Blocking<(io::Result<usize>, Buf, T)>),$/;"	e	enum:State
Byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    Byte,$/;"	e	enum:PipeMode
COUNTER	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^    static COUNTER: AtomicU32 = AtomicU32::new(1);$/;"	v	module:rand
CURRENT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^static CURRENT: TryLock<Option<Runtime>> = TryLock::new(None);$/;"	v
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^struct CachePadded<T>(T);$/;"	s
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^impl<T: fmt::Debug> fmt::Debug for CachePadded<T> {$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^impl<T> CachePadded<T> {$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^impl<T> Deref for CachePadded<T> {$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^impl<T> DerefMut for CachePadded<T> {$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^impl<T> From<T> for CachePadded<T> {$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^pub(crate) struct CachePadded<T> {$/;"	s
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^unsafe impl<T: Send> Send for CachePadded<T> {}$/;"	c
CachePadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^unsafe impl<T: Sync> Sync for CachePadded<T> {}$/;"	c
CachedPage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> CachedPage<T> {$/;"	c
CachedPage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Default for CachedPage<T> {$/;"	c
CachedPage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^struct CachedPage<T> {$/;"	s
CachedPage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Send for CachedPage<T> {}$/;"	c
CachedPage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Sync for CachedPage<T> {}$/;"	c
CachedParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl CachedParkThread {$/;"	c
CachedParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl Park for CachedParkThread {$/;"	c
CachedParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^pub(crate) struct CachedParkThread {$/;"	s
Cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    Cancelled,$/;"	e	enum:Repr
Cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Cancelled,$/;"	e	enum:TransitionToIdle
Cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Cancelled,$/;"	e	enum:TransitionToRunning
Cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^impl<T: Future, S: Schedule> Cell<T, S> {$/;"	c
Cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(super) struct Cell<T: Future, S> {$/;"	s
Cfg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^pub(crate) struct Cfg {$/;"	s
Chain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^impl<T, U> AsyncBufRead for Chain<T, U>$/;"	c
Chain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^impl<T, U> AsyncRead for Chain<T, U>$/;"	c
Chain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^impl<T, U> Chain<T, U>$/;"	c
Chain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^impl<T, U> fmt::Debug for Chain<T, U>$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> Chan<T, S> {$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> Drop for Chan<T, S> {$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> fmt::Debug for Chan<T, S>$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^struct Chan<T, S> {$/;"	s
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^unsafe impl<T: Send, S: Send> Send for Chan<T, S> {}$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^unsafe impl<T: Send, S: Sync> Sync for Chan<T, S> {}$/;"	c
Chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_atomic_waker.rs	/^struct Chan {$/;"	s
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    Child(ChildDropGuard<imp::Child>),$/;"	e	enum:FusedChild
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub struct Child {$/;"	s
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Future for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Kill for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl fmt::Debug for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) struct Child {$/;"	s
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl AsRawHandle for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl Future for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl Kill for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl fmt::Debug for Child {$/;"	c
Child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^pub(crate) struct Child {$/;"	s
ChildDropGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl<T, E, F> Future for ChildDropGuard<F>$/;"	c
ChildDropGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl<T: Kill> Drop for ChildDropGuard<T> {$/;"	c
ChildDropGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl<T: Kill> Kill for ChildDropGuard<T> {$/;"	c
ChildDropGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^struct ChildDropGuard<T: Kill> {$/;"	s
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawFd for ChildStderr {$/;"	c	module:sys
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawHandle for ChildStderr {$/;"	c	module:sys
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl AsyncRead for ChildStderr {$/;"	c
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl ChildStderr {$/;"	c
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl TryInto<Stdio> for ChildStderr {$/;"	c
ChildStderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub struct ChildStderr {$/;"	s
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawFd for ChildStdin {$/;"	c	module:sys
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawHandle for ChildStdin {$/;"	c	module:sys
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl AsyncWrite for ChildStdin {$/;"	c
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl ChildStdin {$/;"	c
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl TryInto<Stdio> for ChildStdin {$/;"	c
ChildStdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub struct ChildStdin {$/;"	s
ChildStdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) type ChildStdio = PollEvented<Pipe>;$/;"	t
ChildStdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^pub(crate) type ChildStdio = PollEvented<NamedPipe>;$/;"	t
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawFd for ChildStdout {$/;"	c	module:sys
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl AsRawHandle for ChildStdout {$/;"	c	module:sys
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl AsyncRead for ChildStdout {$/;"	c
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl ChildStdout {$/;"	c
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl TryInto<Stdio> for ChildStdout {$/;"	c
ChildStdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub struct ChildStdout {$/;"	s
Clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    Clear(u8),$/;"	e	enum:Tick
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    Client,$/;"	e	enum:PipeEnd
ClientOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl ClientOptions {$/;"	c
ClientOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub struct ClientOptions {$/;"	s
ClockTime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl ClockTime {$/;"	c
ClockTime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^pub(self) struct ClockTime {$/;"	s
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    Closed,$/;"	e	enum:TryAcquireError
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        Closed,$/;"	e	enum:error::RecvError
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        Closed,$/;"	e	enum:error::TryRecvError
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    Closed,$/;"	e	enum:Read
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    Closed(T),$/;"	e	enum:TrySendError
Closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^        Closed,$/;"	e	enum:error::TryRecvError
CombiAbort	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiAbort {$/;"	g
CombiJoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiJoinHandle {$/;"	g
CombiJoinInterest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiJoinInterest {$/;"	g
CombiLocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiLocalSet {$/;"	g
CombiOutput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiOutput {$/;"	g
CombiRuntime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiRuntime {$/;"	g
CombiTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^enum CombiTask {$/;"	g
Command	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl Command {$/;"	c
Command	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^impl From<StdCommand> for Command {$/;"	c
Command	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub struct Command {$/;"	s
Complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    Complete,$/;"	e	enum:PollFuture
Condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^impl Condvar {$/;"	c
Condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^pub(crate) struct Condvar(parking_lot::Condvar);$/;"	s
Consumed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    Consumed,$/;"	e	enum:Stage
Context	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^struct Context {$/;"	s
Context	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl Context {$/;"	c
Context	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^struct Context {$/;"	s
Context	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^struct Context {$/;"	s
Copy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^impl<R, W> Future for Copy<'_, R, W>$/;"	c
Copy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^struct Copy<'a, R: ?Sized, W: ?Sized> {$/;"	s
CopyBidirectional	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^impl<'a, A, B> Future for CopyBidirectional<'a, A, B>$/;"	c
CopyBidirectional	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^struct CopyBidirectional<'a, A: ?Sized, B: ?Sized> {$/;"	s
CopyBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_buf.rs	/^impl<R, W> Future for CopyBuf<'_, R, W>$/;"	c
CopyBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^impl CopyBuffer {$/;"	c
CopyBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^pub(super) struct CopyBuffer {$/;"	s
Core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(super) struct Core<T: Future, S> {$/;"	s
Core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^struct Core {$/;"	s
Core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl Core {$/;"	c
Core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^struct Core {$/;"	s
CoreStage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^impl<T: Future> CoreStage<T> {$/;"	c
CoreStage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(super) struct CoreStage<T: Future> {$/;"	s
CtrlBreak	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^impl CtrlBreak {$/;"	c
CtrlBreak	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^pub struct CtrlBreak {$/;"	s
CtrlC	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^impl CtrlC {$/;"	c
CtrlC	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^pub struct CtrlC {$/;"	s
CurrentThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    CurrentThread,$/;"	e	enum:Kind
CurrentThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    CurrentThread,$/;"	e	enum:CombiRuntime
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^impl<T: AsRef<[u8]> + Unpin> AsyncBufRead for io::Cursor<T> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^impl<T: AsRef<[u8]> + Unpin> AsyncRead for io::Cursor<T> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^impl<T: AsRef<[u8]> + Unpin> AsyncSeek for io::Cursor<T> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl AsyncWrite for io::Cursor<&mut Vec<u8>> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl AsyncWrite for io::Cursor<&mut [u8]> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl AsyncWrite for io::Cursor<Box<[u8]>> {$/;"	c
Cursor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl AsyncWrite for io::Cursor<Vec<u8>> {$/;"	c
DID_SPAWN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    static DID_SPAWN: AtomicBool = AtomicBool::new(false);$/;"	v	function:spawn_during_shutdown
DWORD	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub type DWORD = crate::doc::NotDefinedHere;$/;"	t	module:doc
Dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    Dealloc,$/;"	e	enum:PollFuture
Dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Dealloc,$/;"	e	enum:TransitionToNotifiedByVal
Dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Dealloc,$/;"	e	enum:TransitionToRunning
Delay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    Delay,$/;"	e	enum:MissedTickBehavior
DirBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^impl DirBuilder {$/;"	c
DirBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^pub struct DirBuilder {$/;"	s
DirEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^impl DirEntry {$/;"	c
DirEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^pub struct DirEntry(Arc<std::fs::DirEntry>);$/;"	s
Direction	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^enum Direction {$/;"	g
Direction	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Direction {$/;"	c
DoNothing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    DoNothing,$/;"	e	enum:TransitionToNotifiedByRef
DoNothing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    DoNothing,$/;"	e	enum:TransitionToNotifiedByVal
Done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    Done(Fut::Output),$/;"	e	enum:MaybeDone
Done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    Done(u64),$/;"	e	enum:TransferState
Done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    Done(ExitStatus),$/;"	e	enum:FusedChild
Done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    Done,$/;"	e	enum:PollFuture
Done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    Done,$/;"	e	enum:State
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Drop for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Park for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl fmt::Debug for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^pub(crate) struct Driver {$/;"	s
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^impl Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^impl Park for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^pub(crate) struct Driver {$/;"	s
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^impl Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^impl Park for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^pub(crate) struct Driver {$/;"	s
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^impl Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^impl Park for Driver {$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^pub(crate) struct Driver {$/;"	s
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl<P> Driver<P>$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl<P> Drop for Driver<P>$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl<P> Park for Driver<P>$/;"	c
Driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^pub(crate) struct Driver<P: Park + 'static> {$/;"	s
DropAfterConsume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    DropAfterConsume = 4,$/;"	e	enum:CombiJoinHandle
DropAfterNoConsume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    DropAfterNoConsume = 3,$/;"	e	enum:CombiJoinHandle
DropFirstPoll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    DropFirstPoll = 2,$/;"	e	enum:CombiJoinHandle
DropImmediately	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    DropImmediately = 1,$/;"	e	enum:CombiJoinHandle
DuplexStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl AsyncRead for DuplexStream {$/;"	c
DuplexStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl AsyncWrite for DuplexStream {$/;"	c
DuplexStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl Drop for DuplexStream {$/;"	c
DuplexStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^pub struct DuplexStream {$/;"	s
ERROR_ACCESS_DENIED	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type ERROR_ACCESS_DENIED = crate::doc::NotDefinedHere;$/;"	t	module:shared::winerror
ERROR_MORE_DATA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type ERROR_MORE_DATA = crate::doc::NotDefinedHere;$/;"	t	module:shared::winerror
ERROR_PIPE_BUSY	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type ERROR_PIPE_BUSY = crate::doc::NotDefinedHere;$/;"	t	module:shared::winerror
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^impl<A, B> Park for Either<A, B>$/;"	c
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^impl<A, B> Unpark for Either<A, B>$/;"	c
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^impl<A, B> fmt::Debug for Either<A, B>$/;"	c
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^pub(crate) enum Either<A, B> {$/;"	g
Elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    Elapsed,$/;"	e	enum:InsertError
Elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl Elapsed {$/;"	c
Elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl fmt::Display for Elapsed {$/;"	c
Elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl std::error::Error for Elapsed {}$/;"	c
Elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^pub struct Elapsed(());$/;"	s
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^impl AsyncBufRead for Empty {$/;"	c
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^impl AsyncRead for Empty {$/;"	c
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^impl fmt::Debug for Empty {$/;"	c
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        Empty,$/;"	e	enum:error::TryRecvError
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^        Empty,$/;"	e	enum:error::TryRecvError
Enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^impl Drop for Enter {$/;"	c
Enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^impl fmt::Debug for Enter {$/;"	c
Enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^pub(crate) struct Enter {$/;"	s
EnterContext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^impl EnterContext {$/;"	c
EnterContext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^pub(crate) enum EnterContext {$/;"	g
EnterGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/context.rs	/^impl Drop for EnterGuard {$/;"	c
EnterGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/context.rs	/^pub(crate) struct EnterGuard(Option<Handle>);$/;"	s
EnterGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^pub struct EnterGuard<'a> {$/;"	s
Entered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    Entered {$/;"	e	enum:EnterContext
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    struct Entry {$/;"	s	module:tests
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    unsafe impl<'a> Link for &'a Entry {$/;"	c	module:tests
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^pub(crate) trait Entry: Default {$/;"	i
EntryList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^pub(super) type EntryList = crate::util::linked_list::LinkedList<TimerShared, TimerShared>;$/;"	t
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    type Error = io::Error;$/;"	t	implementation:Driver
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    type Error = io::Error;$/;"	t	implementation:TcpListener
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    type Error = io::Error;$/;"	t	implementation:TcpStream
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    type Error = io::Error;$/;"	t	implementation:UdpSocket
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    type Error = io::Error;$/;"	t	implementation:UnixDatagram
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    type Error = io::Error;$/;"	t	implementation:UnixListener
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    type Error = io::Error;$/;"	t	implementation:UnixStream
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    type Error = Either<A::Error, B::Error>;$/;"	t
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    type Error: Debug;$/;"	t	interface:Park
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    type Error = ParkError;$/;"	t	implementation:CachedParkThread
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    type Error = ParkError;$/;"	t	implementation:ParkThread
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    type Error = io::Error;$/;"	t	implementation:ChildStderr
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    type Error = io::Error;$/;"	t	implementation:ChildStdin
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    type Error = io::Error;$/;"	t	implementation:ChildStdout
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    type Error = io::Error;$/;"	t	implementation:Driver
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    type Error = <TimeDriver as Park>::Error;$/;"	t	implementation:Driver
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    type Error = ();$/;"	t	implementation:Parker
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^impl From<JoinError> for io::Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    type Error = io::Error;$/;"	t	implementation:Driver
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    type Error = P::Error;$/;"	t
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl From<Elapsed> for std::io::Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl From<Kind> for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl error::Error for Error {}$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^pub struct Error(Kind);$/;"	s
EventId	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) type EventId = usize;$/;"	t
EventInfo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl Default for EventInfo {$/;"	c
EventInfo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) struct EventInfo {$/;"	s
Expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^pub(crate) struct Expiration {$/;"	s
Failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Failed,$/;"	e	enum:TransitionToRunning
FastRand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^impl FastRand {$/;"	c
FastRand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^pub(crate) struct FastRand {$/;"	s
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl AsyncRead for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl AsyncSeek for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl AsyncWrite for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl From<StdFile> for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl fmt::Debug for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl std::os::unix::io::AsRawFd for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl std::os::unix::io::FromRawFd for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl std::os::windows::io::AsRawHandle for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl std::os::windows::io::FromRawHandle for File {$/;"	c
File	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^pub struct File {$/;"	s
FillBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/fill_buf.rs	/^impl<'a, R: AsyncBufRead + ?Sized + Unpin> Future for FillBuf<'a, R> {$/;"	c
Finished	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    Finished(super::Result<T::Output>),$/;"	e	enum:Stage
Flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/flush.rs	/^impl<A> Future for Flush<'_, A>$/;"	c
Foo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    impl Default for Foo {$/;"	c	module:test
Foo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    impl Entry for Foo {$/;"	c	module:test
Foo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    struct Foo {$/;"	s	module:test
FromRawHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^        pub trait FromRawHandle {$/;"	i	module:windows::io
Full	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    Full(T),$/;"	e	enum:TrySendError
FusedChild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^enum FusedChild {$/;"	g
FutWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    impl<F: Future> Future for FutWrapper<F> {$/;"	c	function:test_combination
FutWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    impl<F> Drop for FutWrapper<F> {$/;"	c	function:test_combination
FutWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    struct FutWrapper<F> {$/;"	s	function:test_combination
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    Future(Fut),$/;"	e	enum:MaybeDone
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^        type Future: Future<Output = io::Result<Self::Iter>> + Send + 'static;$/;"	t	interface:sealed::ToSocketAddrsPriv
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Future = ReadyFuture<Self::Iter>;$/;"	t	implementation:SocketAddr
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Future = ReadyFuture<Self::Iter>;$/;"	t	implementation:SocketAddrV4
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Future = ReadyFuture<Self::Iter>;$/;"	t	implementation:SocketAddrV6
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Future = ReadyFuture<Self::Iter>;$/;"	t	implementation:u16
Future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Future = T::Future;$/;"	t
GLOBALS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    static GLOBALS: Lazy<Pin<Box<Globals>>> = Lazy::new(|| {$/;"	v	function:globals
GlobalOrphanQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl GlobalOrphanQueue {$/;"	c
GlobalOrphanQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl OrphanQueue<StdChild> for GlobalOrphanQueue {$/;"	c
GlobalOrphanQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl fmt::Debug for GlobalOrphanQueue {$/;"	c
GlobalOrphanQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) struct GlobalOrphanQueue;$/;"	s
Globals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl Globals {$/;"	c
Globals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl ops::Deref for Globals {$/;"	c
Globals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) struct Globals {$/;"	s
Gone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    Gone,$/;"	e	enum:MaybeDone
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T> Drop for Guard<'_, T> {$/;"	c
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T> Guard<'_, T> {$/;"	c
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^struct Guard<'a, T> {$/;"	s
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    impl<P: Park> Drop for Guard<'_, P> {$/;"	c	function:enter
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    struct Guard<'a, P: Park> {$/;"	s	function:enter
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^        impl<'a, T: Future> Drop for Guard<'a, T> {$/;"	c	function:poll_future
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^        struct Guard<'a, T: Future> {$/;"	s	function:poll_future
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^        impl<T> Drop for Guard<'_, T> {$/;"	c	method:TaskLocalFuture::with_task
Guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^        struct Guard<'a, T: 'static> {$/;"	s	method:TaskLocalFuture::with_task
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Unpark for Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl fmt::Debug for Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^pub(crate) struct Handle {$/;"	s
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^impl Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^pub struct Handle {$/;"	s
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    type Handle = Task<S>;$/;"	t	implementation:Task
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^impl Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^pub(crate) struct Handle {$/;"	s
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    type Handle = NonNull<Waiter>;$/;"	t	implementation:Waiter
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    type Handle = NonNull<Waiter>;$/;"	t	implementation:Waiter
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    type Handle = NonNull<Waiter>;$/;"	t	implementation:Waiter
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    type Handle = TimerHandle;$/;"	t	implementation:TimerShared
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^impl Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^impl fmt::Debug for Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^pub(crate) struct Handle {$/;"	s
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl Handle {$/;"	c
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        type Handle = Pin<&'a Entry>;$/;"	t	implementation:tests::Entry
Handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    type Handle;$/;"	t	interface:Link
Harness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^impl<T, S> Harness<T, S>$/;"	c
Harness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^pub(super) struct Harness<T: Future, S: 'static> {$/;"	s
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^impl Header {$/;"	c
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(crate) struct Header {$/;"	s
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^unsafe impl Send for Header {}$/;"	c
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^unsafe impl Sync for Header {}$/;"	c
INIT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    static INIT: Once = Once::new();$/;"	v	function:global_init
Idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    Idle(Option<Buf>),$/;"	e	enum:State
Idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    Idle(Option<std::fs::ReadDir>),$/;"	e	enum:State
Idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    Idle(Option<Buf>),$/;"	e	enum:State
Idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^impl Idle {$/;"	c
Idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^pub(super) struct Idle {$/;"	s
Init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    Init,$/;"	e	enum:SeekState
Init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    Init,$/;"	e	enum:SeekState
Init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) trait Init {$/;"	i
Init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    Init(usize),$/;"	e	enum:State
InitializingError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    InitializingError(T),$/;"	e	enum:SetError
Inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^impl<T: 'static> Drop for Inject<T> {$/;"	c
Inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^impl<T: 'static> Inject<T> {$/;"	c
Inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^pub(crate) struct Inject<T: 'static> {$/;"	s
Inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^unsafe impl<T> Send for Inject<T> {}$/;"	c
Inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^unsafe impl<T> Sync for Inject<T> {}$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Drop for Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^pub(super) struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T> Inner<T> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^struct Inner<T> {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> Inner<P> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^struct Inner<P: Park> {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^impl<T> Inner<T> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^pub(super) struct Inner<T: 'static> {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^unsafe impl<T> Send for Inner<T> {}$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^unsafe impl<T> Sync for Inner<T> {}$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^struct Inner<T> {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^struct Inner {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^pub(super) struct Inner(());$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T: fmt::Debug> fmt::Debug for Inner<T> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Drop for Inner<T> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Inner<T> {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^struct Inner<T> {$/;"	s
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^unsafe impl<T: Send> Send for Inner<T> {}$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^unsafe impl<T: Send> Sync for Inner<T> {}$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl fmt::Debug for Inner {$/;"	c
Inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^struct Inner {$/;"	s
InnerGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> Drop for InnerGuard<'_, P> {$/;"	c
InnerGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl<P: Park> InnerGuard<'_, P> {$/;"	c
InnerGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^struct InnerGuard<'a, P: Park> {$/;"	s
InnerState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^struct InnerState {$/;"	s
InsertError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^pub(crate) enum InsertError {$/;"	g
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl From<Instant> for std::time::Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl From<std::time::Instant> for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl fmt::Debug for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl ops::Add<Duration> for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl ops::AddAssign<Duration> for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl ops::Sub for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl ops::Sub<Duration> for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^impl ops::SubAssign<Duration> for Instant {$/;"	c
Instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^pub struct Instant {$/;"	s
Instrumented	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/trace.rs	/^impl<F: Future> InstrumentedFuture for tracing::instrument::Instrumented<F> {$/;"	c
InstrumentedFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/trace.rs	/^pub(crate) trait InstrumentedFuture: Future {$/;"	i
Interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^impl Interest {$/;"	c
Interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^impl fmt::Debug for Interest {$/;"	c
Interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^impl ops::BitOr for Interest {$/;"	c
Interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^impl ops::BitOrAssign for Interest {$/;"	c
Interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^pub struct Interest(mio::Interest);$/;"	s
Internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    pub struct Internal;$/;"	s	module:sealed
InternalStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) trait InternalStream {$/;"	i
Interval	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^impl Interval {$/;"	c
Interval	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^pub struct Interval {$/;"	s
Invalid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    Invalid = 3,$/;"	e	enum:Kind
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^            type Item = task::Notified<T>;$/;"	t	implementation:Local::push_overflow::BatchTaskIter
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^        type Iter: Iterator<Item = SocketAddr> + Send + 'static;$/;"	t	interface:sealed::ToSocketAddrsPriv
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = T::Iter;$/;"	t
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = std::option::IntoIter<SocketAddr>;$/;"	t	implementation:SocketAddr
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = std::option::IntoIter<SocketAddr>;$/;"	t	implementation:SocketAddrV4
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = std::option::IntoIter<SocketAddr>;$/;"	t	implementation:SocketAddrV6
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = std::option::IntoIter<SocketAddr>;$/;"	t	implementation:u16
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    type Iter = std::vec::IntoIter<SocketAddr>;$/;"	t	implementation:SocketAddr
JoinError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^impl JoinError {$/;"	c
JoinError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^impl fmt::Debug for JoinError {$/;"	c
JoinError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^impl fmt::Display for JoinError {$/;"	c
JoinError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^impl std::error::Error for JoinError {}$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^impl<T> Future for JoinHandle<T> {$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^pub(super) struct JoinHandle<T> {$/;"	s
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^impl<T> Drop for JoinHandle<T> {$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^impl<T> Future for JoinHandle<T> {$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^impl<T> JoinHandle<T> {$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^impl<T> Unpin for JoinHandle<T> {}$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^impl<T> fmt::Debug for JoinHandle<T>$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^unsafe impl<T: Send> Send for JoinHandle<T> {}$/;"	c
JoinHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^unsafe impl<T: Send> Sync for JoinHandle<T> {}$/;"	c
Kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/kill.rs	/^pub(crate) trait Kill {$/;"	i
Kind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^pub(crate) enum Kind {$/;"	g
Kind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^pub(crate) enum Kind {$/;"	g
Lagged	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        Lagged(u64),$/;"	e	enum:error::RecvError
Lagged	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        Lagged(u64),$/;"	e	enum:error::TryRecvError
Launch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl Launch {$/;"	c
Launch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^pub(crate) struct Launch(Vec<Arc<Worker>>);$/;"	s
Level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^impl Level {$/;"	c
Level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^impl fmt::Debug for Level {$/;"	c
Level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^pub(crate) struct Level {$/;"	s
Lines	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^impl<R> Lines<R>$/;"	c
Link	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^pub(crate) unsafe trait Link {$/;"	i
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<L, T> LinkedList<L, T> {$/;"	c
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<L: Link> Default for LinkedList<L, L::Target> {$/;"	c
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<L: Link> LinkedList<L, L::Target> {$/;"	c
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<L: Link> fmt::Debug for LinkedList<L, L::Target> {$/;"	c
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^pub(crate) struct LinkedList<L, T> {$/;"	s
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^unsafe impl<L: Link> Send for LinkedList<L, L::Target> where L::Target: Send {}$/;"	c
LinkedList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^unsafe impl<L: Link> Sync for LinkedList<L, L::Target> where L::Target: Sync {}$/;"	c
Local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^impl<T> Drop for Local<T> {$/;"	c
Local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^impl<T> Local<T> {$/;"	c
Local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^pub(super) struct Local<T: 'static> {$/;"	s
LocalKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl<T: 'static> LocalKey<T> {$/;"	c
LocalKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl<T: 'static> fmt::Debug for LocalKey<T> {$/;"	c
LocalKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl<T: Copy + 'static> LocalKey<T> {$/;"	c
LocalKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^pub struct LocalKey<T: 'static> {$/;"	s
LocalNotified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: Schedule> LocalNotified<S> {$/;"	c
LocalNotified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) struct LocalNotified<S: 'static> {$/;"	s
LocalOwnedTasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^impl<S: 'static> LocalOwnedTasks<S> {$/;"	c
LocalOwnedTasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^pub(crate) struct LocalOwnedTasks<S: 'static> {$/;"	s
LocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl Default for LocalSet {$/;"	c
LocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl Drop for LocalSet {$/;"	c
LocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl Future for LocalSet {$/;"	c
LocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl LocalSet {$/;"	c
LocalSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl fmt::Debug for LocalSet {$/;"	c
LockGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^impl<T> Deref for LockGuard<'_, T> {$/;"	c
LockGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^impl<T> DerefMut for LockGuard<'_, T> {$/;"	c
LockGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^impl<T> Drop for LockGuard<'_, T> {$/;"	c
LockGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^pub(crate) struct LockGuard<'a, T> {$/;"	s
LockGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^unsafe impl<T: Sync> Sync for LockGuard<'_, T> {}$/;"	c
LoggingMockWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    impl LoggingMockWriter {$/;"	c	module:tests
LoggingMockWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    impl crate::io::AsyncWrite for LoggingMockWriter {$/;"	c	module:tests
LoggingMockWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    struct LoggingMockWriter {$/;"	s	module:tests
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized + fmt::Display> fmt::Display for MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized> Deref for MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized> DerefMut for MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized> Drop for MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized> MappedMutexGuard<'a, T> {$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^pub struct MappedMutexGuard<'a, T: ?Sized> {$/;"	s
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<'a, T> Send for MappedMutexGuard<'a, T> where T: ?Sized + Send + 'a {}$/;"	c
MappedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<'a, T> Sync for MappedMutexGuard<'a, T> where T: ?Sized + Sync + 'a {}$/;"	c
MaybeDone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^impl<Fut: Future + Unpin> Unpin for MaybeDone<Fut> {}$/;"	c
MaybeDone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^impl<Fut: Future> Future for MaybeDone<Fut> {$/;"	c
MaybeDone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^impl<Fut: Future> MaybeDone<Fut> {$/;"	c
MaybeDone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^pub enum MaybeDone<Fut: Future> {$/;"	g
Message	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    Message,$/;"	e	enum:PipeMode
MissedTickBehavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^impl Default for MissedTickBehavior {$/;"	c
MissedTickBehavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^impl MissedTickBehavior {$/;"	c
MissedTickBehavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^pub enum MissedTickBehavior {$/;"	g
Mock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl Future for Mock {$/;"	c	module:test
Mock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl Kill for Mock {$/;"	c	module:test
Mock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    impl Mock {$/;"	c	module:test
Mock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    struct Mock {$/;"	s	module:test
MockFile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^impl Read for &'_ MockFile {$/;"	c
MockFile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^impl Read for MockFile {$/;"	c
MockFile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^impl Seek for &'_ MockFile {$/;"	c
MockFile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^impl Write for &'_ MockFile {$/;"	c
MockQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    impl<W> MockQueue<W> {$/;"	c	module:test
MockQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    impl<W> OrphanQueue<W> for MockQueue<W> {$/;"	c	module:test
MockQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    pub(crate) struct MockQueue<W> {$/;"	s	module:test
MockStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    impl InternalStream for MockStream {$/;"	c	module:test
MockStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    impl MockStream {$/;"	c	module:test
MockStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    struct MockStream {$/;"	s	module:test
MockUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^impl MockUnpark {$/;"	c
MockUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^impl Unpark for MockUnpark {$/;"	c
MockUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^struct MockUnpark {}$/;"	s
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    impl MockWait {$/;"	c	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    impl Wait for MockWait {$/;"	c	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    struct MockWait {$/;"	s	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    impl Kill for MockWait {$/;"	c	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    impl MockWait {$/;"	c	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    impl Wait for MockWait {$/;"	c	module:test
MockWait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    struct MockWait {$/;"	s	module:test
Multi1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    Multi1,$/;"	e	enum:CombiRuntime
Multi2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    Multi2,$/;"	e	enum:CombiRuntime
MultiThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    MultiThread,$/;"	e	enum:Kind
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^    impl<T> Mutex<T> {$/;"	c	module:sync
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^    pub(crate) struct Mutex<T>(loom::sync::Mutex<T>);$/;"	s	module:sync
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mutex.rs	/^impl<T> Mutex<T> {$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mutex.rs	/^pub(crate) struct Mutex<T: ?Sized>(sync::Mutex<T>);$/;"	s
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^impl<T> Mutex<T> {$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^pub(crate) struct Mutex<T: ?Sized>(parking_lot::Mutex<T>);$/;"	s
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> Mutex<T> {$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T> Default for Mutex<T>$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T> From<T> for Mutex<T> {$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T> std::fmt::Debug for Mutex<T>$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^pub struct Mutex<T: ?Sized> {$/;"	s
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<T> Send for Mutex<T> where T: ?Sized + Send {}$/;"	c
Mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<T> Sync for Mutex<T> where T: ?Sized + Send {}$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<'a, T: ?Sized> MutexGuard<'a, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'_, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'_, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> Deref for MutexGuard<'_, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> DerefMut for MutexGuard<'_, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> Drop for MutexGuard<'_, T> {$/;"	c
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^pub struct MutexGuard<'a, T: ?Sized> {$/;"	s
MutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<T> Sync for MutexGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
NamedPipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^        pub type NamedPipe = crate::doc::NotDefinedHere;$/;"	t	module:doc::mio_windows
NamedPipeClient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsRawHandle for NamedPipeClient {$/;"	c
NamedPipeClient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsyncRead for NamedPipeClient {$/;"	c
NamedPipeClient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsyncWrite for NamedPipeClient {$/;"	c
NamedPipeClient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl NamedPipeClient {$/;"	c
NamedPipeClient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub struct NamedPipeClient {$/;"	s
NamedPipeServer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsRawHandle for NamedPipeServer {$/;"	c
NamedPipeServer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsyncRead for NamedPipeServer {$/;"	c
NamedPipeServer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl AsyncWrite for NamedPipeServer {$/;"	c
NamedPipeServer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl NamedPipeServer {$/;"	c
NamedPipeServer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub struct NamedPipeServer {$/;"	s
No	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    No,$/;"	e	enum:CombiLocalSet
NoPanic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    NoPanic,$/;"	e	enum:CombiOutput
NoPanic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    NoPanic,$/;"	e	enum:CombiTask
NoPermits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    NoPermits,$/;"	e	enum:TryAcquireError
NoopSchedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/schedule.rs	/^impl task::Schedule for NoopSchedule {$/;"	c
NoopSchedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/schedule.rs	/^pub(crate) struct NoopSchedule;$/;"	s
NotAborted	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    NotAborted = 0,$/;"	e	enum:CombiAbort
NotDefinedHere	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/mod.rs	/^pub enum NotDefinedHere {}$/;"	g
NotEntered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    NotEntered,$/;"	e	enum:EnterContext
NotPolled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    NotPolled,$/;"	e	enum:CombiJoinInterest
NotificationType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^enum NotificationType {$/;"	g
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    Notified,$/;"	e	enum:PollFuture
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: 'static> Notified<S> {$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S> fmt::Debug for Notified<S> {$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) struct Notified<S: 'static>(Task<S>);$/;"	s
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S: Schedule> Send for Notified<S> {}$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S: Schedule> Sync for Notified<S> {}$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^type Notified = task::Notified<Arc<Shared>>;$/;"	t
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^impl Drop for Notified<'_> {$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^impl Future for Notified<'_> {$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^impl Notified<'_> {$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^pub struct Notified<'a> {$/;"	s
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^unsafe impl<'a> Send for Notified<'a> {}$/;"	c
Notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^unsafe impl<'a> Sync for Notified<'a> {}$/;"	c
Notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^impl Default for Notify {$/;"	c
Notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^impl Notify {$/;"	c
Notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^pub struct Notify {$/;"	s
O	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^impl<T, O: OrphanQueue<T>> OrphanQueue<T> for &O {$/;"	c
ORPHAN_QUEUE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^static ORPHAN_QUEUE: Lazy<OrphanQueueImpl<StdChild>> = Lazy::new(OrphanQueueImpl::new);$/;"	v
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Ok,$/;"	e	enum:TransitionToIdle
OkDealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    OkDealloc,$/;"	e	enum:TransitionToIdle
OkNotified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    OkNotified,$/;"	e	enum:TransitionToIdle
OnClose	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^impl Future for OnClose<'_> {$/;"	c
OnClose	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^impl<'a> OnClose<'a> {$/;"	c
OnClose	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^struct OnClose<'a> {$/;"	s
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T: Clone> Clone for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T: Eq> Eq for OnceCell<T> {}$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T: PartialEq> PartialEq for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> Default for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> Drop for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> From<T> for OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> OnceCell<T> {$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^pub struct OnceCell<T> {$/;"	s
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^unsafe impl<T: Send> Send for OnceCell<T> {}$/;"	c
OnceCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}$/;"	c
OneWaiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    OneWaiter,$/;"	e	enum:NotificationType
Op	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        enum Op {$/;"	g	function:tests::run_fuzz
OpenOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^impl Default for OpenOptions {$/;"	c
OpenOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^impl From<StdOpenOptions> for OpenOptions {$/;"	c
OpenOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^impl OpenOptions {$/;"	c
OpenOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^pub struct OpenOptions(StdOpenOptions);$/;"	s
Operation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^enum Operation {$/;"	g
OrphanQueue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^pub(crate) trait OrphanQueue<T> {$/;"	i
OrphanQueueImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^impl<T> OrphanQueueImpl<T> {$/;"	c
OrphanQueueImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^pub(crate) struct OrphanQueueImpl<T> {$/;"	s
OsExtraData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl Init for OsExtraData {$/;"	c
OsExtraData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) struct OsExtraData {$/;"	s
OsExtraData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^impl Init for OsExtraData {$/;"	c
OsExtraData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^pub(crate) struct OsExtraData {}$/;"	s
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl Init for OsStorage {$/;"	c
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl Storage for OsStorage {$/;"	c
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) type OsStorage = Vec<SignalInfo>;$/;"	t
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^impl Init for OsStorage {$/;"	c
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^impl Storage for OsStorage {$/;"	c
OsStorage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^pub(crate) struct OsStorage {$/;"	s
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    type Output = Result<T, io::Error>;$/;"	t	implementation:JoinHandle
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    type Output = ();$/;"	t	implementation:MaybeDone
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^    type Output = T;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^    type Output = T;$/;"	t	implementation:Ready
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/try_join.rs	/^    type Output = Result<(T1, T2, T3), E>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    type Output = Self;$/;"	t	implementation:Interest
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    type Output = Ready;$/;"	t	implementation:Ready
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/seek.rs	/^    type Output = io::Result<u64>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    type Output = io::Result<u64>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    type Output = io::Result<(u64, u64)>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_buf.rs	/^    type Output = io::Result<u64>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/fill_buf.rs	/^    type Output = io::Result<&'a [u8]>;$/;"	t	implementation:FillBuf
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/flush.rs	/^    type Output = io::Result<()>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_buf.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_exact.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^    type Output = io::Result<usize>;$/;"	t	implementation:ReadLine
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_string.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_until.rs	/^    type Output = io::Result<usize>;$/;"	t	implementation:ReadUntil
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/shutdown.rs	/^    type Output = io::Result<()>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all.rs	/^    type Output = io::Result<()>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all_buf.rs	/^    type Output = io::Result<()>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_buf.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_vectored.rs	/^    type Output = io::Result<usize>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        type Output = Result<(), ()>;$/;"	t	implementation:test::Mock
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    type Output = Result<T, E>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    type Output = io::Result<ExitStatus>;$/;"	t	implementation:Child
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    type Output = io::Result<ExitStatus>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    type Output = io::Result<ExitStatus>;$/;"	t	implementation:Child
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^    type Output = R;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    type Output = super::Result<T>;$/;"	t	implementation:JoinHandle
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^    type Output = ();$/;"	t	implementation:BlockedFuture
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    type Output = Track<T::Output>;$/;"	t	implementation:Track
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        type Output = F::Output;$/;"	t	implementation:test_combination::FutWrapper
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    impl Drop for Output {$/;"	c	function:test_combination
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    impl Output {$/;"	c	function:test_combination
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    struct Output {$/;"	s	function:test_combination
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^        type Output = u32;$/;"	t	implementation:test::ZeroSizedFuture
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    type Output = T;$/;"	t	implementation:ReusableBoxFuture
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    type Output = Result<(), AcquireError>;$/;"	t	implementation:Acquire
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    type Output = Result<T, RecvError>;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    type Output = UnsafeCell<MaybeUninit<T>>;$/;"	t	implementation:Values
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    type Output = ();$/;"	t	implementation:Notified
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    type Output = Result<T, RecvError>;$/;"	t	implementation:Receiver
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^    type Output = bool;$/;"	t	implementation:OnClose
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    type Output = ();$/;"	t	implementation:LocalSet
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    type Output = T::Output;$/;"	t	implementation:RunUntil
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    type Output = F::Output;$/;"	t	implementation:TaskLocalFuture
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/unconstrained.rs	/^    type Output = <F as Future>::Output;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    type Output = ();$/;"	t	implementation:Sleep
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    type Output = Duration;$/;"	t	implementation:Instant
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    type Output = Instant;$/;"	t	implementation:Instant
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    type Output = Result<T::Output, Elapsed>;$/;"	t
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized + fmt::Debug> fmt::Debug for OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized + fmt::Display> fmt::Display for OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> Deref for OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> DerefMut for OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> Drop for OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl<T: ?Sized> OwnedMutexGuard<T> {$/;"	c
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^pub struct OwnedMutexGuard<T: ?Sized> {$/;"	s
OwnedMutexGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^unsafe impl<T> Sync for OwnedMutexGuard<T> where T: ?Sized + Send + Sync {}$/;"	c
OwnedPermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Drop for OwnedPermit<T> {$/;"	c
OwnedPermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> OwnedPermit<T> {$/;"	c
OwnedPermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> fmt::Debug for OwnedPermit<T> {$/;"	c
OwnedPermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^pub struct OwnedPermit<T> {$/;"	s
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl AsRef<TcpStream> for OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl AsyncRead for OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^pub struct OwnedReadHalf {$/;"	s
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl AsRef<UnixStream> for OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl AsyncRead for OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl OwnedReadHalf {$/;"	c
OwnedReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^pub struct OwnedReadHalf {$/;"	s
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T, U> Send for OwnedRwLockMappedWriteGuard<T, U>$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T, U> Sync for OwnedRwLockMappedWriteGuard<T, U>$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> Drop for OwnedRwLockMappedWriteGuard<T, U> {$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> OwnedRwLockMappedWriteGuard<T, U> {$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> fmt::Debug for OwnedRwLockMappedWriteGuard<T, U>$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> fmt::Display for OwnedRwLockMappedWriteGuard<T, U>$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> ops::Deref for OwnedRwLockMappedWriteGuard<T, U> {$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^impl<T: ?Sized, U: ?Sized> ops::DerefMut for OwnedRwLockMappedWriteGuard<T, U> {$/;"	c
OwnedRwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^pub struct OwnedRwLockMappedWriteGuard<T: ?Sized, U: ?Sized = T> {$/;"	s
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T, U> Send for OwnedRwLockReadGuard<T, U>$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T, U> Sync for OwnedRwLockReadGuard<T, U>$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^impl<T: ?Sized, U: ?Sized> Drop for OwnedRwLockReadGuard<T, U> {$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^impl<T: ?Sized, U: ?Sized> OwnedRwLockReadGuard<T, U> {$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^impl<T: ?Sized, U: ?Sized> fmt::Debug for OwnedRwLockReadGuard<T, U>$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^impl<T: ?Sized, U: ?Sized> fmt::Display for OwnedRwLockReadGuard<T, U>$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^impl<T: ?Sized, U: ?Sized> ops::Deref for OwnedRwLockReadGuard<T, U> {$/;"	c
OwnedRwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^pub struct OwnedRwLockReadGuard<T: ?Sized, U: ?Sized = T> {$/;"	s
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Send for OwnedRwLockWriteGuard<T> where T: ?Sized + Send + Sync {}$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Sync for OwnedRwLockWriteGuard<T> where T: ?Sized + Send + Sync {}$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> Drop for OwnedRwLockWriteGuard<T> {$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> OwnedRwLockWriteGuard<T> {$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> fmt::Debug for OwnedRwLockWriteGuard<T>$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> fmt::Display for OwnedRwLockWriteGuard<T>$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> ops::Deref for OwnedRwLockWriteGuard<T> {$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^impl<T: ?Sized> ops::DerefMut for OwnedRwLockWriteGuard<T> {$/;"	c
OwnedRwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^pub struct OwnedRwLockWriteGuard<T: ?Sized> {$/;"	s
OwnedSemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^impl Drop for OwnedSemaphorePermit {$/;"	c
OwnedSemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^impl OwnedSemaphorePermit {$/;"	c
OwnedSemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^pub struct OwnedSemaphorePermit {$/;"	s
OwnedTasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^impl<S: 'static> OwnedTasks<S> {$/;"	c
OwnedTasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^pub(crate) struct OwnedTasks<S: 'static> {$/;"	s
OwnedTasksInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^struct OwnedTasksInner<S: 'static> {$/;"	s
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl AsRef<TcpStream> for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl AsyncWrite for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl Drop for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^pub struct OwnedWriteHalf {$/;"	s
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl AsRef<UnixStream> for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl AsyncWrite for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl Drop for OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl OwnedWriteHalf {$/;"	c
OwnedWriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^pub struct OwnedWriteHalf {$/;"	s
PIPE_CLIENT_END	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type PIPE_CLIENT_END = crate::doc::NotDefinedHere;$/;"	t	module:um::winbase
PIPE_SERVER_END	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type PIPE_SERVER_END = crate::doc::NotDefinedHere;$/;"	t	module:um::winbase
PIPE_TYPE_BYTE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type PIPE_TYPE_BYTE = crate::doc::NotDefinedHere;$/;"	t	module:um::winbase
PIPE_TYPE_MESSAGE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type PIPE_TYPE_MESSAGE = crate::doc::NotDefinedHere;$/;"	t	module:um::winbase
Pack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^impl Pack {$/;"	c
Pack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^impl fmt::Debug for Pack {$/;"	c
Pack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^pub(crate) struct Pack {$/;"	s
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T: Entry> Page<T> {$/;"	c
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Default for Page<T> {$/;"	c
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Page<T> {$/;"	c
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^struct Page<T> {$/;"	s
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Send for Page<T> {}$/;"	c
Page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Sync for Page<T> {}$/;"	c
Panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    Panic(SyncWrapper<Box<dyn Any + Send + 'static>>),$/;"	e	enum:Repr
PanicOnDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    PanicOnDrop,$/;"	e	enum:CombiOutput
PanicOnDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    PanicOnDrop,$/;"	e	enum:CombiTask
PanicOnRun	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    PanicOnRun,$/;"	e	enum:CombiTask
PanicOnRunAndDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    PanicOnRunAndDrop,$/;"	e	enum:CombiTask
Park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^pub(crate) trait Park {$/;"	i
ParkError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^pub(crate) type ParkError = ();$/;"	t
ParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl Default for ParkThread {$/;"	c
ParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl Park for ParkThread {$/;"	c
ParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl ParkThread {$/;"	c
ParkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^pub(crate) struct ParkThread {$/;"	s
Parker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^impl Clone for Parker {$/;"	c
Parker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^impl Park for Parker {$/;"	c
Parker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^impl Parker {$/;"	c
Parker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^pub(crate) struct Parker {$/;"	s
Pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    Pending(JoinHandle<(Option<io::Result<std::fs::DirEntry>>, std::fs::ReadDir)>),$/;"	e	enum:State
Pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    Pending,$/;"	e	enum:SeekState
Pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    Pending,$/;"	e	enum:SeekState
PendingOverflowed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    PendingOverflowed(i64),$/;"	e	enum:SeekState
Permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Drop for Permit<'_, T> {$/;"	c
Permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Permit<'_, T> {$/;"	c
Permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> fmt::Debug for Permit<'_, T> {$/;"	c
Permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^pub struct Permit<'a, T> {$/;"	s
Pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^impl<P> AsyncBufRead for Pin<P>$/;"	c
Pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^impl<P> AsyncRead for Pin<P>$/;"	c
Pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^impl<P> AsyncSeek for Pin<P>$/;"	c
Pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl<P> AsyncWrite for Pin<P>$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl AsyncRead for Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl AsyncWrite for Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^impl Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^struct Pipe {$/;"	s
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl AsRawFd for Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Source for Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl<'a> io::Read for &'a Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl<'a> io::Write for &'a Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl<T: IntoRawFd> From<T> for Pipe {$/;"	c
Pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) struct Pipe {$/;"	s
PipeEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub enum PipeEnd {$/;"	g
PipeInfo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub struct PipeInfo {$/;"	s
PipeMode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub enum PipeMode {$/;"	g
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^struct Pointers {$/;"	s
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<T> Pointers<T> {$/;"	c
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^impl<T> fmt::Debug for Pointers<T> {$/;"	c
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^pub(crate) struct Pointers<T> {$/;"	s
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^unsafe impl<T: Send> Send for Pointers<T> {}$/;"	c
Pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^unsafe impl<T: Sync> Sync for Pointers<T> {}$/;"	c
PointersInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^struct PointersInner<T> {$/;"	s
PollEvented	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^impl<E: Source + fmt::Debug> fmt::Debug for PollEvented<E> {$/;"	c
PollEvented	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^impl<E: Source> Deref for PollEvented<E> {$/;"	c
PollEvented	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^impl<E: Source> Drop for PollEvented<E> {$/;"	c
PollEvented	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^impl<E: Source> PollEvented<E> {$/;"	c
PollFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^impl<F> Unpin for PollFn<F> {}$/;"	c
PollFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^impl<F> fmt::Debug for PollFn<F> {$/;"	c
PollFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^impl<T, F> Future for PollFn<F>$/;"	c
PollFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^pub struct PollFn<F> {$/;"	s
PollFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^enum PollFuture {$/;"	g
Polled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    Polled,$/;"	e	enum:CombiJoinInterest
Pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^            Pop,$/;"	e	enum:tests::run_fuzz::Op
Push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^            Push,$/;"	e	enum:tests::run_fuzz::Op
R	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/async_buf_read_ext.rs	/^impl<R: AsyncBufRead + ?Sized> AsyncBufReadExt for R {}$/;"	c
R	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/async_read_ext.rs	/^impl<R: AsyncRead + ?Sized> AsyncReadExt for R {}$/;"	c
RawHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^        pub type RawHandle = crate::doc::NotDefinedHere;$/;"	t	module:windows::io
RawTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^impl Clone for RawTask {$/;"	c
RawTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^impl Copy for RawTask {}$/;"	c
RawTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^impl RawTask {$/;"	c
RawTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^pub(super) struct RawTask {$/;"	s
Read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    Read(io::Result<usize>),$/;"	e	enum:Operation
Read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    Read,$/;"	e	enum:Direction
Read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read.rs	/^impl<R> Future for Read<'_, R>$/;"	c
Read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^pub(crate) enum Read<T> {$/;"	g
ReadBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^impl fmt::Debug for ReadBuf<'_> {$/;"	c
ReadBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^impl<'a> ReadBuf<'a> {$/;"	c
ReadBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^pub struct ReadBuf<'a> {$/;"	s
ReadBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_buf.rs	/^impl<R, B> Future for ReadBuf<'_, R, B>$/;"	c
ReadBufParts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^pub(crate) struct ReadBufParts {$/;"	s
ReadDir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^impl ReadDir {$/;"	c
ReadDir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^pub struct ReadDir(State);$/;"	s
ReadExact	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_exact.rs	/^impl<A> Future for ReadExact<'_, A>$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T: AsyncRead> AsyncRead for ReadHalf<T> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T: fmt::Debug> fmt::Debug for ReadHalf<T> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T> ReadHalf<T> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^unsafe impl<T: Send> Send for ReadHalf<T> {}$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^unsafe impl<T: Sync> Sync for ReadHalf<T> {}$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^impl AsRef<TcpStream> for ReadHalf<'_> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^impl AsyncRead for ReadHalf<'_> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^impl ReadHalf<'_> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^pub struct ReadHalf<'a>(&'a TcpStream);$/;"	s
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^impl AsRef<UnixStream> for ReadHalf<'_> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^impl AsyncRead for ReadHalf<'_> {$/;"	c
ReadHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^pub struct ReadHalf<'a>(&'a UnixStream);$/;"	s
ReadLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^impl<R: AsyncBufRead + ?Sized + Unpin> Future for ReadLine<'_, R> {$/;"	c
ReadToEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^impl<A> Future for ReadToEnd<'_, A>$/;"	c
ReadToString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_string.rs	/^impl<A> Future for ReadToString<'_, A>$/;"	c
ReadUntil	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_until.rs	/^impl<R: AsyncBufRead + ?Sized + Unpin> Future for ReadUntil<'_, R> {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^impl<T> Future for Ready<T> {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^impl<T> Unpin for Ready<T> {}$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^pub struct Ready<T>(Option<T>);$/;"	s
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl fmt::Debug for Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl ops::BitAnd<Ready> for Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl ops::BitOr<Ready> for Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl ops::BitOrAssign<Ready> for Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^impl ops::Sub<Ready> for Ready {$/;"	c
Ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^pub struct Ready(usize);$/;"	s
ReadyEvent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^pub(crate) struct ReadyEvent {$/;"	s
ReadyFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^type ReadyFuture<T> = future::Ready<io::Result<T>>;$/;"	t
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^impl<W, Q, S> Deref for Reaper<W, Q, S>$/;"	c
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^impl<W, Q, S> Drop for Reaper<W, Q, S>$/;"	c
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^impl<W, Q, S> Future for Reaper<W, Q, S>$/;"	c
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^impl<W, Q, S> Kill for Reaper<W, Q, S>$/;"	c
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^impl<W, Q, S> Reaper<W, Q, S>$/;"	c
Reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^pub(crate) struct Reaper<W, Q, S>$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^impl Receiver {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^pub(super) struct Receiver {$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^impl<T> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^pub(crate) struct Receiver<T> {$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T: Clone> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> Drop for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> fmt::Debug for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^pub struct Receiver<T> {$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<T: Send> Send for Receiver<T> {}$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<T: Send> Sync for Receiver<T> {}$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Unpin for Receiver<T> {}$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> fmt::Debug for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^pub struct Receiver<T> {$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Drop for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Future for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^pub struct Receiver<T> {$/;"	s
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> Clone for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> Drop for Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> Receiver<T> {$/;"	c
Receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^pub struct Receiver<T> {$/;"	s
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<'a, T> Drop for Recv<'a, T> {$/;"	c
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<'a, T> Future for Recv<'a, T>$/;"	c
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<'a, T> Recv<'a, T> {$/;"	c
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct Recv<'a, T> {$/;"	s
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<'a, T: Send> Send for Recv<'a, T> {}$/;"	c
Recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<'a, T: Send> Sync for Recv<'a, T> {}$/;"	c
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl fmt::Display for RecvError {$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl std::error::Error for RecvError {}$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub enum RecvError {$/;"	g	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl Error for RecvError {}$/;"	c
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl fmt::Display for RecvError {$/;"	c
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^pub struct RecvError(());$/;"	s
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    impl fmt::Display for RecvError {$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    impl std::error::Error for RecvError {}$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub struct RecvError(pub(super) ());$/;"	s	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl fmt::Display for RecvError {$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl std::error::Error for RecvError {}$/;"	c	module:error
RecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub struct RecvError(pub(super) ());$/;"	s	module:error
RecvGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<'a, T> Drop for RecvGuard<'a, T> {$/;"	c
RecvGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<'a, T> RecvGuard<'a, T> {$/;"	c
RecvGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct RecvGuard<'a, T> {$/;"	s
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> ops::Deref for Ref<'_, T> {$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^pub struct Ref<'a, T> {$/;"	s
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T: fmt::Debug> fmt::Debug for Ref<T> {$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Drop for Ref<T> {$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> ops::Deref for Ref<T> {$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^pub(crate) struct Ref<T> {$/;"	s
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Send for Ref<T> {}$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^unsafe impl<T: Sync> Sync for Ref<T> {}$/;"	c
Registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^impl Drop for Registration {$/;"	c
Registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^impl Registration {$/;"	c
Registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^unsafe impl Send for Registration {}$/;"	c
Registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^unsafe impl Sync for Registration {}$/;"	c
Registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl<S: Storage> Registry<S> {$/;"	c
Registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl<S> Registry<S> {$/;"	c
Registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) struct Registry<S> {$/;"	s
Remote	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^struct Remote {$/;"	s
RemoteMsg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^enum RemoteMsg {$/;"	g
RemoteMsg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^unsafe impl Send for RemoteMsg {}$/;"	c
Remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^            Remove(usize),$/;"	e	enum:tests::run_fuzz::Op
Repeat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/repeat.rs	/^impl AsyncRead for Repeat {$/;"	c
Repr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^enum Repr {$/;"	g
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^        impl Drop for Reset {$/;"	c	method:ScopedKey::set
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^        struct Reset {$/;"	s	method:ScopedKey::set
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    impl Drop for Reset {$/;"	c	function:with
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    struct Reset;$/;"	s	function:with
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    impl Drop for Reset {$/;"	c	function:block_in_place
Reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    struct Reset(coop::Budget);$/;"	s	function:block_in_place
ResetGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    impl<'a> Drop for ResetGuard<'a> {$/;"	c	function:with_budget
ResetGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    struct ResetGuard<'a> {$/;"	s	function:with_budget
Resources	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^pub(crate) struct Resources {$/;"	s
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) type Result<T> = std::result::Result<T, JoinError>;$/;"	t
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl Error for ReuniteError {}$/;"	c
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^impl fmt::Display for ReuniteError {$/;"	c
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^pub struct ReuniteError(pub OwnedReadHalf, pub OwnedWriteHalf);$/;"	s
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl Error for ReuniteError {}$/;"	c
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^impl fmt::Display for ReuniteError {$/;"	c
ReuniteError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^pub struct ReuniteError(pub OwnedReadHalf, pub OwnedWriteHalf);$/;"	s
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^impl<T> Drop for ReusableBoxFuture<T> {$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^impl<T> Future for ReusableBoxFuture<T> {$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^impl<T> ReusableBoxFuture<T> {$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^impl<T> Unpin for ReusableBoxFuture<T> {}$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^impl<T> fmt::Debug for ReusableBoxFuture<T> {$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^pub(crate) struct ReusableBoxFuture<T> {$/;"	s
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^unsafe impl<T> Send for ReusableBoxFuture<T> {}$/;"	c
ReusableBoxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^unsafe impl<T> Sync for ReusableBoxFuture<T> {}$/;"	c
Rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    impl Rt {$/;"	c	function:test_combination
Rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    struct Rt {$/;"	s	function:test_combination
RunResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^type RunResult = Result<Box<Core>, ()>;$/;"	t
RunUntil	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl<T: Future> Future for RunUntil<'_, T> {$/;"	c
Running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    Running(CopyBuffer),$/;"	e	enum:TransferState
Running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    Running(T),$/;"	e	enum:Stage
Runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^impl Schedule for Runtime {$/;"	c
Runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^struct Runtime;$/;"	s
Runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^impl Runtime {$/;"	c
Runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^impl Schedule for Runtime {$/;"	c
Runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^struct Runtime(Arc<Inner>);$/;"	s
RuntimeStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^impl RuntimeStats {$/;"	c
RuntimeStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^pub(crate) struct RuntimeStats {}$/;"	s
RuntimeStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^impl RuntimeStats {$/;"	c
RuntimeStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^pub struct RuntimeStats {$/;"	s
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^impl<T> RwLock<T> {$/;"	c
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^pub(crate) struct RwLock<T>(parking_lot::RwLock<T>);$/;"	s
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^impl<T: ?Sized> Default for RwLock<T>$/;"	c
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^impl<T: ?Sized> RwLock<T> {$/;"	c
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^impl<T> From<T> for RwLock<T> {$/;"	c
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub struct RwLock<T: ?Sized> {$/;"	s
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Send for RwLock<T> where T: ?Sized + Send {}$/;"	c
RwLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Sync for RwLock<T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Send for RwLockMappedWriteGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Sync for RwLockMappedWriteGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<'a, T: ?Sized> Drop for RwLockMappedWriteGuard<'a, T> {$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<'a, T: ?Sized> RwLockMappedWriteGuard<'a, T> {$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<'a, T: ?Sized> fmt::Debug for RwLockMappedWriteGuard<'a, T>$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<'a, T: ?Sized> fmt::Display for RwLockMappedWriteGuard<'a, T>$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<T: ?Sized> ops::Deref for RwLockMappedWriteGuard<'_, T> {$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^impl<T: ?Sized> ops::DerefMut for RwLockMappedWriteGuard<'_, T> {$/;"	c
RwLockMappedWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^pub struct RwLockMappedWriteGuard<'a, T: ?Sized> {$/;"	s
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Send for RwLockReadGuard<'_, T> where T: ?Sized + Sync {}$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Sync for RwLockReadGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^impl<'a, T: ?Sized> Drop for RwLockReadGuard<'a, T> {$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^impl<'a, T: ?Sized> RwLockReadGuard<'a, T> {$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^impl<'a, T: ?Sized> fmt::Debug for RwLockReadGuard<'a, T>$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^impl<'a, T: ?Sized> fmt::Display for RwLockReadGuard<'a, T>$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^impl<T: ?Sized> ops::Deref for RwLockReadGuard<'_, T> {$/;"	c
RwLockReadGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^pub struct RwLockReadGuard<'a, T: ?Sized> {$/;"	s
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Send for RwLockWriteGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^unsafe impl<T> Sync for RwLockWriteGuard<'_, T> where T: ?Sized + Send + Sync {}$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<'a, T: ?Sized> RwLockWriteGuard<'a, T> {$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<'a, T: ?Sized> fmt::Debug for RwLockWriteGuard<'a, T>$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<'a, T: ?Sized> fmt::Display for RwLockWriteGuard<'a, T>$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<T: ?Sized> ops::Deref for RwLockWriteGuard<'_, T> {$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^impl<T: ?Sized> ops::DerefMut for RwLockWriteGuard<'_, T> {$/;"	c
RwLockWriteGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^pub struct RwLockWriteGuard<'a, T: ?Sized> {$/;"	s
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S: Semaphore + fmt::Debug> fmt::Debug for Rx<T, S> {$/;"	c
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S: Semaphore> Drop for Rx<T, S> {$/;"	c
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S: Semaphore> Rx<T, S> {$/;"	c
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^pub(crate) struct Rx<T, S: Semaphore> {$/;"	s
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^impl<T> Rx<T> {$/;"	c
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^impl<T> fmt::Debug for Rx<T> {$/;"	c
Rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^pub(crate) struct Rx<T> {$/;"	s
RxFields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T> fmt::Debug for RxFields<T> {$/;"	c
RxFields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^struct RxFields<T> {$/;"	s
RxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^impl RxFuture {$/;"	c
RxFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^struct RxFuture {$/;"	s
S	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/async_seek_ext.rs	/^impl<S: AsyncSeek + ?Sized> AsyncSeekExt for S {}$/;"	c
SECURITY_ATTRIBUTES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type SECURITY_ATTRIBUTES = crate::doc::NotDefinedHere;$/;"	t	module:um::minwinbase
SECURITY_IDENTIFICATION	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^        pub type SECURITY_IDENTIFICATION = crate::doc::NotDefinedHere;$/;"	t	module:um::winbase
Schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    Schedule(task::Notified<Arc<Shared>>),$/;"	e	enum:RemoteMsg
Schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) trait Schedule: Sync + Sized + 'static {$/;"	i
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^impl Default for ScheduledIo {$/;"	c
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^impl Drop for ScheduledIo {$/;"	c
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^impl Entry for ScheduledIo {$/;"	c
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^impl ScheduledIo {$/;"	c
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^pub(crate) struct ScheduledIo {$/;"	s
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^unsafe impl Send for ScheduledIo {}$/;"	c
ScheduledIo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^unsafe impl Sync for ScheduledIo {}$/;"	c
ScopedKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^impl<T> ScopedKey<T> {$/;"	c
ScopedKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^pub(crate) struct ScopedKey<T> {$/;"	s
ScopedKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^unsafe impl<T> Sync for ScopedKey<T> {}$/;"	c
Sealed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub trait Sealed {}$/;"	i	module:private
Seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    Seek(io::Result<u64>),$/;"	e	enum:Operation
Seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/seek.rs	/^impl<S> Future for Seek<'_, S>$/;"	c
SeekState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^pub(super) enum SeekState {$/;"	g
SeekState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^pub(super) enum SeekState {$/;"	g
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl Semaphore {$/;"	c
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl fmt::Debug for Semaphore {$/;"	c
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^pub(crate) struct Semaphore {$/;"	s
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^type Semaphore = (semaphore::Semaphore, usize);$/;"	t
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^pub(crate) trait Semaphore {$/;"	i
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^type Semaphore = AtomicUsize;$/;"	t
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^impl Semaphore {$/;"	c
Semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^pub struct Semaphore {$/;"	s
SemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^impl<'a> Drop for SemaphorePermit<'_> {$/;"	c
SemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^impl<'a> SemaphorePermit<'a> {$/;"	c
SemaphorePermit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^pub struct SemaphorePermit<'a> {$/;"	s
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl<T: fmt::Debug> std::error::Error for SendError<T> {}$/;"	c	module:error
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl<T> fmt::Display for SendError<T> {$/;"	c	module:error
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub struct SendError<T>(pub T);$/;"	s	module:error
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl<T: fmt::Debug> std::error::Error for SendError<T> {}$/;"	c
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl<T> fmt::Display for SendError<T> {$/;"	c
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^pub struct SendError<T>(pub T);$/;"	s
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl<T: fmt::Debug> fmt::Display for SendError<T> {$/;"	c	module:error
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl<T: fmt::Debug> std::error::Error for SendError<T> {}$/;"	c	module:error
SendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub struct SendError<T> {$/;"	s	module:error
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^pub(super) struct Sender {$/;"	s
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^impl<T> Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^pub(crate) struct Sender<T> {$/;"	s
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> Clone for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> Drop for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl<T> fmt::Debug for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^pub struct Sender<T> {$/;"	s
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<T: Send> Send for Sender<T> {}$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl<T: Send> Sync for Sender<T> {}$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Clone for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^impl<T> fmt::Debug for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^pub struct Sender<T> {$/;"	s
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Drop for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl<T> Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^pub struct Sender<T> {$/;"	s
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> Drop for Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^impl<T> Sender<T> {$/;"	c
Sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^pub struct Sender<T> {$/;"	s
Server	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    Server,$/;"	e	enum:PipeEnd
ServerOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^impl ServerOptions {$/;"	c
ServerOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^pub struct ServerOptions {$/;"	s
Set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    Set(u8),$/;"	e	enum:Tick
SetError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T: fmt::Debug> Error for SetError<T> {}$/;"	c
SetError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> SetError<T> {$/;"	c
SetError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^impl<T> fmt::Display for SetError<T> {$/;"	c
SetError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^pub enum SetError<T> {$/;"	g
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl Wake for Shared {$/;"	c
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^struct Shared {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^struct Shared {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^struct Shared {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl Shared {$/;"	c
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^pub(super) struct Shared {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct Shared<T> {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^    struct Shared {$/;"	s	function:basic_usage
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^struct Shared<T> {$/;"	s
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^impl Shared {$/;"	c
Shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^struct Shared {$/;"	s
Shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/shutdown.rs	/^impl<A> Future for Shutdown<'_, A>$/;"	c
Shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    Shutdown = 1,$/;"	e	enum:Kind
ShuttingDown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    ShuttingDown(u64),$/;"	e	enum:TransferState
Signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl InternalStream for Signal {$/;"	c
Signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl Signal {$/;"	c
Signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub struct Signal {$/;"	s
SignalInfo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl Default for SignalInfo {$/;"	c
SignalInfo	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) struct SignalInfo {$/;"	s
SignalKind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^impl SignalKind {$/;"	c
SignalKind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub struct SignalKind(libc::c_int);$/;"	s
Signals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    struct Signals {$/;"	s	function:test_combination
Sink	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^impl AsyncWrite for Sink {$/;"	c
Sink	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^impl fmt::Debug for Sink {$/;"	c
Skip	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    Skip,$/;"	e	enum:MissedTickBehavior
Slab	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Slab<T> {$/;"	c
Slab	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> fmt::Debug for Slab<T> {$/;"	c
Slab	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^pub(crate) struct Slab<T> {$/;"	s
Sleep	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^impl Future for Sleep {$/;"	c
Sleep	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^impl Sleep {$/;"	c
Slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct Slot<T> {$/;"	s
Slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T: Entry> Slot<T> {$/;"	c
Slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^struct Slot<T> {$/;"	s
Slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Slots<T> {$/;"	c
Slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^struct Slots<T> {$/;"	s
Snapshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^impl Snapshot {$/;"	c
Snapshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^impl fmt::Debug for Snapshot {$/;"	c
Snapshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) struct Snapshot(usize);$/;"	s
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for &[SocketAddr] {}$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for SocketAddr {}$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for &[SocketAddr] {$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for SocketAddr {$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^impl SocketAddr {$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^impl fmt::Debug for SocketAddr {$/;"	c
SocketAddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^pub struct SocketAddr(pub(super) mio::net::SocketAddr);$/;"	s
SocketAddrV4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for SocketAddrV4 {}$/;"	c
SocketAddrV4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for SocketAddrV4 {$/;"	c
SocketAddrV6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for SocketAddrV6 {}$/;"	c
SocketAddrV6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for SocketAddrV6 {$/;"	c
SpawnOnDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    impl Drop for SpawnOnDrop {$/;"	c	function:spawn_during_shutdown
SpawnOnDrop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    struct SpawnOnDrop(Runtime);$/;"	s	function:spawn_during_shutdown
SpawnedChild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub(crate) struct SpawnedChild {$/;"	s
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^impl fmt::Debug for Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^pub(crate) struct Spawner {$/;"	s
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^impl fmt::Debug for Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^pub(crate) struct Spawner {$/;"	s
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^impl Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^pub(crate) enum Spawner {$/;"	g
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^impl Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^impl fmt::Debug for Spawner {$/;"	c
Spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^pub(crate) struct Spawner {$/;"	s
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^impl<R> Split<R>$/;"	c
SplitByUtf8BoundaryIfWindows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^impl<W> SplitByUtf8BoundaryIfWindows<W> {$/;"	c
SplitByUtf8BoundaryIfWindows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^impl<W> crate::io::AsyncWrite for SplitByUtf8BoundaryIfWindows<W>$/;"	c
SplitByUtf8BoundaryIfWindows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^pub(crate) struct SplitByUtf8BoundaryIfWindows<W> {$/;"	s
Stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^impl Default for Stack {$/;"	c
Stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^impl Stack {$/;"	c
Stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^pub(crate) struct Stack {$/;"	s
Stage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(super) enum Stage<T: Future> {$/;"	g
Start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    Start(SeekFrom),$/;"	e	enum:SeekState
Start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    Start(SeekFrom),$/;"	e	enum:SeekState
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^enum State {$/;"	g
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^enum State {$/;"	g
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^enum State<T> {$/;"	g
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^impl State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^impl fmt::Debug for State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) struct State {$/;"	s
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^impl From<usize> for State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^impl State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^impl fmt::Debug for State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^struct State(usize);$/;"	s
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^enum State {$/;"	g
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl fmt::Debug for State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^struct State(usize);$/;"	s
StateCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl Default for StateCell {$/;"	c
StateCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl StateCell {$/;"	c
StateCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl std::fmt::Debug for StateCell {$/;"	c
StateCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^pub(super) struct StateCell {$/;"	s
StateSnapshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl StateSnapshot {$/;"	c	module:state
StateSnapshot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub(super) struct StateSnapshot(usize);$/;"	s	module:state
StdChild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Kill for StdChild {$/;"	c
StdChild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^impl Wait for StdChild {$/;"	c
Stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^impl AsyncWrite for Stderr {$/;"	c
Stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^impl std::os::unix::io::AsRawFd for Stderr {$/;"	c
Stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^impl std::os::windows::io::AsRawHandle for Stderr {$/;"	c
Stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^impl AsyncRead for Stdin {$/;"	c
Stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^impl std::os::unix::io::AsRawFd for Stdin {$/;"	c
Stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^impl std::os::windows::io::AsRawHandle for Stdin {$/;"	c
Stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^impl AsyncWrite for Stdout {$/;"	c
Stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^impl std::os::unix::io::AsRawFd for Stdout {$/;"	c
Stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^impl std::os::windows::io::AsRawHandle for Stdout {$/;"	c
Steal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^impl<T> Clone for Steal<T> {$/;"	c
Steal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^impl<T> Steal<T> {$/;"	c
Steal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^pub(super) struct Steal<T: 'static>(Arc<Inner<T>>);$/;"	s
Storage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) trait Storage {$/;"	i
Submit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Submit,$/;"	e	enum:TransitionToNotifiedByRef
Submit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Submit,$/;"	e	enum:TransitionToNotifiedByVal
Success	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    Success,$/;"	e	enum:TransitionToRunning
SyncWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^impl<T> SyncWrapper<T> {$/;"	c
SyncWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^pub(crate) struct SyncWrapper<T> {$/;"	s
SyncWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^unsafe impl<T: Send> Send for SyncWrapper<T> {}$/;"	c
SyncWrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^unsafe impl<T> Sync for SyncWrapper<T> {}$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^impl<T: ?Sized + AsyncBufRead + Unpin> AsyncBufRead for &mut T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^impl<T: ?Sized + AsyncRead + Unpin> AsyncRead for &mut T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^impl<T: ?Sized + AsyncSeek + Unpin> AsyncSeek for &mut T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl<T: ?Sized + AsyncWrite + Unpin> AsyncWrite for &mut T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl<T: ToSocketAddrs + ?Sized> ToSocketAddrs for &T {}$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl<T> sealed::ToSocketAddrsPriv for &T$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/kill.rs	/^impl<T: Kill> Kill for &mut T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^impl<T: Wait> Wait for &mut T {$/;"	c
Tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^impl Tail {$/;"	c
Tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct Tail {$/;"	s
Take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^impl<R: AsyncBufRead> AsyncBufRead for Take<R> {$/;"	c
Take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^impl<R: AsyncRead> AsyncRead for Take<R> {$/;"	c
Take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^impl<R: AsyncRead> Take<R> {$/;"	c
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    type Target = E;$/;"	t	implementation:PollEvented
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    type Target = std::sync::atomic::AtomicPtr<T>;$/;"	t	implementation:AtomicPtr
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    type Target = std::sync::atomic::AtomicU16;$/;"	t	implementation:AtomicU16
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^    type Target = std::sync::atomic::AtomicU32;$/;"	t	implementation:AtomicU32
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^    type Target = std::sync::atomic::AtomicU8;$/;"	t	implementation:AtomicU8
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    type Target = std::sync::atomic::AtomicUsize;$/;"	t	implementation:AtomicUsize
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    type Target = W;$/;"	t
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    type Target = Header;$/;"	t	implementation:Task
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^    type Target = Waker;$/;"	t	implementation:WakerRef
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    type Target = OsExtraData;$/;"	t	implementation:Globals
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    type Target = Waiter;$/;"	t	implementation:Waiter
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    type Target = Waiter;$/;"	t	implementation:Waiter
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    type Target = T;$/;"	t	implementation:MappedMutexGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    type Target = T;$/;"	t	implementation:MutexGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    type Target = T;$/;"	t	implementation:OwnedMutexGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    type Target = Waiter;$/;"	t	implementation:Waiter
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    type Target = U;$/;"	t	implementation:OwnedRwLockReadGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    type Target = T;$/;"	t	implementation:OwnedRwLockWriteGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    type Target = U;$/;"	t	implementation:OwnedRwLockMappedWriteGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    type Target = T;$/;"	t	implementation:RwLockReadGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    type Target = T;$/;"	t	implementation:RwLockWriteGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    type Target = T;$/;"	t	implementation:RwLockMappedWriteGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    type Target = T;$/;"	t	implementation:Ref
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    type Target = TimerShared;$/;"	t	implementation:TimerShared
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        type Target = Entry;$/;"	t	implementation:tests::Entry
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    type Target;$/;"	t	interface:Link
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    type Target = T;$/;"	t	implementation:CachePadded
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    type Target = T;$/;"	t	implementation:Ref
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    type Target = T;$/;"	t	implementation:LockGuard
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    type Target = Waker;$/;"	t	implementation:WakerRef
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^type Task = task::UnownedTask<NoopSchedule>;$/;"	t
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: 'static> Drop for Task<S> {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: 'static> Task<S> {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: Schedule> Task<S> {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S> fmt::Debug for Task<S> {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) struct Task<S: 'static> {$/;"	s
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S> Send for Task<S> {}$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S> Sync for Task<S> {}$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S> linked_list::Link for Task<S> {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^type Task = task::Task<Arc<Shared>>;$/;"	t
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^impl Task {$/;"	c
Task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^struct Task(UnsafeCell<MaybeUninit<Waker>>);$/;"	s
TaskLocalFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl<T: 'static, F: Future> Future for TaskLocalFuture<T, F> {$/;"	c
TaskLocalFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^impl<T: 'static, F> TaskLocalFuture<T, F> {$/;"	c
Tasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^struct Tasks {$/;"	s
TcpListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    impl AsRawFd for TcpListener {$/;"	c	module:sys
TcpListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    impl AsRawSocket for TcpListener {$/;"	c	module:sys
TcpListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^impl TcpListener {$/;"	c
TcpListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^impl TryFrom<net::TcpListener> for TcpListener {$/;"	c
TcpListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^impl fmt::Debug for TcpListener {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl AsRawFd for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl AsRawSocket for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl FromRawFd for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl FromRawSocket for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl IntoRawFd for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl IntoRawSocket for TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl TcpSocket {$/;"	c
TcpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^impl fmt::Debug for TcpSocket {$/;"	c
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    impl AsRawFd for TcpStream {$/;"	c	module:sys
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    impl AsRawSocket for TcpStream {$/;"	c	module:sys
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^impl AsyncRead for TcpStream {$/;"	c
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^impl AsyncWrite for TcpStream {$/;"	c
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^impl TcpStream {$/;"	c
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^impl TryFrom<std::net::TcpStream> for TcpStream {$/;"	c
TcpStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^impl fmt::Debug for TcpStream {$/;"	c
TextMockWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    impl crate::io::AsyncWrite for TextMockWriter {$/;"	c	module:tests
TextMockWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    struct TextMockWriter;$/;"	s	module:tests
ThreadNameFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^pub(crate) type ThreadNameFn = std::sync::Arc<dyn Fn() -> String + Send + Sync + 'static>;$/;"	t
ThreadPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^    ThreadPool(thread_pool::Spawner),$/;"	e	enum:Spawner
ThreadPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^impl Drop for ThreadPool {$/;"	c
ThreadPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^impl ThreadPool {$/;"	c
ThreadPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^impl fmt::Debug for ThreadPool {$/;"	c
ThreadPool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^pub(crate) struct ThreadPool {$/;"	s
Tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^enum Tick {$/;"	g
Timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^impl<T> Future for Timeout<T>$/;"	c
Timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^impl<T> Timeout<T> {$/;"	c
TimerEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl Drop for TimerEntry {$/;"	c
TimerEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl TimerEntry {$/;"	c
TimerEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^pub(super) struct TimerEntry {$/;"	s
TimerEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^unsafe impl Send for TimerEntry {}$/;"	c
TimerEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^unsafe impl Sync for TimerEntry {}$/;"	c
TimerHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl TimerHandle {$/;"	c
TimerHandle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^pub(crate) struct TimerHandle {$/;"	s
TimerResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^type TimerResult = Result<(), crate::time::error::Error>;$/;"	t
TimerShared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl TimerShared {$/;"	c
TimerShared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^pub(crate) struct TimerShared {$/;"	s
TimerShared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^unsafe impl Send for TimerShared {}$/;"	c
TimerShared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^unsafe impl Sync for TimerShared {}$/;"	c
TimerShared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^unsafe impl linked_list::Link for TimerShared {$/;"	c
TimerSharedPadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl TimerSharedPadded {$/;"	c
TimerSharedPadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^impl std::fmt::Debug for TimerSharedPadded {$/;"	c
TimerSharedPadded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^struct TimerSharedPadded {$/;"	s
TimerUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl<P: Park + 'static> TimerUnpark<P> {$/;"	c
TimerUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^impl<P: Park + 'static> Unpark for TimerUnpark<P> {$/;"	c
TimerUnpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^pub(crate) struct TimerUnpark<P: Park + 'static> {$/;"	s
ToSocketAddrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^pub trait ToSocketAddrs: sealed::ToSocketAddrsPriv {}$/;"	i
ToSocketAddrsPriv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    pub trait ToSocketAddrsPriv {$/;"	i	module:sealed
Track	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^impl<T: Future> Future for Track<T> {$/;"	c
Track	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^impl<T> Track<T> {$/;"	c
Trailer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^impl Trailer {$/;"	c
Trailer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^pub(super) struct Trailer {$/;"	s
TransferState	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^enum TransferState {$/;"	g
TransitionToIdle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) enum TransitionToIdle {$/;"	g
TransitionToNotifiedByRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) enum TransitionToNotifiedByRef {$/;"	g
TransitionToNotifiedByVal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) enum TransitionToNotifiedByVal {$/;"	g
TransitionToRunning	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^pub(super) enum TransitionToRunning {$/;"	g
TryAcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl TryAcquireError {$/;"	c
TryAcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl fmt::Display for TryAcquireError {$/;"	c
TryAcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl std::error::Error for TryAcquireError {}$/;"	c
TryAcquireError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^pub enum TryAcquireError {$/;"	g
TryCurrentError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^impl error::Error for TryCurrentError {}$/;"	c
TryCurrentError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^impl fmt::Debug for TryCurrentError {$/;"	c
TryCurrentError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^impl fmt::Display for TryCurrentError {$/;"	c
TryCurrentError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^pub struct TryCurrentError(());$/;"	s
TryIoError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^pub struct TryIoError(());$/;"	s
TryJoin3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/try_join.rs	/^impl<T1, F1, T2, F2, T3, F3, E> Future for TryJoin3<F1, F2, F3>$/;"	c
TryLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^impl<T> TryLock<T> {$/;"	c
TryLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^pub(crate) struct TryLock<T> {$/;"	s
TryLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^unsafe impl<T: Send> Send for TryLock<T> {}$/;"	c
TryLock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^unsafe impl<T: Send> Sync for TryLock<T> {}$/;"	c
TryLockError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl Error for TryLockError {}$/;"	c
TryLockError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^impl fmt::Display for TryLockError {$/;"	c
TryLockError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^pub struct TryLockError(pub(super) ());$/;"	s
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl fmt::Display for TryRecvError {$/;"	c	module:error
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    impl std::error::Error for TryRecvError {}$/;"	c	module:error
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub enum TryRecvError {$/;"	g	module:error
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    impl fmt::Display for TryRecvError {$/;"	c	module:error
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    impl std::error::Error for TryRecvError {}$/;"	c	module:error
TryRecvError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub enum TryRecvError {$/;"	g	module:error
TrySendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl<T: fmt::Debug> Error for TrySendError<T> {}$/;"	c
TrySendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl<T> From<SendError<T>> for TrySendError<T> {$/;"	c
TrySendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^impl<T> fmt::Display for TrySendError<T> {$/;"	c
TrySendError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^pub enum TrySendError<T> {$/;"	g
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S: Semaphore> Tx<T, S> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S: fmt::Debug> fmt::Debug for Tx<T, S> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> Clone for Tx<T, S> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> Drop for Tx<T, S> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl<T, S> Tx<T, S> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^pub(crate) struct Tx<T, S> {$/;"	s
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^impl<T> Tx<T> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^impl<T> fmt::Debug for Tx<T> {$/;"	c
Tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^pub(crate) struct Tx<T> {$/;"	s
UCred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^impl UCred {$/;"	c
UCred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub struct UCred {$/;"	s
UdpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    impl AsRawFd for UdpSocket {$/;"	c	module:sys
UdpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    impl AsRawSocket for UdpSocket {$/;"	c	module:sys
UdpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^impl TryFrom<std::net::UdpSocket> for UdpSocket {$/;"	c
UdpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^impl UdpSocket {$/;"	c
UdpSocket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^impl fmt::Debug for UdpSocket {$/;"	c
UnboundedReceiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^impl<T> UnboundedReceiver<T> {$/;"	c
UnboundedReceiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^impl<T> fmt::Debug for UnboundedReceiver<T> {$/;"	c
UnboundedReceiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^pub struct UnboundedReceiver<T> {$/;"	s
UnboundedSender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^impl<T> Clone for UnboundedSender<T> {$/;"	c
UnboundedSender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^impl<T> UnboundedSender<T> {$/;"	c
UnboundedSender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^impl<T> fmt::Debug for UnboundedSender<T> {$/;"	c
UnboundedSender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^pub struct UnboundedSender<T> {$/;"	s
Unconstrained	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/unconstrained.rs	/^impl<F> Future for Unconstrained<F>$/;"	c
UnixDatagram	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^impl AsRawFd for UnixDatagram {$/;"	c
UnixDatagram	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^impl TryFrom<std::os::unix::net::UnixDatagram> for UnixDatagram {$/;"	c
UnixDatagram	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^impl UnixDatagram {$/;"	c
UnixDatagram	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^impl fmt::Debug for UnixDatagram {$/;"	c
UnixListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^impl AsRawFd for UnixListener {$/;"	c
UnixListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^impl TryFrom<std::os::unix::net::UnixListener> for UnixListener {$/;"	c
UnixListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^impl UnixListener {$/;"	c
UnixListener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^impl fmt::Debug for UnixListener {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl AsRawFd for UnixStream {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl AsyncRead for UnixStream {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl AsyncWrite for UnixStream {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl TryFrom<net::UnixStream> for UnixStream {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl UnixStream {$/;"	c
UnixStream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^impl fmt::Debug for UnixStream {$/;"	c
UnownedTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: 'static> Drop for UnownedTask<S> {$/;"	c
UnownedTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^impl<S: Schedule> UnownedTask<S> {$/;"	c
UnownedTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^pub(crate) struct UnownedTask<S: 'static> {$/;"	s
UnownedTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S> Send for UnownedTask<S> {}$/;"	c
UnownedTask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^unsafe impl<S> Sync for UnownedTask<S> {}$/;"	c
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    type Unpark = Handle;$/;"	t	implementation:Driver
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    type Unpark = Either<A::Unpark, B::Unpark>;$/;"	t
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    type Unpark: Unpark;$/;"	t	interface:Park
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^pub(crate) trait Unpark: Sync + Send + 'static {$/;"	i
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    type Unpark = UnparkThread;$/;"	t	implementation:CachedParkThread
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    type Unpark = UnparkThread;$/;"	t	implementation:ParkThread
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    type Unpark = <SignalDriver as Park>::Unpark;$/;"	t	implementation:Driver
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    type Unpark = <TimeDriver as Park>::Unpark;$/;"	t	implementation:Driver
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    type Unpark = Unparker;$/;"	t	implementation:Parker
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    type Unpark = <IoDriver as Park>::Unpark;$/;"	t	implementation:Driver
Unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    type Unpark = TimerUnpark<P>;$/;"	t
UnparkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl Unpark for UnparkThread {$/;"	c
UnparkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^impl UnparkThread {$/;"	c
UnparkThread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^pub(crate) struct UnparkThread {$/;"	s
Unparker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^impl Unpark for Unparker {$/;"	c
Unparker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^pub(crate) struct Unparker {$/;"	s
UnsafeCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/unsafe_cell.rs	/^impl<T> UnsafeCell<T> {$/;"	c
UnsafeCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/unsafe_cell.rs	/^pub(crate) struct UnsafeCell<T>(std::cell::UnsafeCell<T>);$/;"	s
UpdateResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^type UpdateResult = Result<Snapshot, Snapshot>;$/;"	t
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    Value(T),$/;"	e	enum:Read
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^impl<T> Value<T> {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^struct Value<T> {$/;"	s
Values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^impl<T> Values<T> {$/;"	c
Values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^impl<T> ops::Index<usize> for Values<T> {$/;"	c
Values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^struct Values<T>([UnsafeCell<MaybeUninit<T>>; BLOCK_CAP]);$/;"	s
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^impl AsyncWrite for Vec<u8> {$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    impl Sealed for &mut Vec<u8> {}$/;"	c	module:private
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    impl Sealed for Vec<u8> {}$/;"	c	module:private
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^impl VecU8 for &mut Vec<u8> {}$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^impl VecU8 for Vec<u8> {}$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^impl Storage for Vec<EventInfo> {$/;"	c
VecDequeCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^impl<T> VecDequeCell<T> {$/;"	c
VecDequeCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^pub(crate) struct VecDequeCell<T> {$/;"	s
VecDequeCell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^unsafe impl<T: Send> Send for VecDequeCell<T> {}$/;"	c
VecU8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^pub(crate) trait VecU8: AsMut<Vec<u8>> + private::Sealed {}$/;"	i
VecWithInitialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^impl VecWithInitialized<Vec<u8>> {$/;"	c
VecWithInitialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^impl<V> VecWithInitialized<V>$/;"	c
VecWithInitialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^pub(crate) struct VecWithInitialized<V> {$/;"	s
Version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    impl Version {$/;"	c	module:state
Version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub(super) struct Version(usize);$/;"	s	module:state
Vtable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^pub(super) struct Vtable {$/;"	s
W	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/async_write_ext.rs	/^impl<W: AsyncWrite + ?Sized> AsyncWriteExt for W {}$/;"	c
Wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^pub(crate) trait Wait {$/;"	i
WaitList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^type WaitList = LinkedList<Waiter, <Waiter as linked_list::Link>::Target>;$/;"	t
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^impl Waiter {$/;"	c
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^struct Waiter {$/;"	s
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^unsafe impl linked_list::Link for Waiter {$/;"	c
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^struct Waiter {$/;"	s
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^unsafe impl linked_list::Link for Waiter {$/;"	c
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^struct Waiter {$/;"	s
Waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^unsafe impl linked_list::Link for Waiter {$/;"	c
Waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^struct Waiters {$/;"	s
Waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^impl Drop for Waiting {$/;"	c
Waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^struct Waiting {$/;"	s
Waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^unsafe impl Send for Waiting {}$/;"	c
Waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^unsafe impl Sync for Waiting {}$/;"	c
Waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    Waiting,$/;"	e	enum:State
Waitlist	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^struct Waitlist {$/;"	s
Wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^pub(crate) trait Wake: Send + Sync {$/;"	i
WakeList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^impl Drop for WakeList {$/;"	c
WakeList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^impl WakeList {$/;"	c
WakeList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^pub(crate) struct WakeList {$/;"	s
Waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^impl WakerRef for &Waker {$/;"	c
Waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^impl WakerRef for Waker {$/;"	c
Waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^impl AssertSend for Waker {}$/;"	c
Waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^impl AssertSync for Waker {}$/;"	c
WakerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^impl<S> ops::Deref for WakerRef<'_, S> {$/;"	c
WakerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^pub(super) struct WakerRef<'a, S: 'static> {$/;"	s
WakerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^trait WakerRef {$/;"	i
WakerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^impl Deref for WakerRef<'_> {$/;"	c
WakerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^pub(crate) struct WakerRef<'a> {$/;"	s
Wheel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^impl Wheel {$/;"	c
Wheel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^pub(crate) struct Wheel {$/;"	s
Worker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^impl Worker {$/;"	c
Worker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^pub(super) struct Worker {$/;"	s
WorkerStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^impl WorkerStats {$/;"	c
WorkerStats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^pub struct WorkerStats {$/;"	s
WorkerStatsBatcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^impl WorkerStatsBatcher {$/;"	c
WorkerStatsBatcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^pub(crate) struct WorkerStatsBatcher {}$/;"	s
WorkerStatsBatcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^impl WorkerStatsBatcher {$/;"	c
WorkerStatsBatcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^pub(crate) struct WorkerStatsBatcher {$/;"	s
Write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    Write(io::Result<()>),$/;"	e	enum:Operation
Write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    Write,$/;"	e	enum:Direction
Write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write.rs	/^impl<W> Future for Write<'_, W>$/;"	c
WriteAll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all.rs	/^impl<W> Future for WriteAll<'_, W>$/;"	c
WriteAllBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all_buf.rs	/^impl<W, B> Future for WriteAllBuf<'_, W, B>$/;"	c
WriteBuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_buf.rs	/^impl<W, B> Future for WriteBuf<'_, W, B>$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T: AsyncWrite> AsyncWrite for WriteHalf<T> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T: fmt::Debug> fmt::Debug for WriteHalf<T> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^impl<T> WriteHalf<T> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^unsafe impl<T: Send> Send for WriteHalf<T> {}$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^unsafe impl<T: Sync> Sync for WriteHalf<T> {}$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^impl AsRef<TcpStream> for WriteHalf<'_> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^impl AsyncWrite for WriteHalf<'_> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^pub struct WriteHalf<'a>(&'a TcpStream);$/;"	s
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^impl AsRef<UnixStream> for WriteHalf<'_> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^impl AsyncWrite for WriteHalf<'_> {$/;"	c
WriteHalf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^pub struct WriteHalf<'a>(&'a UnixStream);$/;"	s
WriteVectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_vectored.rs	/^impl<W> Future for WriteVectored<'_, '_, W>$/;"	c
Yes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    Yes,$/;"	e	enum:CombiLocalSet
ZeroSizedFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    impl Future for ZeroSizedFuture {$/;"	c	module:test
ZeroSizedFuture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    struct ZeroSizedFuture {}$/;"	s	module:test
__task_local_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^macro_rules! __task_local_inner {$/;"	M
_anchor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    _anchor: PhantomData<Rc<()>>,$/;"	m	struct:CachedParkThread
_assert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn _assert<T: Send + Sync>() {}$/;"	f	function:_assert_kinds
_assert_kinds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^fn _assert_kinds() {$/;"	f
_m	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    _m: std::marker::PhantomPinned,$/;"	m	struct:TimerEntry
_marker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    _marker: PhantomData<*const L>,$/;"	m	struct:LinkedList
_not_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    _not_send: PhantomData<*const ()>,$/;"	m	struct:LocalNotified
_not_send_or_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    _not_send_or_sync: PhantomData<*const ()>,$/;"	m	struct:LocalOwnedTasks
_not_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    _not_sync: PhantomData<*const ()>,$/;"	m	struct:VecDequeCell
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    _p: PhantomData<RefCell<()>>,$/;"	m	struct:Enter
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    _p: PhantomData<T>,$/;"	m	struct:Inject
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    _p: PhantomData<S>,$/;"	m	struct:Task
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    _p: PhantomData<S>,$/;"	m	struct:UnownedTask
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^    _p: PhantomData<(&'a Header, S)>,$/;"	m	struct:WakerRef
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    _p: PhantomPinned,$/;"	m	struct:Waiter
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    _p: PhantomPinned,$/;"	m	struct:Waiter
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    _p: PhantomPinned,$/;"	m	struct:Waiter
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    _p: PhantomPinned,$/;"	m	struct:TimerShared
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    _p: PhantomData<std::rc::Rc<()>>,$/;"	m	struct:LockGuard
_p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    _p: PhantomData<&'a ()>,$/;"	m	struct:WakerRef
_pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    _pin: PhantomPinned,$/;"	m	struct:PointersInner
_private	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    _private: (),$/;"	m	struct:AccessError
a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    a: &'a mut A,$/;"	m	struct:CopyBidirectional
a_to_b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    a_to_b: TransferState,$/;"	m	struct:CopyBidirectional
abort	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    pub fn abort(&self) {$/;"	P	implementation:JoinHandle
about_to_park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn about_to_park(&mut self) {}$/;"	P	implementation:WorkerStatsBatcher
about_to_park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn about_to_park(&mut self) {$/;"	P	implementation:WorkerStatsBatcher
accept	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub async fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener
accept	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub async fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {$/;"	P	implementation:UnixListener
access_inbound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn access_inbound(&mut self, allowed: bool) -> &mut Self {$/;"	P	implementation:ServerOptions
access_outbound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn access_outbound(&mut self, allowed: bool) -> &mut Self {$/;"	P	implementation:ServerOptions
acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn acquire(&self, num_permits: u32) -> Acquire<'_> {$/;"	P	implementation:Semaphore
acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    async fn acquire(&self) {$/;"	P	implementation:Mutex
acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub async fn acquire(&self) -> Result<SemaphorePermit<'_>, AcquireError> {$/;"	P	implementation:Semaphore
acquire_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub async fn acquire_many(&self, n: u32) -> Result<SemaphorePermit<'_>, AcquireError> {$/;"	P	implementation:Semaphore
acquire_many_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub async fn acquire_many_owned($/;"	P	implementation:Semaphore
acquire_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub async fn acquire_owned(self: Arc<Self>) -> Result<OwnedSemaphorePermit, AcquireError> {$/;"	P	implementation:Semaphore
action	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^fn action(globals: Pin<&'static Globals>, signal: libc::c_int) {$/;"	f
active	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^        active: AtomicUsize,$/;"	m	struct:basic_usage::Shared
actor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^    async fn actor(shared: Arc<Shared>) {$/;"	f	function:basic_usage
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    pub const fn add(self, other: Interest) -> Interest {$/;"	P	implementation:Interest
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn add(self, other: Duration) -> Instant {$/;"	P	implementation:Instant
add_assign	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn add_assign(&mut self, rhs: Duration) {$/;"	P	implementation:Instant
add_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    pub(crate) unsafe fn add_entry(&mut self, item: TimerHandle) {$/;"	P	implementation:Level
add_permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn add_permit(&self) {$/;"	P	implementation:AtomicUsize
add_permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn add_permit(&self) {$/;"	P	implementation:usize
add_permit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn add_permit(&self);$/;"	P	interface:Semaphore
add_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn add_permits(&self, n: usize) {$/;"	P	implementation:Semaphore
add_permits_locked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn add_permits_locked(&self, mut rem: usize, waiters: MutexGuard<'_, Waitlist>) {$/;"	P	implementation:Semaphore
add_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(super) fn add_source($/;"	P	implementation:Inner
addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/mod.rs	/^mod addr;$/;"	n
addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn addr(&self, slot: usize) -> Address {$/;"	P	implementation:Page
advance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:ReadBuf
after_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    after_start: Option<Callback>,$/;"	m	struct:Inner
alarm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn alarm() -> Self {$/;"	P	implementation:SignalKind
allocate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn allocate(me: &Arc<Page<T>>) -> Option<(Address, Ref<T>)> {$/;"	P	implementation:Page
allocate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn allocate(&self) -> Option<(Address, Ref<T>)> {$/;"	P	implementation:Allocator
allocated	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    allocated: AtomicBool,$/;"	m	struct:Page
allocator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn allocator(&self) -> Allocator<T> {$/;"	P	implementation:Slab
amt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    amt: u64,$/;"	m	struct:CopyBuffer
append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn append(&mut self, append: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
apply_read_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn apply_read_buf(&mut self, parts: ReadBufParts) {$/;"	f
arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {$/;"	P	implementation:Command
arg0	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn arg0<S>(&mut self, arg: S) -> &mut Command$/;"	P	implementation:Command
args	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn args<I, S>(&mut self, args: I) -> &mut Command$/;"	P	implementation:Command
arrived	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    arrived: usize,$/;"	m	struct:BarrierState
as_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub(super) fn as_inner(&self) -> &std::fs::DirEntry {$/;"	P	implementation:DirEntry
as_inner_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub(super) fn as_inner_mut(&mut self) -> &mut StdOpenOptions {$/;"	P	implementation:OpenOptions
as_pathname	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^    pub fn as_pathname(&self) -> Option<&Path> {$/;"	P	implementation:SocketAddr
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn as_raw(handle: &Task<S>) -> NonNull<Header> {$/;"	P	implementation:Task
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn as_raw(handle: &Self::Handle) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn as_raw(handle: &NonNull<Waiter>) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    fn as_raw(handle: &NonNull<Waiter>) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn as_raw(handle: &Self::Handle) -> NonNull<Self::Target> {$/;"	P	implementation:TimerShared
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        fn as_raw(handle: &Pin<&'_ Entry>) -> NonNull<Entry> {$/;"	P	implementation:tests::Entry
as_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn as_raw(handle: &Self::Handle) -> NonNull<Self::Target>;$/;"	P	interface:Link
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn as_raw_fd(&self) -> std::os::unix::io::RawFd {$/;"	P	implementation:File
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:AsyncFd
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^    fn as_raw_fd(&self) -> std::os::unix::io::RawFd {$/;"	P	implementation:Stderr
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^    fn as_raw_fd(&self) -> std::os::unix::io::RawFd {$/;"	P	implementation:Stdin
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^    fn as_raw_fd(&self) -> std::os::unix::io::RawFd {$/;"	P	implementation:Stdout
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::TcpListener
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:TcpSocket
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::TcpStream
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::UdpSocket
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixDatagram
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixListener
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixStream
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::ChildStderr
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::ChildStdin
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:sys::ChildStdout
as_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:Pipe
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^            fn as_raw_handle(&self) -> RawHandle;$/;"	P	interface:windows::io::AsRawHandle
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn as_raw_handle(&self) -> std::os::windows::io::RawHandle {$/;"	P	implementation:File
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^    fn as_raw_handle(&self) -> std::os::windows::io::RawHandle {$/;"	P	implementation:Stderr
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^    fn as_raw_handle(&self) -> std::os::windows::io::RawHandle {$/;"	P	implementation:Stdin
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^    fn as_raw_handle(&self) -> std::os::windows::io::RawHandle {$/;"	P	implementation:Stdout
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:NamedPipeClient
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:NamedPipeServer
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:sys::ChildStderr
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:sys::ChildStdin
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:sys::ChildStdout
as_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:Child
as_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^        fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:sys::TcpListener
as_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:TcpSocket
as_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^        fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:sys::TcpStream
as_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^        fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:sys::UdpSocket
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn as_ref(&self) -> &TcpStream {$/;"	P	implementation:ReadHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn as_ref(&self) -> &TcpStream {$/;"	P	implementation:WriteHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn as_ref(&self) -> &TcpStream {$/;"	P	implementation:OwnedReadHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn as_ref(&self) -> &TcpStream {$/;"	P	implementation:OwnedWriteHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn as_ref(&self) -> &UnixStream {$/;"	P	implementation:ReadHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn as_ref(&self) -> &UnixStream {$/;"	P	implementation:WriteHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn as_ref(&self) -> &UnixStream {$/;"	P	implementation:OwnedReadHalf
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn as_ref(&self) -> &UnixStream {$/;"	P	implementation:OwnedWriteHalf
as_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub(crate) fn as_usize(self) -> usize {$/;"	P	implementation:Ready
as_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn as_usize(self) -> usize {$/;"	P	implementation:State
as_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) const fn as_usize(self) -> usize {$/;"	P	implementation:Address
ascii_to_char	/home/cht/Rust/listen/src/main.rs	/^fn ascii_to_char(code: u8) -> char {$/;"	f
ascii_to_string	/home/cht/Rust/listen/src/main.rs	/^fn ascii_to_string(code: Vec<u8>) -> String {$/;"	f
assert_at_most_num_polls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^fn assert_at_most_num_polls(rt: Arc<Runtime>, at_most_polls: usize) {$/;"	f
assert_clean	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    macro_rules! assert_clean {$/;"	M	module:tests
assert_dropped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn assert_dropped(&self) {$/;"	P	implementation:AssertDropHandle
assert_not_dropped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn assert_not_dropped(&self) {$/;"	P	implementation:AssertDropHandle
assert_owner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn assert_owner(&self, task: Notified<S>) -> LocalNotified<S> {$/;"	P	implementation:LocalOwnedTasks
assert_owner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn assert_owner(&self, task: Notified<S>) -> LocalNotified<S> {$/;"	P	implementation:OwnedTasks
assert_ptr_eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    macro_rules! assert_ptr_eq {$/;"	M	module:tests
assert_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn assert_send(&self, value: T) {$/;"	P	implementation:AtomicOneshot
assert_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/tests/mod.rs	/^fn assert_send<T: Send>() {}$/;"	f
assert_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/tests/mod.rs	/^fn assert_sync<T: Sync>() {}$/;"	f
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_buf.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/repeat.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assert_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    fn assert_unpin() {$/;"	f	module:tests
assign_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn assign_permits(&self, n: &mut usize) -> bool {$/;"	P	implementation:Waiter
assume_init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub unsafe fn assume_init(&mut self, n: usize) {$/;"	P	implementation:ReadBuf
async_buf_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/mod.rs	/^mod async_buf_read;$/;"	n
async_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    async_fd: &'a AsyncFd<T>,$/;"	m	struct:AsyncFdReadyGuard
async_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    async_fd: &'a mut AsyncFd<T>,$/;"	m	struct:AsyncFdReadyMutGuard
async_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/mod.rs	/^mod async_read;$/;"	n
async_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/mod.rs	/^mod async_seek;$/;"	n
async_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/mod.rs	/^mod async_write;$/;"	n
asyncify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^pub(crate) async fn asyncify<F, T>(f: F) -> io::Result<T>$/;"	f
at_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn at_capacity() -> Error {$/;"	P	implementation:Error
atomic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^    pub(crate) mod atomic {$/;"	n	module:sync
atomic_cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^mod atomic_cell;$/;"	n
atomic_inc_num_notify_waiters_calls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn atomic_inc_num_notify_waiters_calls(data: &AtomicUsize) {$/;"	f
atomic_ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_ptr;$/;"	n
atomic_take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^mod atomic_take {$/;"	n
atomic_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_u16;$/;"	n
atomic_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_u32;$/;"	n
atomic_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_u64;$/;"	n
atomic_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_u8;$/;"	n
atomic_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod atomic_usize;$/;"	n
atomic_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/mod.rs	/^mod atomic_waker;$/;"	n
available_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn available_permits(&self) -> usize {$/;"	P	implementation:Semaphore
available_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn available_permits(&self) -> usize {$/;"	P	implementation:Semaphore
b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    b: &'a mut B,$/;"	m	struct:CopyBidirectional
b_to_a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    b_to_a: TransferState,$/;"	m	struct:CopyBidirectional
basic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_queue.rs	/^fn basic() {$/;"	f
basic_closing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn basic_closing() {$/;"	f
basic_notification	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_atomic_waker.rs	/^fn basic_notification() {$/;"	f
basic_scheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    basic_scheduler: &'a BasicScheduler<P>,$/;"	m	struct:InnerGuard
basic_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^fn basic_usage() {$/;"	f
basic_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn basic_usage() {$/;"	f
batch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn batch() {$/;"	f
before_stop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    before_stop: Option<Callback>,$/;"	m	struct:Inner
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn bind(&self, addr: SocketAddr) -> io::Result<()> {$/;"	P	implementation:TcpSocket
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn bind<P>(path: P) -> io::Result<UnixDatagram>$/;"	P	implementation:UnixDatagram
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn bind<P>(path: P) -> io::Result<UnixListener>$/;"	P	implementation:UnixListener
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn bind<T>($/;"	P	implementation:LocalOwnedTasks
bind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn bind<T>($/;"	P	implementation:OwnedTasks
bind_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    fn bind_addr(addr: SocketAddr) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener
bind_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    fn bind_addr(addr: SocketAddr) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket
bind_new_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    pub(super) fn bind_new_task<T>(me: &Arc<Self>, future: T) -> JoinHandle<T::Output>$/;"	P	implementation:Shared
bitand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    fn bitand(self, other: Ready) -> Ready {$/;"	P	implementation:Ready
bitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    fn bitor(self, other: Self) -> Self {$/;"	P	implementation:Interest
bitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    fn bitor(self, other: Ready) -> Ready {$/;"	P	implementation:Ready
bitor_assign	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    fn bitor_assign(&mut self, other: Self) {$/;"	P	implementation:Interest
bitor_assign	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    fn bitor_assign(&mut self, other: Ready) {$/;"	P	implementation:Ready
block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^pub(super) mod block;$/;"	n
block_in_place	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^pub(crate) fn block_in_place<F, R>(f: F) -> R$/;"	f
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    pub(crate) fn block_on<F: Future>(&mut self, f: F) -> Result<F::Output, ParkError> {$/;"	P	implementation:CachedParkThread
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn block_on<F: Future>(&mut self, future: F) -> F::Output {$/;"	P	implementation:Inner
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn block_on<F: Future>(&mut self, future: F) -> F::Output {$/;"	P	implementation:InnerGuard
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    pub(crate) fn block_on<F: Future>(&self, future: F) -> F::Output {$/;"	P	implementation:BasicScheduler
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn block_on<F: Future>(&self, future: F) -> F::Output {$/;"	P	implementation:Handle
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn block_on<T>(&self, task: T) -> T::Output$/;"	P	implementation:test_combination::Rt
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn block_on<F>(&self, future: F) -> F::Output$/;"	P	implementation:ThreadPool
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    pub fn block_on<F>(&self, rt: &crate::runtime::Runtime, future: F) -> F::Output$/;"	P	implementation:LocalSet
block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn block_on<T>(f: impl std::future::Future<Output = T>) -> T {$/;"	f
block_on_num_polls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^fn block_on_num_polls() {$/;"	f
block_tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    block_tail: AtomicPtr<Block<T>>,$/;"	m	struct:Tx
blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^mod blocking;$/;"	n
blocking_and_regular	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn blocking_and_regular() {$/;"	f	module:group_b
blocking_and_regular_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn blocking_and_regular_inner(first_pending: bool) {$/;"	f	module:group_b
blocking_and_regular_with_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn blocking_and_regular_with_pending() {$/;"	f	module:group_b
blocking_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn blocking_recv(&mut self) -> Option<T> {$/;"	P	implementation:Receiver
blocking_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn blocking_recv(&mut self) -> Option<T> {$/;"	P	implementation:UnboundedReceiver
blocking_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn blocking_send(&self, value: T) -> Result<(), SendError<T>> {$/;"	P	implementation:Sender
blocking_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_blocking.rs	/^fn blocking_shutdown() {$/;"	f
bool_flag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^macro_rules! bool_flag {$/;"	M
borrow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn borrow(&self) -> Ref<'_, T> {$/;"	P	implementation:Receiver
borrow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn borrow(&self) -> Ref<'_, T> {$/;"	P	implementation:Sender
borrow_and_update	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn borrow_and_update(&mut self) -> Ref<'_, T> {$/;"	P	implementation:Receiver
bounded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^mod bounded;$/;"	n
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^fn bounds() {$/;"	f
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^fn bounds() {$/;"	f
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^fn bounds() {$/;"	f
boxed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    boxed: NonNull<dyn Future<Output = T> + Send>,$/;"	m	struct:ReusableBoxFuture
broadcast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket
broadcast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn broadcast(&self) -> bool {$/;"	P	implementation:Registry
broadcast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    pub(crate) fn broadcast(&self) -> bool {$/;"	P	implementation:Globals
broadcast_returns_if_at_least_one_event_fired	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn broadcast_returns_if_at_least_one_event_fired() {$/;"	f	module:tests
broadcast_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^fn broadcast_send() {$/;"	f
broadcast_two	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^fn broadcast_two() {$/;"	f
broadcast_wrap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^fn broadcast_wrap() {$/;"	f
budget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^pub(crate) fn budget<R>(f: impl FnOnce() -> R) -> R {$/;"	f
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    buf: Vec<u8>,$/;"	m	struct:Buf
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    buf: &'a mut [MaybeUninit<u8>],$/;"	m	struct:ReadBuf
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    buf: Box<[u8]>,$/;"	m	struct:CopyBuffer
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    buf: CopyBuffer,$/;"	m	struct:Copy
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn buffer(&self) -> &[u8] {$/;"	P	implementation:BufReader
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn buffer(&self) -> &[u8] {$/;"	P	implementation:BufWriter
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    buffer: BytesMut,$/;"	m	struct:Pipe
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^            buffer: &'a [UnsafeCell<MaybeUninit<task::Notified<T>>>; LOCAL_QUEUE_CAPACITY],$/;"	m	struct:Local::push_overflow::BatchTaskIter
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    buffer: Box<[UnsafeCell<MaybeUninit<task::Notified<T>>>; LOCAL_QUEUE_CAPACITY]>,$/;"	m	struct:Inner
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    buffer: Box<[RwLock<Slot<T>>]>,$/;"	m	struct:Shared
bugeting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    fn bugeting() {$/;"	f	module:test
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn build(&mut self) -> io::Result<Runtime> {$/;"	P	implementation:Builder
build_basic_runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    fn build_basic_runtime(&mut self) -> io::Result<Runtime> {$/;"	P	implementation:Builder
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn bytes(&self) -> &[u8] {$/;"	P	implementation:Buf
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    c: UnsafeCell<T>,$/;"	m	struct:Mutex
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    c: UnsafeCell<T>,$/;"	m	struct:RwLock
cached	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    cached: [CachedPage<T>; NUM_PAGES],$/;"	m	struct:Slab
cached_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    cached_when: AtomicU64,$/;"	m	struct:TimerSharedPadded
cached_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn cached_when(&self) -> u64 {$/;"	P	implementation:TimerShared
cached_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn cached_when(&self) -> u64 {$/;"	P	implementation:TimerHandle
callback	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^unsafe extern "system" fn callback(ptr: PVOID, _timer_fired: BOOLEAN) {$/;"	f
can_push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    pub(crate) fn can_push(&self) -> bool {$/;"	P	implementation:WakeList
can_read_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^fn can_read_output(header: &Header, trailer: &Trailer, waker: &Waker) -> bool {$/;"	f
cancel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(crate) fn cancel(self: Pin<&mut Self>) {$/;"	P	implementation:TimerEntry
cancel_acquire_releases_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn cancel_acquire_releases_permits() {$/;"	f
cancel_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^fn cancel_task<T: Future>(stage: &CoreStage<T>) {$/;"	f
cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub(crate) fn cancelled() -> JoinError {$/;"	P	implementation:JoinError
canonicalize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/canonicalize.rs	/^pub async fn canonicalize(path: impl AsRef<Path>) -> io::Result<PathBuf> {$/;"	f
canonicalize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod canonicalize;$/;"	n
cap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    cap: usize,$/;"	m	struct:CopyBuffer
capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:ReadBuf
capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:Sender
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^        cell: &'a Cell<Budget>,$/;"	m	struct:with_budget::ResetGuard
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^pub(crate) mod cell {$/;"	n
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    cell: NonNull<Cell<T, S>>,$/;"	m	struct:Harness
cfg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^mod cfg;$/;"	n
cfg_atomic_waker_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_atomic_waker_impl {$/;"	M
cfg_block_on	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_block_on {$/;"	M
cfg_coop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_coop {$/;"	M
cfg_fs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_fs {$/;"	M
cfg_has_atomic_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_has_atomic_u64 {$/;"	M
cfg_io_blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_blocking {$/;"	M
cfg_io_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_driver {$/;"	M
cfg_io_driver_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_driver_impl {$/;"	M
cfg_io_readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_readiness {$/;"	M
cfg_io_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_std {$/;"	M
cfg_io_util	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_io_util {$/;"	M
cfg_loom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_loom {$/;"	M
cfg_macros	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_macros {$/;"	M
cfg_net	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_net {$/;"	M
cfg_net_unix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_net_unix {$/;"	M
cfg_net_windows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_net_windows {$/;"	M
cfg_not_coop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_coop {$/;"	M
cfg_not_has_atomic_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_has_atomic_u64 {$/;"	M
cfg_not_io_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_io_driver {$/;"	M
cfg_not_io_util	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_io_util {$/;"	M
cfg_not_loom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_loom {$/;"	M
cfg_not_process_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_process_driver {$/;"	M
cfg_not_rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_rt {$/;"	M
cfg_not_rt_multi_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_rt_multi_thread {$/;"	M
cfg_not_signal_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_signal_internal {$/;"	M
cfg_not_stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_stats {$/;"	M
cfg_not_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_sync {$/;"	M
cfg_not_test_util	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_test_util {$/;"	M
cfg_not_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_time {$/;"	M
cfg_not_trace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_not_trace {$/;"	M
cfg_process	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_process {$/;"	M
cfg_process_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_process_driver {$/;"	M
cfg_rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_rt {$/;"	M
cfg_rt_multi_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_rt_multi_thread {$/;"	M
cfg_signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_signal {$/;"	M
cfg_signal_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_signal_internal {$/;"	M
cfg_signal_internal_and_unix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^macro_rules! cfg_signal_internal_and_unix {$/;"	M
cfg_stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_stats {$/;"	M
cfg_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_sync {$/;"	M
cfg_test_util	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_test_util {$/;"	M
cfg_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_time {$/;"	M
cfg_trace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! cfg_trace {$/;"	M
chain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^pub(super) fn chain<T, U>(first: T, second: U) -> Chain<T, U>$/;"	f
chained_steal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_queue.rs	/^fn chained_steal() {$/;"	f
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    chan: &'a chan::Tx<T, Semaphore>,$/;"	m	struct:Permit
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    chan: Option<chan::Tx<T, Semaphore>>,$/;"	m	struct:OwnedPermit
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    chan: chan::Rx<T, Semaphore>,$/;"	m	struct:Receiver
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    chan: chan::Tx<T, Semaphore>,$/;"	m	struct:Sender
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^mod chan;$/;"	n
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    chan: chan::Rx<T, Semaphore>,$/;"	m	struct:UnboundedReceiver
chan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    chan: chan::Tx<T, Semaphore>,$/;"	m	struct:UnboundedSender
change_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn change_waker() {$/;"	f
changed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub async fn changed(&mut self) -> Result<(), error::RecvError> {$/;"	P	implementation:Receiver
changing_rx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^fn changing_rx_task() {$/;"	f
changing_tx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^fn changing_tx_task() {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^pub(super) fn channel() -> (Sender, Receiver) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^pub(crate) fn channel<T>() -> (Sender<T>, Receiver<T>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^pub fn channel<T: Clone>(mut capacity: usize) -> (Sender<T>, Receiver<T>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^pub fn channel<T>(buffer: usize) -> (Sender<T>, Receiver<T>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^pub(crate) fn channel<T, S: Semaphore>(semaphore: S) -> (Tx<T, S>, Rx<T, S>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^pub(crate) fn channel<T>() -> (Tx<T>, Rx<T>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^pub fn channel<T>() -> (Sender<T>, Receiver<T>) {$/;"	f
channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^pub fn channel<T>(init: T) -> (Sender<T>, Receiver<T>) {$/;"	f
check_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    pub(super) fn check_inner(&self) -> io::Result<()> {$/;"	P	implementation:Handle
check_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_send<T: Send>() {}$/;"	f	function:bounds
check_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn check_send<T: Send>() {}$/;"	f	function:bounds
check_send_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_send_sync<T: Send + Sync>() {}$/;"	f	function:bounds
check_send_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    fn check_send_sync<T: Send + Sync>() {}$/;"	f	function:bounds
check_send_sync_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_send_sync_val<T: Send + Sync>(_t: T) {}$/;"	f	function:bounds
check_send_sync_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn check_send_sync_val<T: Send + Sync>(_t: T) {}$/;"	f	function:bounds
check_send_sync_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    fn check_send_sync_val<T: Send + Sync>(_t: T) {}$/;"	f	function:bounds
check_static	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_static<T: 'static>() {}$/;"	f	function:bounds
check_static_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_static_val<T: 'static>(_t: T) {}$/;"	f	function:bounds
check_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn check_sync<T: Sync>() {}$/;"	f	function:bounds
check_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn check_unpin<T: Unpin>() {}$/;"	f	function:bounds
check_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn check_unpin<T: Unpin>() {}$/;"	f	function:bounds
check_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    fn check_unpin<T: Unpin>() {}$/;"	f	function:bounds
checked_add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn checked_add(&self, duration: Duration) -> Option<Instant> {$/;"	P	implementation:Instant
checked_duration_since	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {$/;"	P	implementation:Instant
checked_sub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn checked_sub(&self, duration: Duration) -> Option<Instant> {$/;"	P	implementation:Instant
child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    child: FusedChild,$/;"	m	struct:Child
child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    child: imp::Child,$/;"	m	struct:SpawnedChild
child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    child: StdChild,$/;"	m	struct:Child
child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn child() -> Self {$/;"	P	implementation:SignalKind
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:ReadBuf
clear_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) unsafe fn clear_entry(&self, entry: NonNull<TimerShared>) {$/;"	P	implementation:Handle
clear_readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn clear_readiness(&self, event: ReadyEvent) {$/;"	P	implementation:Registration
clear_readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(crate) fn clear_readiness(&self, event: ReadyEvent) {$/;"	P	implementation:ScheduledIo
clear_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn clear_ready(&mut self) {$/;"	P	implementation:AsyncFdReadyGuard
clear_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn clear_ready(&mut self) {$/;"	P	implementation:AsyncFdReadyMutGuard
clear_wakers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(crate) fn clear_wakers(&self) {$/;"	P	implementation:ScheduledIo
clock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    clock: super::clock::Clock,$/;"	m	struct:ClockTime
clock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^mod clock;$/;"	n
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^unsafe fn clone(raw: *const ()) -> RawWaker {$/;"	f
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn clone(&self) -> Parker {$/;"	P	implementation:Parker
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    fn clone(&self) -> Steal<T> {$/;"	P	implementation:Steal
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:RawTask
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn clone(&self) -> Sender<T> {$/;"	P	implementation:Sender
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Sender
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn clone(&self) -> Tx<T, S> {$/;"	P	implementation:Tx
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:UnboundedSender
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn clone(&self) -> OnceCell<T> {$/;"	P	implementation:OnceCell
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Receiver
clone_arc_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^unsafe fn clone_arc_raw<T: Wake>(data: *const ()) -> RawWaker {$/;"	f
clone_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn clone_value(&self) -> Option<T>$/;"	P	implementation:RecvGuard
clone_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^unsafe fn clone_waker<T, S>(ptr: *const ()) -> RawWaker$/;"	f
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn close(&self) -> bool {$/;"	P	implementation:Inject
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    pub(super) fn close(&self) {$/;"	P	implementation:Shared
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn close(&self) {$/;"	P	implementation:Semaphore
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn close(&mut self) {$/;"	P	implementation:Receiver
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn close(&self) {$/;"	P	implementation:AtomicUsize
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn close(&self) {$/;"	P	implementation:usize
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn close(&self);$/;"	P	interface:Semaphore
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn close(&mut self) {$/;"	P	implementation:Rx
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    pub(crate) fn close(&self) {$/;"	P	implementation:Tx
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn close(&mut self) {$/;"	P	implementation:UnboundedReceiver
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn close(&self) {$/;"	P	implementation:Inner
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub fn close(&mut self) {$/;"	P	implementation:Receiver
close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn close(&self) {$/;"	P	implementation:Semaphore
close_and_shutdown_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn close_and_shutdown_all(&self)$/;"	P	implementation:LocalOwnedTasks
close_and_shutdown_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn close_and_shutdown_all(&self)$/;"	P	implementation:OwnedTasks
close_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn close_read(&mut self) {$/;"	P	implementation:Pipe
close_semaphore_notifies_permit1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn close_semaphore_notifies_permit1() {$/;"	f
close_semaphore_notifies_permit2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn close_semaphore_notifies_permit2() {$/;"	f
close_semaphore_prevents_acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn close_semaphore_prevents_acquire() {$/;"	f
close_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn close_write(&mut self) {$/;"	P	implementation:Pipe
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    closed: bool,$/;"	m	struct:OwnedTasksInner
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    closed: bool,$/;"	m	struct:Waitlist
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn closed() -> AcquireError {$/;"	P	implementation:AcquireError
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    closed: bool,$/;"	m	struct:Slot
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    closed: bool,$/;"	m	struct:Tail
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn closed(&self) {$/;"	P	implementation:Sender
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) async fn closed(&self) {$/;"	P	implementation:Tx
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub async fn closed(&self) {$/;"	P	implementation:UnboundedSender
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub async fn closed(&mut self) {$/;"	P	implementation:Sender
closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub async fn closed(&self) {$/;"	P	implementation:Sender
closing_and_sending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn closing_and_sending() {$/;"	f
closing_bounded_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn closing_bounded_rx() {$/;"	f
closing_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn closing_tx() {$/;"	f
closing_unbounded_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn closing_unbounded_rx() {$/;"	f
closing_unbounded_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn closing_unbounded_tx() {$/;"	f
cnt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^        cnt: AtomicUsize,$/;"	m	struct:test::Foo
collect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    async fn collect(mut rx: watch::Receiver<()>) -> Vec<()> {$/;"	f	module:tests
collect_list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn collect_list(list: &mut LinkedList<&'_ Entry, <&'_ Entry as Link>::Target>) -> Vec<i32> {$/;"	f	module:tests
compact	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn compact(&mut self) {$/;"	P	implementation:Slab
compact_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn compact_all() {$/;"	f	module:test
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn complete(self) {$/;"	f
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn complete(&self) -> bool {$/;"	P	implementation:Inner
complete_block_on_under_load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn complete_block_on_under_load() {$/;"	f	module:group_b
complete_inflight	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    async fn complete_inflight(&mut self) {$/;"	P	implementation:Inner
concurrent_cancel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn concurrent_cancel() {$/;"	f
concurrent_close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn concurrent_close() {$/;"	f
concurrent_read_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_rwlock.rs	/^fn concurrent_read_write() {$/;"	f
concurrent_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_rwlock.rs	/^fn concurrent_write() {$/;"	f
condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    condvar: Condvar,$/;"	m	struct:Inner
condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    condvar: Condvar,$/;"	m	struct:Inner
condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    condvar: Condvar,$/;"	m	struct:Inner
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub async fn connect(self, addr: SocketAddr) -> io::Result<TcpStream> {$/;"	P	implementation:TcpSocket
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub async fn connect<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {$/;"	P	implementation:UdpSocket
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn connect<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {$/;"	P	implementation:UnixDatagram
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub async fn connect<P>(path: P) -> io::Result<UnixStream>$/;"	P	implementation:UnixStream
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn connect(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeServer
connect_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    async fn connect_addr(addr: SocketAddr) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream
connect_mio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(crate) async fn connect_mio(sys: mio::net::TcpStream) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) const fn const_new(t: T) -> Mutex<T> {$/;"	P	implementation:Mutex
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) const fn const_new(mut permits: usize) -> Self {$/;"	P	implementation:Semaphore
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub const fn const_new(t: T) -> Self$/;"	P	implementation:Mutex
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pub const fn const_new() -> Notify {$/;"	P	implementation:Notify
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub const fn const_new() -> Self {$/;"	P	implementation:OnceCell
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub const fn const_new(value: T) -> RwLock<T>$/;"	P	implementation:RwLock
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub const fn const_new(permits: usize) -> Self {$/;"	P	implementation:Semaphore
const_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn const_new() {$/;"	f	module:tests
const_with_max_readers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub const fn const_with_max_readers(value: T, mut max_reads: u32) -> RwLock<T>$/;"	P	implementation:RwLock
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn consume(mut self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:u8
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:Cursor
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	f
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize);$/;"	P	interface:AsyncBufRead
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:BufReader
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:BufStream
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:BufWriter
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	f
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^    fn consume(self: Pin<&mut Self>, _: usize) {}$/;"	P	implementation:Empty
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    fn consume(self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:Take
consume_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    unsafe fn consume_value(&self) -> Option<T> {$/;"	P	implementation:Inner
contains	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub(crate) fn contains<T: Into<Self>>(self, other: T) -> bool {$/;"	P	implementation:Ready
context	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^        context: Option<Context>,$/;"	m	struct:enter::Guard
convert_to_stdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) fn convert_to_stdio(io: PollEvented<Pipe>) -> io::Result<Stdio> {$/;"	f
convert_to_stdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^pub(crate) fn convert_to_stdio(io: PollEvented<NamedPipe>) -> io::Result<Stdio> {$/;"	f
coop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub(crate) mod coop;$/;"	n
copy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/copy.rs	/^pub async fn copy(from: impl AsRef<Path>, to: impl AsRef<Path>) -> Result<u64, std::io::Error> {$/;"	f
copy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod copy;$/;"	n
copy_bidirectional	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^pub async fn copy_bidirectional<A, B>(a: &mut A, b: &mut B) -> Result<(u64, u64), std::io::Error/;"	f
copy_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn copy_from(&mut self, src: &[u8]) -> usize {$/;"	P	implementation:Buf
copy_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn copy_to(&mut self, dst: &mut ReadBuf<'_>) -> usize {$/;"	P	implementation:Buf
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^            core: &'a CoreStage<T>,$/;"	m	struct:poll_future::Guard
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn core(&self) -> &Core<T, S> {$/;"	f
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod core;$/;"	n
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    core: TryLock<Core>,$/;"	m	struct:Inner
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    core: AtomicCell<Core>,$/;"	m	struct:Worker
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    core: RefCell<Option<Box<Core>>>,$/;"	m	struct:Context
count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/select.rs	/^macro_rules! count {$/;"	M
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^    pub async fn create(&self, path: impl AsRef<Path>) -> io::Result<()> {$/;"	P	implementation:DirBuilder
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn create(path: impl AsRef<Path>) -> io::Result<File> {$/;"	P	implementation:File
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn create(&mut self, create: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn create(&self, addr: impl AsRef<OsStr>) -> io::Result<NamedPipeServer> {$/;"	P	implementation:ServerOptions
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^pub(super) fn create(size: usize, park: Parker) -> (Arc<Shared>, Launch) {$/;"	f
create_blocking_pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/mod.rs	/^pub(crate) fn create_blocking_pool(builder: &Builder, thread_cap: usize) -> BlockingPool {$/;"	f
create_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/create_dir.rs	/^pub async fn create_dir(path: impl AsRef<Path>) -> io::Result<()> {$/;"	f
create_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod create_dir;$/;"	n
create_dir_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/create_dir_all.rs	/^pub async fn create_dir_all(path: impl AsRef<Path>) -> io::Result<()> {$/;"	f
create_dir_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod create_dir_all;$/;"	n
create_drop1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn create_drop1() {$/;"	f
create_drop2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn create_drop2() {$/;"	f
create_new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn create_new(&mut self, create_new: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
create_shutdown1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn create_shutdown1() {$/;"	f
create_shutdown2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn create_shutdown2() {$/;"	f
create_with_security_attributes_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub unsafe fn create_with_security_attributes_raw($/;"	P	implementation:ServerOptions
creation_flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn creation_flags(&mut self, flags: u32) -> &mut Command {$/;"	P	implementation:Command
ctrl_break	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^pub fn ctrl_break() -> io::Result<CtrlBreak> {$/;"	f
ctrl_break	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/stub.rs	/^pub(super) fn ctrl_break() -> io::Result<RxFuture> {$/;"	f
ctrl_break	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    ctrl_break: EventInfo,$/;"	m	struct:OsStorage
ctrl_break	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn ctrl_break() {$/;"	f	module:tests
ctrl_break	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^pub(super) fn ctrl_break() -> io::Result<RxFuture> {$/;"	f
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/ctrl_c.rs	/^pub async fn ctrl_c() -> io::Result<()> {$/;"	f
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^mod ctrl_c;$/;"	n
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) fn ctrl_c() -> io::Result<Signal> {$/;"	f
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^pub fn ctrl_c() -> io::Result<CtrlC> {$/;"	f
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/stub.rs	/^pub(super) fn ctrl_c() -> io::Result<RxFuture> {$/;"	f
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    ctrl_c: EventInfo,$/;"	m	struct:OsStorage
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn ctrl_c() {$/;"	f	module:tests
ctrl_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^pub(super) fn ctrl_c() -> io::Result<RxFuture> {$/;"	f
curr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    curr: usize,$/;"	m	struct:WakeList
current	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/context.rs	/^pub(crate) fn current() -> Option<Handle> {$/;"	f
current	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn current() -> Self {$/;"	P	implementation:Handle
current_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn current_dir<P: AsRef<Path>>(&mut self, dir: P) -> &mut Command {$/;"	P	implementation:Command
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    data: AtomicPtr<T>,$/;"	m	struct:AtomicCell
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    data: *mut T,$/;"	m	struct:MappedMutexGuard
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    data: UnsafeCell<T>,$/;"	m	struct:TryLock
datagram	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^pub mod datagram;$/;"	n
deadline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    pub fn deadline(&self) -> Instant {$/;"	P	implementation:Sleep
deadline_to_tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn deadline_to_tick(&self, t: Instant) -> u64 {$/;"	P	implementation:ClockTime
dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn dealloc(self) {$/;"	f
dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn dealloc(self) {$/;"	P	implementation:RawTask
dealloc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn dealloc<T: Future, S: Schedule>(ptr: NonNull<Header>) {$/;"	f
debug	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^fn debug<T>(fmt: &mut fmt::Formatter<'_>, name: &str, pages: &[Arc<Page<T>>]) -> fmt::Result {$/;"	f
dec_num_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn dec_num_searching(cell: &AtomicUsize) -> bool {$/;"	P	implementation:State
dec_num_unparked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn dec_num_unparked(cell: &AtomicUsize, is_searching: bool) -> bool {$/;"	P	implementation:State
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    fn default() -> Self {$/;"	P	implementation:OpenOptions
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    fn default() -> ScheduledIo {$/;"	P	implementation:ScheduledIo
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn default() -> Self {$/;"	P	implementation:ParkThread
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn default() -> Self {$/;"	P	implementation:EventInfo
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn default() -> SignalInfo {$/;"	P	implementation:SignalInfo
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn default() -> Self {$/;"	f
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    fn default() -> Notify {$/;"	P	implementation:Notify
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn default() -> OnceCell<T> {$/;"	P	implementation:OnceCell
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn default() -> Self {$/;"	f
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn default() -> Self {$/;"	P	implementation:AtomicWaker
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn default() -> LocalSet {$/;"	P	implementation:LocalSet
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn default() -> Self {$/;"	P	implementation:StateCell
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    fn default() -> Stack {$/;"	P	implementation:Stack
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    fn default() -> Self {$/;"	P	implementation:MissedTickBehavior
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn default() -> Self {$/;"	P	implementation:LinkedList
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^        fn default() -> Foo {$/;"	P	implementation:test::Foo
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn default() -> CachedPage<T> {$/;"	P	implementation:CachedPage
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn default() -> Page<T> {$/;"	P	implementation:Page
default_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    default_timeout: DWORD,$/;"	m	struct:ServerOptions
delay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    delay: Pin<Box<Sleep>>,$/;"	m	struct:Interval
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    fn deref(&self) -> &E {$/;"	P	implementation:PollEvented
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:AtomicPtr
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:AtomicU16
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:AtomicU32
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:AtomicU8
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:AtomicUsize
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn deref(&self) -> &Self::Target {$/;"	f
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^    fn deref(&self) -> &Waker {$/;"	P	implementation:WakerRef
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Globals
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:MappedMutexGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:MutexGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:OwnedMutexGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    fn deref(&self) -> &U {$/;"	P	implementation:OwnedRwLockReadGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:OwnedRwLockWriteGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    fn deref(&self) -> &U {$/;"	P	implementation:OwnedRwLockMappedWriteGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:RwLockReadGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:RwLockWriteGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:RwLockMappedWriteGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:Ref
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:CachePadded
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:Ref
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:LockGuard
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    fn deref(&self) -> &Waker {$/;"	P	implementation:WakerRef
deref_async_buf_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^macro_rules! deref_async_buf_read {$/;"	M
deref_async_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^macro_rules! deref_async_read {$/;"	M
deref_async_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^macro_rules! deref_async_seek {$/;"	M
deref_async_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^macro_rules! deref_async_write {$/;"	M
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:AtomicPtr
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:AtomicUsize
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:MappedMutexGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:MutexGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:OwnedMutexGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:OwnedRwLockWriteGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    fn deref_mut(&mut self) -> &mut U {$/;"	P	implementation:OwnedRwLockMappedWriteGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:RwLockWriteGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:RwLockMappedWriteGuard
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:CachePadded
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:LockGuard
deregister	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn deregister(&mut self, io: &mut impl Source) -> io::Result<()> {$/;"	P	implementation:Registration
deregister	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn deregister(&mut self, registry: &mio::Registry) -> io::Result<()> {$/;"	P	implementation:Pipe
deregister_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(super) fn deregister_source(&self, source: &mut impl mio::event::Source) -> io::Result<(/;"	P	implementation:Inner
desired_access	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    desired_access: DWORD,$/;"	m	struct:ClientOptions
did_wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    did_wake: Arc<AtomicBool>,$/;"	m	struct:Driver
did_wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    did_wake: Arc<AtomicBool>,$/;"	m	struct:TimerUnpark
dir_builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod dir_builder;$/;"	n
disarm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn disarm(&mut self) {$/;"	P	implementation:test_combination::Output
discard_buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn discard_buffer(self: Pin<&mut Self>) {$/;"	P	implementation:BufReader
disconnect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn disconnect(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeServer
dispatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn dispatch(&mut self, token: mio::Token, ready: Ready) {$/;"	P	implementation:Driver
distance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn distance(&self, other_index: usize) -> usize {$/;"	P	implementation:Block
do_register	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn do_register<W>(&self, waker: W)$/;"	P	implementation:AtomicWaker
doc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod doc;$/;"	n
doc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^mod doc {$/;"	n
does_not_register_signal_if_queue_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn does_not_register_signal_if_queue_empty() {$/;"	f	module:test
does_nothing_if_signal_could_not_be_registered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn does_nothing_if_signal_could_not_be_registered() {$/;"	f	module:test
downgrade	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    pub fn downgrade(mut self) -> OwnedRwLockReadGuard<T> {$/;"	P	implementation:OwnedRwLockWriteGuard
downgrade	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    pub fn downgrade(self) -> RwLockReadGuard<'a, T> {$/;"	P	implementation:RwLockWriteGuard
downgrade	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_rwlock.rs	/^fn downgrade() {$/;"	f
drain_attempts_a_single_reap_of_all_queued_orphans	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn drain_attempts_a_single_reap_of_all_queued_orphans() {$/;"	f	module:test
drain_orphan_queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^fn drain_orphan_queue<T>(mut queue: MutexGuard<'_, Vec<T>>)$/;"	f
driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) mod driver;$/;"	n
driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    driver: TryLock<Driver>,$/;"	m	struct:Shared
driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) mod driver;$/;"	n
driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    driver: Handle,$/;"	m	struct:TimerEntry
driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^pub(crate) mod driver;$/;"	n
driver_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    driver_state: CachePadded<TimerSharedPadded>,$/;"	m	struct:TimerShared
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^        fn drop(&mut self) {$/;"	P	implementation:with_budget::ResetGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AsyncFd
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Driver
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Inner
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Registration
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ScheduledIo
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    fn drop(&mut self) {$/;"	P	implementation:PollEvented
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Guard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn drop(&mut self) {$/;"	P	implementation:DuplexStream
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^            fn drop(&mut self) {$/;"	P	implementation:ScopedKey::set::Reset
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedWriteHalf
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedWriteHalf
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ChildDropGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Waiting
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^        fn drop(&mut self) {$/;"	P	implementation:enter::Guard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn drop(&mut self) {$/;"	P	implementation:BasicScheduler
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn drop(&mut self) {$/;"	P	implementation:InnerGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    fn drop(&mut self) {$/;"	P	implementation:BlockingPool
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/context.rs	/^    fn drop(&mut self) {$/;"	P	implementation:EnterGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Enter
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Local
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^            fn drop(&mut self) {$/;"	P	implementation:poll_future::Guard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Inject
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    fn drop(&mut self) {$/;"	P	implementation:JoinHandle
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Task
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:UnownedTask
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^        fn drop(&mut self) {$/;"	P	implementation:atomic_take::AtomicTake
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^        fn drop(&mut self) {$/;"	P	implementation:spawn_during_shutdown::SpawnOnDrop
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^        fn drop(&mut self) {$/;"	P	implementation:with::Reset
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AssertDrop
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_combination::FutWrapper
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_combination::Output
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AtomicCell
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ThreadPool
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^        fn drop(&mut self) {$/;"	P	implementation:block_in_place::Reset
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ReusableBoxFuture
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Acquire
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Receiver
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Recv
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RecvGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Sender
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedPermit
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Permit
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Chan
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Rx
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Tx
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:MappedMutexGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:MutexGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedMutexGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Notified
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OnceCell
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Inner
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Receiver
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Sender
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedRwLockReadGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedRwLockWriteGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedRwLockMappedWriteGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RwLockReadGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RwLockWriteGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RwLockMappedWriteGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedSemaphorePermit
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    fn drop(&mut self) {$/;"	P	implementation:SemaphorePermit
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Receiver
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Sender
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn drop(&mut self) {$/;"	P	implementation:LocalSet
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^            fn drop(&mut self) {$/;"	P	implementation:TaskLocalFuture::with_task::Guard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn drop(&mut self) {$/;"	P	implementation:TimerEntry
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Ref
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:LockGuard
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    fn drop(&mut self) {$/;"	P	implementation:WakeList
drop_arc_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^unsafe fn drop_arc_raw<T: Wake>(data: *const ()) {$/;"	f
drop_enqueues_orphan_if_wait_fails	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn drop_enqueues_orphan_if_wait_fails() {$/;"	f	module:test
drop_future_or_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn drop_future_or_output(&self) {$/;"	P	implementation:CoreStage
drop_join_handle_fast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn drop_join_handle_fast(&self) -> Result<(), ()> {$/;"	P	implementation:State
drop_join_handle_slow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn drop_join_handle_slow(self) {$/;"	f
drop_join_handle_slow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn drop_join_handle_slow(self) {$/;"	P	implementation:RawTask
drop_join_handle_slow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn drop_join_handle_slow<T: Future, S: Schedule>(ptr: NonNull<Header>) {$/;"	f
drop_multiple_rx_with_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^fn drop_multiple_rx_with_overflow() {$/;"	f
drop_reaps_if_possible	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn drop_reaps_if_possible() {$/;"	f	module:test
drop_reference	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn drop_reference(self) {$/;"	f
drop_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^fn drop_rx() {$/;"	f
drop_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    unsafe fn drop_task(&self) {$/;"	P	implementation:Task
drop_timer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn drop_timer() {$/;"	f
drop_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^unsafe fn drop_waker(raw: *const ()) {$/;"	f
drop_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^unsafe fn drop_waker<T, S>(ptr: *const ())$/;"	f
dropping_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn dropping_tx() {$/;"	f
dropping_unbounded_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_mpsc.rs	/^fn dropping_unbounded_tx() {$/;"	f
duplex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^pub fn duplex(max_buf_size: usize) -> (DuplexStream, DuplexStream) {$/;"	f
duration_since	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn duration_since(&self, earlier: Instant) -> Duration {$/;"	P	implementation:Instant
elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    elapsed: u64,$/;"	m	struct:InnerState
elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    elapsed: u64,$/;"	m	struct:Wheel
elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) fn elapsed(&self) -> u64 {$/;"	P	implementation:Wheel
elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn elapsed(&self) -> Duration {$/;"	P	implementation:Instant
enable_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn enable_all(&mut self) -> &mut Self {$/;"	P	implementation:Builder
enable_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    enable_io: bool,$/;"	m	struct:Builder
enable_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    enable_time: bool,$/;"	m	struct:Builder
encode_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^fn encode_addr(addr: impl AsRef<OsStr>) -> Box<[u16]> {$/;"	f
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub end: PipeEnd,$/;"	m	struct:PipeInfo
ensure_capacity_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>) {$/;"	P	implementation:Buf
enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^fn enter<F, R, P>(scheduler: &mut Inner<P>, f: F) -> R$/;"	f
enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/context.rs	/^pub(crate) fn enter(new: Handle) -> EnterGuard {$/;"	f
enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn enter(&self) -> EnterGuard<'_> {$/;"	P	implementation:Handle
enter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/mod.rs	/^pub(crate) mod enter;$/;"	n
entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^mod entry;$/;"	n
entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn entry(val: i32) -> Pin<Box<Entry>> {$/;"	f	module:tests
env	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn env<K, V>(&mut self, key: K, val: V) -> &mut Command$/;"	P	implementation:Command
env_clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn env_clear(&mut self) -> &mut Command {$/;"	P	implementation:Command
env_remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn env_remove<K: AsRef<OsStr>>(&mut self, key: K) -> &mut Command {$/;"	P	implementation:Command
envs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn envs<I, K, V>(&mut self, vars: I) -> &mut Command$/;"	P	implementation:Command
eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_exact.rs	/^fn eof() -> io::Error {$/;"	f
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn eq(&self, other: &OnceCell<T>) -> bool {$/;"	P	implementation:OnceCell
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn error() -> Ready {$/;"	f	module:sys
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod error;$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^pub mod error {$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^pub mod error;$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^pub mod error {$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^pub mod error {$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^pub mod error;$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/mod.rs	/^pub(crate) mod error;$/;"	n
event	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    event: Option<ReadyEvent>,$/;"	m	struct:AsyncFdReadyGuard
event	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    event: Option<ReadyEvent>,$/;"	m	struct:AsyncFdReadyMutGuard
event_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn event_info(&self, id: EventId) -> Option<&EventInfo> {$/;"	P	implementation:Vec
event_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn event_info(&self, id: EventId) -> Option<&EventInfo>;$/;"	P	interface:Storage
event_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    event_info: EventInfo,$/;"	m	struct:SignalInfo
event_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn event_info(&self, id: EventId) -> Option<&EventInfo> {$/;"	P	implementation:OsStorage
event_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn event_info(&self, id: EventId) -> Option<&EventInfo> {$/;"	P	implementation:OsStorage
events	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    events: Option<mio::Events>,$/;"	m	struct:Driver
extend_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn extend_expiration(&self, new_timestamp: u64) -> Result<(), ()> {$/;"	P	implementation:StateCell
extend_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn extend_expiration(&self, t: u64) -> Result<(), ()> {$/;"	P	implementation:TimerShared
extra	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    extra: OsExtraData,$/;"	m	struct:Globals
f	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^    f: F,$/;"	m	struct:PollFn
far_future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    pub(crate) fn far_future() -> Sleep {$/;"	P	implementation:Sleep
far_future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub(crate) fn far_future() -> Instant {$/;"	P	implementation:Instant
fastrand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^    fn fastrand(&self) -> u32 {$/;"	P	implementation:FastRand
fastrand_n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^    pub(crate) fn fastrand_n(&self, n: u32) -> u32 {$/;"	P	implementation:FastRand
fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fd: File,$/;"	m	struct:Pipe
feature	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/cfg.rs	/^macro_rules! feature {$/;"	M
fetch_update	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn fetch_update<F>(&self, mut f: F) -> Result<Snapshot, Snapshot>$/;"	P	implementation:State
fetch_update_action	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn fetch_update_action<F, T>(&self, mut f: F) -> T$/;"	P	implementation:State
file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod file;$/;"	n
file_name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry
file_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub async fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry
fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/fill_buf.rs	/^pub(crate) fn fill_buf<R>(reader: &mut R) -> FillBuf<'_, R>$/;"	f
filled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    filled: usize,$/;"	m	struct:ReadBuf
filled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn filled(&self) -> &[u8] {$/;"	P	implementation:ReadBuf
filled_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn filled_mut(&mut self) -> &mut [u8] {$/;"	P	implementation:ReadBuf
find_block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    fn find_block(&self, slot_index: usize) -> NonNull<Block<T>> {$/;"	P	implementation:Tx
finish_string_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^pub(super) fn finish_string_read($/;"	f
fire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn fire(self, completed_state: TimerResult) -> Option<Waker> {$/;"	P	implementation:TimerHandle
fire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    unsafe fn fire(&self, result: TimerResult) -> Option<Waker> {$/;"	P	implementation:StateCell
first_pipe_instance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn first_pipe_instance(&mut self, first: bool) -> &mut Self {$/;"	P	implementation:ServerOptions
fits_256	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^fn fits_256() {$/;"	f
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:MockFile
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/flush.rs	/^pub(super) fn flush<A>(a: &mut A) -> Flush<'_, A>$/;"	f
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Pipe
flush_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn flush_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufWriter
flush_while_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn flush_while_idle() {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:File
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:PollFn
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:AsyncFd
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:AsyncFdReadyGuard
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:AsyncFdReadyMutGuard
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Interest
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Driver
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Handle
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Ready
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:PollEvented
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadBuf
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadHalf
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:WriteHalf
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BufReader
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BufWriter
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Empty
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Sink
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicPtr
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicU16
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicU32
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicU8
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicUsize
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpListener
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpSocket
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReuniteError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpStream
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixDatagram
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixListener
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SocketAddr
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReuniteError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixStream
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Child
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:GlobalOrphanQueue
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Child
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BasicScheduler
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Spawner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BlockingPool
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Spawner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Builder
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Enter
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TryCurrentError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Notified
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Task
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Snapshot
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:State
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:State
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Spawner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ThreadPool
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReusableBoxFuture
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AcquireError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Semaphore
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TryAcquireError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::RecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::SendError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::TryRecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Receiver
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Sender
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OwnedPermit
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Permit
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Receiver
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Sender
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Rx
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:RxFields
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Tx
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:RecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SendError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TrySendError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Rx
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Tx
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnboundedReceiver
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnboundedSender
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:MappedMutexGuard
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:MutexGuard
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OwnedMutexGuard
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TryLockError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SetError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OnceCell
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::RecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::TryRecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Inner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:State
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AtomicWaker
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::RecvError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:error::SendError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LocalSet
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AccessError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LocalKey
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:StateCell
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:TimerSharedPadded
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Handle
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Inner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Level
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Elapsed
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Instant
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Pack
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LinkedList
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Pointers
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:CachePadded
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Allocator
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Ref
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Slab
for_each	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn for_each<'a, F>(&'a self, f: F)$/;"	P	implementation:Vec
for_each	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn for_each<'a, F>(&'a self, f: F)$/;"	P	interface:Storage
for_each	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn for_each<'a, F>(&'a self, f: F)$/;"	P	implementation:OsStorage
for_each	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn for_each<'a, F>(&'a self, mut f: F)$/;"	P	implementation:OsStorage
for_each	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn for_each(&mut self, mut f: impl FnMut(&T)) {$/;"	P	implementation:Slab
forget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    pub fn forget(mut self) {$/;"	P	implementation:OwnedWriteHalf
forget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    pub fn forget(mut self) {$/;"	P	implementation:OwnedWriteHalf
forget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn forget(mut self) {$/;"	P	implementation:OwnedSemaphorePermit
forget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn forget(mut self) {$/;"	P	implementation:SemaphorePermit
free_blocks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    pub(super) unsafe fn free_blocks(&mut self) {$/;"	P	implementation:Rx
free_head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    free_head: NonNull<Block<T>>,$/;"	m	struct:Rx
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn from(std: StdFile) -> Self {$/;"	P	implementation:File
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    fn from(options: StdOpenOptions) -> OpenOptions {$/;"	P	implementation:OpenOptions
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn from(b: BufReader<BufWriter<RW>>) -> Self {$/;"	P	implementation:BufStream
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn from(b: BufWriter<BufReader<RW>>) -> Self {$/;"	P	implementation:BufStream
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn from(std: StdCommand) -> Command {$/;"	P	implementation:Command
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn from(fd: T) -> Self {$/;"	P	implementation:Pipe
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    fn from(src: JoinError) -> io::Error {$/;"	P	implementation:Error
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn from(src: State) -> usize {$/;"	P	implementation:usize
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn from(src: usize) -> State {$/;"	P	implementation:State
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/error.rs	/^    fn from(src: SendError<T>) -> TrySendError<T> {$/;"	P	implementation:TrySendError
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    fn from(s: T) -> Self {$/;"	P	implementation:Mutex
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn from(value: T) -> Self {$/;"	P	implementation:OnceCell
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    fn from(s: T) -> Self {$/;"	P	implementation:RwLock
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    fn from(_err: Elapsed) -> std::io::Error {$/;"	P	implementation:Error
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    fn from(k: Kind) -> Self {$/;"	P	implementation:Error
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn from(time: Instant) -> std::time::Instant {$/;"	P	implementation:Instant
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn from(time: std::time::Instant) -> Instant {$/;"	P	implementation:Instant
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    fn from(t: T) -> Self {$/;"	P	implementation:CachePadded
from_mio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub(crate) fn from_mio(event: &mio::event::Event) -> Ready {$/;"	P	implementation:Ready
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    unsafe fn from_raw(ptr: *const ()) -> Arc<Inner> {$/;"	P	implementation:Inner
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) unsafe fn from_raw(ptr: NonNull<Header>) -> Harness<T, S> {$/;"	f
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    unsafe fn from_raw(ptr: NonNull<Header>) -> Task<S> {$/;"	P	implementation:Task
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) unsafe fn from_raw(ptr: NonNull<Header>) -> RawTask {$/;"	P	implementation:RawTask
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^fn from_raw<T>(val: *mut T) -> Option<Box<T>> {$/;"	f
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn from_raw(signum: std::os::raw::c_int) -> Self {$/;"	P	implementation:SignalKind
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    unsafe fn from_raw(ptr: NonNull<Waiter>) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    unsafe fn from_raw(ptr: NonNull<Waiter>) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    unsafe fn from_raw(ptr: NonNull<Waiter>) -> NonNull<Waiter> {$/;"	P	implementation:Waiter
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    unsafe fn from_raw(ptr: NonNull<Self::Target>) -> Self::Handle {$/;"	P	implementation:TimerShared
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        unsafe fn from_raw(ptr: NonNull<Entry>) -> Pin<&'a Entry> {$/;"	P	implementation:tests::Entry
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    unsafe fn from_raw(ptr: NonNull<Self::Target>) -> Self::Handle;$/;"	P	interface:Link
from_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    unsafe fn from_raw_fd(fd: std::os::unix::io::RawFd) -> Self {$/;"	P	implementation:File
from_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> TcpSocket {$/;"	P	implementation:TcpSocket
from_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^            unsafe fn from_raw_handle(handle: RawHandle) -> Self;$/;"	P	interface:windows::io::FromRawHandle
from_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    unsafe fn from_raw_handle(handle: std::os::windows::io::RawHandle) -> Self {$/;"	P	implementation:File
from_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub unsafe fn from_raw_handle(handle: RawHandle) -> io::Result<Self> {$/;"	P	implementation:NamedPipeClient
from_raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub unsafe fn from_raw_handle(handle: RawHandle) -> io::Result<Self> {$/;"	P	implementation:NamedPipeServer
from_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    unsafe fn from_raw_socket(socket: RawSocket) -> TcpSocket {$/;"	P	implementation:TcpSocket
from_shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn from_shared(version: Version, shared: Arc<Shared<T>>) -> Self {$/;"	P	implementation:Receiver
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub fn from_std(std: StdFile) -> File {$/;"	P	implementation:File
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn from_std(listener: net::TcpListener) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn from_std(stream: std::net::TcpStream) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn from_std(socket: net::UdpSocket) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn from_std(datagram: net::UnixDatagram) -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn from_std(listener: net::UnixListener) -> io::Result<UnixListener> {$/;"	P	implementation:UnixListener
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn from_std(stream: net::UnixStream) -> io::Result<UnixStream> {$/;"	P	implementation:UnixStream
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn from_std(inner: std::process::ChildStderr) -> io::Result<Self> {$/;"	P	implementation:ChildStderr
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn from_std(inner: std::process::ChildStdin) -> io::Result<Self> {$/;"	P	implementation:ChildStdin
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn from_std(inner: std::process::ChildStdout) -> io::Result<Self> {$/;"	P	implementation:ChildStdout
from_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn from_std(std: std::time::Instant) -> Instant {$/;"	P	implementation:Instant
from_std_stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn from_std_stream(std_stream: std::net::TcpStream) -> TcpSocket {$/;"	P	implementation:TcpSocket
from_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub(crate) fn from_usize(val: usize) -> Ready {$/;"	P	implementation:Ready
from_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn from_usize(src: usize) -> Address {$/;"	P	implementation:Address
func	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^    func: Option<T>,$/;"	m	struct:BlockingTask
future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^mod future;$/;"	n
future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^pub(crate) mod future {$/;"	n
gated	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^fn gated() -> impl Future<Output = &'static str> {$/;"	f
gated2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^fn gated2(thread: bool) -> impl Future<Output = &'static str> {$/;"	f
gen_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn gen_ref(&self, page: &Arc<Page<T>>) -> Ref<T> {$/;"	P	implementation:Slot
generation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(crate) fn generation(&self) -> usize {$/;"	P	implementation:ScheduledIo
generation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    generation: usize,$/;"	m	struct:BarrierState
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    fn get() -> Budget {$/;"	f	module:test
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn get(&self) -> Option<&T> {$/;"	P	implementation:OnceCell
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub fn get(&'static self) -> T {$/;"	P	implementation:LocalKey
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    pub(super) fn get(&self) -> &super::Inner {$/;"	P	implementation:Handle
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn get(&self, idx: usize) -> &T {$/;"	P	implementation:CachedPage
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn get(&mut self, addr: Address) -> Option<&T> {$/;"	P	implementation:Slab
get_cfg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    fn get_cfg(&self) -> driver::Cfg {$/;"	P	implementation:Builder
get_flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn get_flags(&self) -> u32 {$/;"	P	implementation:ClientOptions
get_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_inner(&self) -> &Inner {$/;"	P	implementation:AsyncFdReadyGuard
get_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_inner(&self) -> &Inner {$/;"	P	implementation:AsyncFdReadyMutGuard
get_inner_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_inner_mut(&mut self) -> &mut Inner {$/;"	P	implementation:AsyncFdReadyMutGuard
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_mut(&mut self) -> &mut AsyncFd<Inner> {$/;"	P	implementation:AsyncFdReadyMutGuard
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:AsyncFd
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	P	implementation:BufReader
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn get_mut(&mut self) -> &mut RW {$/;"	P	implementation:BufStream
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn get_mut(&mut self) -> &mut W {$/;"	P	implementation:BufWriter
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    pub fn get_mut(&mut self) -> (&mut T, &mut U) {$/;"	f
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	f
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	P	implementation:Take
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:Mutex
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:Mutex
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn get_mut(&mut self) -> Option<&mut T> {$/;"	P	implementation:OnceCell
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:RwLock
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:Timeout
get_new_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn get_new_task(&self) -> Task<S> {$/;"	f
get_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^fn get_next(header: NonNull<task::Header>) -> Option<NonNull<task::Header>> {$/;"	f
get_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn get_next(&self) -> Option<NonNull<T>> {$/;"	P	implementation:Pointers
get_num_notify_waiters_calls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn get_num_notify_waiters_calls(data: usize) -> usize {$/;"	f
get_or_init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub async fn get_or_init<F, Fut>(&self, f: F) -> &T$/;"	P	implementation:OnceCell
get_or_try_init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub async fn get_or_try_init<E, F, Fut>(&self, f: F) -> Result<&T, E>$/;"	P	implementation:OnceCell
get_owner_id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn get_owner_id(&self) -> u64 {$/;"	P	implementation:Header
get_peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {$/;"	f	module:impl_bsd
get_peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {$/;"	f	module:impl_linux
get_peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {$/;"	f	module:impl_macos
get_peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {$/;"	f	module:impl_netbsd
get_peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {$/;"	f	module:impl_solaris
get_pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    pub(crate) fn get_pin(&mut self) -> Pin<&mut (dyn Future<Output = T> + Send)> {$/;"	P	implementation:ReusableBoxFuture
get_pin_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut R> {$/;"	P	implementation:BufReader
get_pin_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut RW> {$/;"	P	implementation:BufStream
get_pin_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut W> {$/;"	P	implementation:BufWriter
get_pin_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    pub fn get_pin_mut(self: Pin<&mut Self>) -> (Pin<&mut T>, Pin<&mut U>) {$/;"	f
get_pin_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut R> {$/;"	P	implementation:Take
get_prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn get_prev(&self) -> Option<NonNull<T>> {$/;"	P	implementation:Pointers
get_read_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn get_read_buf<'a>(&'a mut self) -> ReadBuf<'a> {$/;"	f
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_ref(&self) -> &AsyncFd<Inner> {$/;"	P	implementation:AsyncFdReadyGuard
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_ref(&self) -> &AsyncFd<Inner> {$/;"	P	implementation:AsyncFdReadyMutGuard
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn get_ref(&self) -> &T {$/;"	P	implementation:AsyncFd
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn get_ref(&self) -> &R {$/;"	P	implementation:BufReader
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn get_ref(&self) -> &RW {$/;"	P	implementation:BufStream
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn get_ref(&self) -> &W {$/;"	P	implementation:BufWriter
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    pub fn get_ref(&self) -> (&T, &U) {$/;"	f
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    pub fn get_ref(&mut self) -> &R {$/;"	f
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn get_ref(&self) -> &R {$/;"	P	implementation:Take
get_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    pub fn get_ref(&self) -> &T {$/;"	P	implementation:Timeout
get_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn get_state(data: usize) -> usize {$/;"	f
get_unchecked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    unsafe fn get_unchecked(&self) -> &T {$/;"	P	implementation:OnceCell
get_unchecked_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    unsafe fn get_unchecked_mut(&mut self) -> &mut T {$/;"	P	implementation:OnceCell
get_unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    pub(crate) fn get_unpark(&self) -> Result<UnparkThread, ParkError> {$/;"	P	implementation:CachedParkThread
gid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    gid: gid_t,$/;"	m	struct:UCred
gid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub fn gid(&self) -> gid_t {$/;"	P	implementation:UCred
gid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn gid(&mut self, id: u32) -> &mut Command {$/;"	P	implementation:Command
global_init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^fn global_init() -> io::Result<()> {$/;"	f
globals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^pub(crate) fn globals() -> Pin<&'static Globals>$/;"	f
gone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^fn gone() -> io::Error {$/;"	f
group_a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^mod group_a {$/;"	n
group_b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^mod group_b {$/;"	n
group_c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^mod group_c {$/;"	n
group_d	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^mod group_d {$/;"	n
grow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn grow(&self) -> NonNull<Block<T>> {$/;"	P	implementation:Block
guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    guard: context::EnterGuard,$/;"	m	struct:EnterGuard
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(crate) fn handle(&self) -> Handle {$/;"	P	implementation:Driver
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    handle: &'a Handle,$/;"	m	struct:EnterGuard
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    handle: <Driver as Park>::Unpark,$/;"	m	struct:Shared
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    pub(crate) fn handle(&self) -> Handle {$/;"	P	implementation:Driver
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn handle(&self) -> TimerHandle {$/;"	P	implementation:TimerShared
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    handle: Handle,$/;"	m	struct:Driver
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(crate) fn handle(&self) -> Handle {$/;"	f
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^mod handle;$/;"	n
handler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^unsafe extern "system" fn handler(ty: DWORD) -> BOOL {$/;"	f
hangup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn hangup() -> Self {$/;"	P	implementation:SignalKind
hard_link	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/hard_link.rs	/^pub async fn hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) -> io::Result<()> {$/;"	f
hard_link	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod hard_link;$/;"	n
harness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod harness;$/;"	n
has_join_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn has_join_waker(self) -> bool {$/;"	P	implementation:Snapshot
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^            head: u32,$/;"	m	struct:Local::push_overflow::BatchTaskIter
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    head: AtomicU32,$/;"	m	struct:Inner
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    head: Option<NonNull<task::Header>>,$/;"	m	struct:Pointers
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    head: NonNull<Block<T>>,$/;"	m	struct:Rx
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    head: Option<OwnedItem>,$/;"	m	struct:Stack
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    head: Option<NonNull<T>>,$/;"	m	struct:LinkedList
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    head: usize,$/;"	m	struct:Slots
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn header(&self) -> &Header {$/;"	f
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn header(&self) -> &Header {$/;"	P	implementation:Notified
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn header(&self) -> &Header {$/;"	P	implementation:Task
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn header(&self) -> &Header {$/;"	P	implementation:RawTask
header_lte_cache_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^fn header_lte_cache_line() {$/;"	f
hup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn hup() -> Ready {$/;"	f	module:sys
i	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^            i: u32,$/;"	m	struct:Local::push_overflow::BatchTaskIter
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/trace.rs	/^    fn id(&self) -> Option<tracing::Id> {$/;"	P	implementation:Instrumented
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/trace.rs	/^    fn id(&self) -> Option<tracing::Id>;$/;"	P	interface:InstrumentedFuture
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn id(&self) -> Option<u32> {$/;"	P	implementation:Child
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn id(&self) -> u32 {$/;"	P	implementation:StdChild
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    pub(crate) fn id(&self) -> u32 {$/;"	P	implementation:Child
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        fn id(&self) -> u32 {$/;"	P	implementation:test::MockWait
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn id(&self) -> u32 {$/;"	P	implementation:T
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn id(&self) -> u32;$/;"	P	interface:Wait
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn id(&self) -> u32 {$/;"	P	implementation:test::MockWait
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    pub(crate) fn id(&self) -> u32 {$/;"	P	implementation:Child
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn id(&self) -> Option<&tracing::Id> {$/;"	f
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    id: u64,$/;"	m	struct:LocalOwnedTasks
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    id: u64,$/;"	m	struct:OwnedTasks
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^        id: AtomicUsize,$/;"	m	struct:test::Foo
idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^mod idle;$/;"	n
idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    idle: Idle,$/;"	m	struct:Shared
if_loom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/loom.rs	/^macro_rules! if_loom {$/;"	M
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^mod imp;$/;"	n
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^mod imp;$/;"	n
impl_bsd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub(crate) mod impl_bsd {$/;"	n
impl_linux	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub(crate) mod impl_linux {$/;"	n
impl_macos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub(crate) mod impl_macos {$/;"	n
impl_netbsd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub(crate) mod impl_netbsd {$/;"	n
impl_solaris	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^pub(crate) mod impl_solaris {$/;"	n
in_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    in_buffer_size: DWORD,$/;"	m	struct:ServerOptions
in_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn in_buffer_size(&mut self, buffer: u32) -> &mut Self {$/;"	P	implementation:ServerOptions
in_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub in_buffer_size: u32,$/;"	m	struct:PipeInfo
inc_num_messages	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    fn inc_num_messages(&self) -> bool {$/;"	P	implementation:UnboundedSender
inc_num_notify_waiters_calls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn inc_num_notify_waiters_calls(data: usize) -> usize {$/;"	f
inc_num_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn inc_num_searching(cell: &AtomicUsize, ordering: Ordering) {$/;"	P	implementation:State
inc_ref_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^unsafe fn inc_ref_count<T: Wake>(data: *const ()) {$/;"	f
incomplete_flush_followed_by_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn incomplete_flush_followed_by_write() {$/;"	f
incomplete_partial_read_followed_by_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn incomplete_partial_read_followed_by_write() {$/;"	f
incomplete_read_followed_by_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn incomplete_read_followed_by_flush() {$/;"	f
incomplete_read_followed_by_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn incomplete_read_followed_by_write() {$/;"	f
incr_poll_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn incr_poll_count(&mut self) {}$/;"	P	implementation:WorkerStatsBatcher
incr_poll_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn incr_poll_count(&mut self) {$/;"	P	implementation:WorkerStatsBatcher
incr_steal_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn incr_steal_count(&mut self, _by: u16) {}$/;"	P	implementation:WorkerStatsBatcher
incr_steal_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn incr_steal_count(&mut self, by: u16) {$/;"	P	implementation:WorkerStatsBatcher
increment_version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn increment_version(&self) {$/;"	P	implementation:state::AtomicState
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    index: usize,$/;"	m	struct:Worker
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    fn index(&self, index: usize) -> &Self::Output {$/;"	P	implementation:Values
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    index: usize,$/;"	m	struct:Rx
index_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn index_for(&self, slot: *const Value<T>) -> usize {$/;"	P	implementation:Slots
info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn info(&self) -> io::Result<PipeInfo> {$/;"	P	implementation:NamedPipeClient
info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn info(&self) -> io::Result<PipeInfo> {$/;"	P	implementation:NamedPipeServer
info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn info() -> Self {$/;"	P	implementation:SignalKind
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn init() -> Self;$/;"	P	interface:Init
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn init() -> Self {$/;"	P	implementation:OsExtraData
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn init() -> Self {$/;"	P	implementation:OsStorage
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    init: Once,$/;"	m	struct:SignalInfo
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn init() -> Self {$/;"	P	implementation:OsExtraData
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn init() -> Self {$/;"	P	implementation:OsStorage
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    init: usize,$/;"	m	struct:CachedPage
initial	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    const fn initial() -> Budget {$/;"	P	implementation:Budget
initial	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn initial() -> Self {$/;"	P	implementation:state::Version
initial_deadline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    initial_deadline: Option<Instant>,$/;"	m	struct:TimerEntry
initialize_unfilled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn initialize_unfilled(&mut self) -> &mut [u8] {$/;"	P	implementation:ReadBuf
initialize_unfilled_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn initialize_unfilled_to(&mut self, n: usize) -> &mut [u8] {$/;"	P	implementation:ReadBuf
initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    initialized: usize,$/;"	m	struct:ReadBuf
initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn initialized(&self) -> &[u8] {$/;"	P	implementation:ReadBuf
initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    initialized: usize,$/;"	m	struct:ReadBufParts
initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    initialized: AtomicBool,$/;"	m	struct:SignalInfo
initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn initialized(&self) -> bool {$/;"	P	implementation:OnceCell
initialized_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn initialized_mut(&mut self) -> &mut [u8] {$/;"	P	implementation:ReadBuf
initialized_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn initialized_mut(&mut self) -> bool {$/;"	P	implementation:OnceCell
inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn inject(&self) -> &Inject<Arc<Shared>> {$/;"	P	implementation:Worker
inject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    inject: Inject<Arc<Shared>>,$/;"	m	struct:Shared
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    inner: Mutex<Inner>,$/;"	m	struct:File
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    inner: Option<T>,$/;"	m	struct:AsyncFd
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    inner: Option<T>,$/;"	m	struct:Blocking
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Driver
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    inner: Weak<Inner>,$/;"	m	struct:Handle
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(super) fn inner(&self) -> Option<Arc<Inner>> {$/;"	P	implementation:Handle
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    inner: &'a Inner<T>,$/;"	m	struct:Guard
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    inner: W,$/;"	m	struct:SplitByUtf8BoundaryIfWindows
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    inner: std::sync::atomic::AtomicPtr<T>,$/;"	m	struct:AtomicPtr
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    inner: UnsafeCell<std::sync::atomic::AtomicU16>,$/;"	m	struct:AtomicU16
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^    inner: UnsafeCell<std::sync::atomic::AtomicU32>,$/;"	m	struct:AtomicU32
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^    inner: UnsafeCell<std::sync::atomic::AtomicU8>,$/;"	m	struct:AtomicU8
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    inner: UnsafeCell<std::sync::atomic::AtomicUsize>,$/;"	m	struct:AtomicUsize
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    inner: Arc<TcpStream>,$/;"	m	struct:OwnedReadHalf
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    inner: Arc<TcpStream>,$/;"	m	struct:OwnedWriteHalf
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    inner: Arc<UnixStream>,$/;"	m	struct:OwnedReadHalf
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    inner: Arc<UnixStream>,$/;"	m	struct:OwnedWriteHalf
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    inner: Arc<Inner>,$/;"	m	struct:ParkThread
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    inner: Arc<Inner>,$/;"	m	struct:UnparkThread
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    inner: T,$/;"	m	struct:ChildDropGuard
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    inner: imp::ChildStdio,$/;"	m	struct:ChildStderr
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    inner: imp::ChildStdio,$/;"	m	struct:ChildStdin
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    inner: imp::ChildStdio,$/;"	m	struct:ChildStdout
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    inner: Reaper<StdChild, GlobalOrphanQueue, Signal>,$/;"	m	struct:Child
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn inner(&self) -> &W {$/;"	f
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    inner: Option<W>,$/;"	m	struct:Reaper
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    inner: Mutex<Option<Inner<P>>>,$/;"	m	struct:BasicScheduler
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    inner: Option<Inner<P>>,$/;"	m	struct:InnerGuard
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Spawner
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    inner: TimeDriver,$/;"	m	struct:Driver
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Parker
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Unparker
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    inner: Arc<Inner<T>>,$/;"	m	struct:Local
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    inner: Mutex<OwnedTasksInner<S>>,$/;"	m	struct:OwnedTasks
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    inner: UnsafeCell<OwnedTasksInner<S>>,$/;"	m	struct:LocalOwnedTasks
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    inner: Arc<Inner<T>>,$/;"	m	struct:Receiver
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    inner: Arc<Inner<T>>,$/;"	m	struct:Sender
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^        inner: MaybeUninit<T>,$/;"	m	struct:atomic_take::AtomicTake
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        inner: F,$/;"	m	struct:test_combination::FutWrapper
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^    inner: ReusableBoxFuture<Receiver<()>>,$/;"	m	struct:RxFuture
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    inner: RxFuture,$/;"	m	struct:Signal
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Driver
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    inner: Weak<Inner>,$/;"	m	struct:Handle
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    inner: RxFuture,$/;"	m	struct:CtrlBreak
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    inner: RxFuture,$/;"	m	struct:CtrlC
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    inner: Arc<Chan<T, S>>,$/;"	m	struct:Rx
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    inner: Arc<Chan<T, S>>,$/;"	m	struct:Tx
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    inner: Option<Arc<Inner<T>>>,$/;"	m	struct:Receiver
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    inner: Option<Arc<Inner<T>>>,$/;"	m	struct:Sender
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    inner: RwLockReadGuard<'a, T>,$/;"	m	struct:Ref
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub inner: thread::LocalKey<RefCell<Option<T>>>,$/;"	m	struct:LocalKey
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn inner(&self) -> &TimerShared {$/;"	P	implementation:TimerEntry
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    inner: NonNull<TimerShared>,$/;"	m	struct:TimerHandle
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    inner: StdUnsafeCell<TimerShared>,$/;"	m	struct:TimerEntry
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    inner: Arc<super::Inner>,$/;"	m	struct:Handle
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    inner: P::Unpark,$/;"	m	struct:TimerUnpark
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    inner: UnsafeCell<PointersInner<T>>,$/;"	m	struct:Pointers
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    inner: UnsafeCell<VecDeque<T>>,$/;"	m	struct:VecDequeCell
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    inner: [MaybeUninit<Waker>; NUM_WAKERS],$/;"	m	struct:WakeList
inner_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub unsafe fn inner_mut(&mut self) -> &mut [MaybeUninit<u8>] {$/;"	P	implementation:ReadBuf
inner_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    pub(crate) fn inner_mut(&mut self) -> &mut W {$/;"	f
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) unsafe fn insert($/;"	P	implementation:Wheel
insert_drop_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn insert_drop_reverse() {$/;"	f	module:test
insert_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn insert_many() {$/;"	f	module:test
insert_remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn insert_remove() {$/;"	f	module:test
instant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^mod instant;$/;"	n
instant_to_tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn instant_to_tick(&self, t: Instant) -> u64 {$/;"	P	implementation:ClockTime
interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^mod interest;$/;"	n
interrupt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn interrupt() -> Self {$/;"	P	implementation:SignalKind
interval	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^pub fn interval(period: Duration) -> Interval {$/;"	f
interval	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^mod interval;$/;"	n
interval_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^pub fn interval_at(start: Instant, period: Duration) -> Interval {$/;"	f
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn into_inner(mut self) -> T {$/;"	P	implementation:AsyncFd
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    pub(crate) fn into_inner(mut self) -> io::Result<E> {$/;"	P	implementation:PollEvented
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn into_inner(self) -> R {$/;"	P	implementation:BufReader
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn into_inner(self) -> RW {$/;"	P	implementation:BufStream
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn into_inner(self) -> W {$/;"	P	implementation:BufWriter
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    pub fn into_inner(self) -> (T, U) {$/;"	f
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    pub fn into_inner(self) -> R {$/;"	f
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn into_inner(self) -> R {$/;"	P	implementation:Take
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn into_inner(self) -> T {$/;"	P	implementation:Track
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn into_inner(self) -> T$/;"	P	implementation:Mutex
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn into_inner(mut self) -> Option<T> {$/;"	P	implementation:OnceCell
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn into_inner(self) -> T$/;"	P	implementation:RwLock
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    pub fn into_inner(self) -> T {$/;"	P	implementation:Timeout
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^    pub(crate) fn into_inner(self) -> T {$/;"	P	implementation:SyncWrapper
into_mapped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    pub fn into_mapped(this: Self) -> OwnedRwLockMappedWriteGuard<T> {$/;"	P	implementation:OwnedRwLockWriteGuard
into_mapped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    pub fn into_mapped(this: Self) -> RwLockMappedWriteGuard<'a, T> {$/;"	P	implementation:RwLockWriteGuard
into_notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    pub(super) fn into_notified(self) -> Notified<S> {$/;"	P	implementation:UnownedTask
into_panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub fn into_panic(self) -> Box<dyn Any + Send + 'static> {$/;"	P	implementation:JoinError
into_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn into_raw(this: Arc<Inner>) -> *const () {$/;"	P	implementation:Inner
into_raw_fd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:TcpSocket
into_raw_socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    fn into_raw_socket(self) -> RawSocket {$/;"	P	implementation:TcpSocket
into_read_buf_parts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^pub(crate) fn into_read_buf_parts(rb: ReadBuf<'_>) -> ReadBufParts {$/;"	f
into_split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn into_split(self) -> (OwnedReadHalf, OwnedWriteHalf) {$/;"	P	implementation:TcpStream
into_split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn into_split(self) -> (OwnedReadHalf, OwnedWriteHalf) {$/;"	P	implementation:UnixStream
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn into_std(mut self) -> StdFile {$/;"	P	implementation:File
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn into_std(self) -> io::Result<std::net::TcpListener> {$/;"	P	implementation:TcpListener
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn into_std(self) -> io::Result<std::net::TcpStream> {$/;"	P	implementation:TcpStream
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn into_std(self) -> io::Result<std::net::UdpSocket> {$/;"	P	implementation:UdpSocket
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn into_std(self) -> io::Result<std::os::unix::net::UnixDatagram> {$/;"	P	implementation:UnixDatagram
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn into_std(self) -> io::Result<std::os::unix::net::UnixListener> {$/;"	P	implementation:UnixListener
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn into_std(self) -> io::Result<std::os::unix::net::UnixStream> {$/;"	P	implementation:UnixStream
into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn into_std(self) -> std::time::Instant {$/;"	P	implementation:Instant
into_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn into_task(self) -> Task<S> {$/;"	P	implementation:UnownedTask
into_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    pub(crate) fn into_waker(self) -> Waker {$/;"	P	implementation:UnparkThread
into_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn into_waker(self) -> Waker {$/;"	P	implementation:Waker
into_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn into_waker(self) -> Waker;$/;"	P	interface:WakerRef
invalid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn invalid() -> Error {$/;"	P	implementation:Error
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^    pub mod io {$/;"	n	module:windows
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod io;$/;"	n
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    io: PollEvented<mio_windows::NamedPipe>,$/;"	m	struct:NamedPipeClient
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    io: PollEvented<mio_windows::NamedPipe>,$/;"	m	struct:NamedPipeServer
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn io() -> Self {$/;"	P	implementation:SignalKind
is_already_init_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn is_already_init_err(&self) -> bool {$/;"	P	implementation:SetError
is_at_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn is_at_capacity(&self) -> bool {$/;"	P	implementation:Error
is_at_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn is_at_index(&self, index: usize) -> bool {$/;"	P	implementation:Block
is_cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub fn is_cancelled(&self) -> bool {$/;"	P	implementation:JoinError
is_cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_cancelled(self) -> bool {$/;"	P	implementation:Snapshot
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    is_closed: bool,$/;"	m	struct:Pipe
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    is_closed: bool,$/;"	m	struct:Pointers
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn is_closed(&self) -> bool {$/;"	P	implementation:Inject
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn is_closed(&self) -> bool {$/;"	P	implementation:LocalOwnedTasks
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn is_closed(&self) -> bool {$/;"	P	implementation:Semaphore
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn is_closed(&self) -> bool {$/;"	P	implementation:TryAcquireError
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn is_closed(&self) -> bool {$/;"	P	implementation:Sender
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_closed(&self) -> bool {$/;"	P	implementation:AtomicUsize
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_closed(&self) -> bool {$/;"	P	implementation:usize
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_closed(&self) -> bool;$/;"	P	interface:Semaphore
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn is_closed(&self) -> bool {$/;"	P	implementation:Tx
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn is_closed(&self) -> bool {$/;"	P	implementation:UnboundedSender
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn is_closed(self) -> bool {$/;"	P	implementation:State
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub fn is_closed(&self) -> bool {$/;"	P	implementation:Sender
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn is_closed(&self) -> bool {$/;"	P	implementation:Semaphore
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn is_closed(self) -> bool {$/;"	P	implementation:state::StateSnapshot
is_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn is_closed(&self) -> bool {$/;"	P	implementation:Sender
is_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_complete(self) -> bool {$/;"	P	implementation:Snapshot
is_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn is_complete(self) -> bool {$/;"	P	implementation:State
is_dropped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    is_dropped: Arc<AtomicBool>,$/;"	m	struct:AssertDrop
is_dropped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    is_dropped: Arc<AtomicBool>,$/;"	m	struct:AssertDropHandle
is_elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(crate) fn is_elapsed(&self) -> bool {$/;"	P	implementation:TimerEntry
is_elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    pub fn is_elapsed(&self) -> bool {$/;"	P	implementation:Sleep
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Buf
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub fn is_empty(self) -> bool {$/;"	P	implementation:Ready
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn is_empty(&mut self) -> bool {$/;"	f
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:Inner
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    pub(super) fn is_empty(&self) -> bool {$/;"	P	implementation:Steal
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Inject
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:LocalOwnedTasks
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:OwnedTasks
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:Runtime
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Stack
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:LinkedList
is_entered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/enter.rs	/^    pub(crate) fn is_entered(self) -> bool {$/;"	P	implementation:EnterContext
is_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn is_error(_: Ready) -> bool {$/;"	f	module:sys
is_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn is_error(ready: Ready) -> bool {$/;"	f	module:sys
is_final	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn is_final(&self) -> bool {$/;"	P	implementation:Block
is_hup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn is_hup(_: Ready) -> bool {$/;"	f	module:sys
is_hup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^    pub(crate) fn is_hup(ready: Ready) -> bool {$/;"	f	module:sys
is_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_idle(self) -> bool {$/;"	P	implementation:Snapshot
is_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_idle(&self) -> bool {$/;"	P	implementation:AtomicUsize
is_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_idle(&self) -> bool {$/;"	P	implementation:usize
is_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn is_idle(&self) -> bool;$/;"	P	interface:Semaphore
is_initializing_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn is_initializing_err(&self) -> bool {$/;"	P	implementation:SetError
is_invalid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn is_invalid(&self) -> bool {$/;"	P	implementation:Error
is_join_interested	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_join_interested(self) -> bool {$/;"	P	implementation:Snapshot
is_leader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    pub fn is_leader(&self) -> bool {$/;"	P	implementation:BarrierWaitResult
is_no_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn is_no_permits(&self) -> bool {$/;"	P	implementation:TryAcquireError
is_notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_notified(self) -> bool {$/;"	P	implementation:Snapshot
is_pair_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    pub fn is_pair_of(&self, other: &ReadHalf<T>) -> bool {$/;"	P	implementation:WriteHalf
is_pair_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    pub fn is_pair_of(&self, other: &WriteHalf<T>) -> bool {$/;"	P	implementation:ReadHalf
is_panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub fn is_panic(&self) -> bool {$/;"	P	implementation:JoinError
is_parked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn is_parked(&self, worker_id: usize) -> bool {$/;"	P	implementation:Idle
is_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn is_pending(&self) -> bool {$/;"	P	implementation:StateCell
is_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn is_pending(&self) -> bool {$/;"	P	implementation:TimerHandle
is_read_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub fn is_read_closed(self) -> bool {$/;"	P	implementation:Ready
is_readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    pub const fn is_readable(self) -> bool {$/;"	P	implementation:Interest
is_readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub fn is_readable(self) -> bool {$/;"	P	implementation:Ready
is_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^fn is_ready(bits: usize, slot: usize) -> bool {$/;"	f
is_running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn is_running(self) -> bool {$/;"	P	implementation:Snapshot
is_rx_task_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn is_rx_task_set(self) -> bool {$/;"	P	implementation:State
is_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    is_searching: bool,$/;"	m	struct:Core
is_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    is_shutdown: bool,$/;"	m	struct:Waiters
is_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    is_shutdown: bool,$/;"	m	struct:Core
is_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    pub(super) fn is_shutdown(&self) -> bool {$/;"	P	implementation:Handle
is_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(super) fn is_shutdown(&self) -> bool {$/;"	P	implementation:Inner
is_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn is_shutdown(&self) -> bool {$/;"	P	implementation:Error
is_stealable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    pub(super) fn is_stealable(&self) -> bool {$/;"	P	implementation:Local
is_tx_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^fn is_tx_closed(bits: usize) -> bool {$/;"	f
is_tx_task_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn is_tx_task_set(self) -> bool {$/;"	P	implementation:State
is_unnamed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/socketaddr.rs	/^    pub fn is_unnamed(&self) -> bool {$/;"	P	implementation:SocketAddr
is_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^fn is_unpin<T: Unpin>() {}$/;"	f
is_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^        fn is_unpin<T: Unpin>() {}$/;"	f	method:Acquire::project
is_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^fn is_unpin<T: Unpin>() {}$/;"	f
is_unpin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn is_unpin<T: Unpin>() {}$/;"	f
is_writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    pub const fn is_writable(self) -> bool {$/;"	P	implementation:Interest
is_writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub fn is_writable(self) -> bool {$/;"	P	implementation:Ready
is_write_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    pub fn is_write_closed(self) -> bool {$/;"	P	implementation:Ready
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Cursor
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Vec
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	interface:AsyncWrite
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	f
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:BufReader
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:BufStream
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:BufWriter
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:WriteHalf
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:OwnedWriteHalf
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:WriteHalf
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:OwnedWriteHalf
is_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:UnixStream
issue_3014	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn issue_3014() {$/;"	f	module:test
join	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/join.rs	/^macro_rules! join {$/;"	M
join	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod join;$/;"	n
join_handle_cancel_on_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_shutdown_join.rs	/^fn join_handle_cancel_on_shutdown() {$/;"	f
join_multicast_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn join_multicast_v4(&self, multiaddr: Ipv4Addr, interface: Ipv4Addr) -> io::Result<()> /;"	P	implementation:UdpSocket
join_multicast_v6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket
join_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn join_output() {$/;"	f	module:group_b
keep_alive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    keep_alive: Duration,$/;"	m	struct:Inner
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^            key: &'static LocalKey<Cell<*const ()>>,$/;"	m	struct:ScopedKey::set::Reset
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/kill.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:T
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/kill.rs	/^    fn kill(&mut self) -> io::Result<()>;$/;"	P	interface:Kill
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:test::Mock
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:ChildDropGuard
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub async fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Child
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^mod kill;$/;"	n
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Child
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:StdChild
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:test::MockWait
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	f
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn kill() {$/;"	f	module:test
kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Child
kill_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    kill_on_drop: bool,$/;"	m	struct:ChildDropGuard
kill_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    kill_on_drop: bool,$/;"	m	struct:Command
kill_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn kill_on_drop(&mut self, kill_on_drop: bool) -> &mut Command {$/;"	P	implementation:Command
kills_on_drop_if_specified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn kills_on_drop_if_specified() {$/;"	f	module:test
kind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    kind: Kind,$/;"	m	struct:Builder
last	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) fn last(&self) -> Option<&L::Target> {$/;"	P	implementation:LinkedList
last_exiting_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    last_exiting_thread: Option<thread::JoinHandle<()>>,$/;"	m	struct:Shared
last_write_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    last_write_err: Option<io::ErrorKind>,$/;"	m	struct:Inner
launch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    pub(crate) fn launch(mut self) {$/;"	P	implementation:Launch
least_significant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) const fn least_significant(width: u32) -> Pack {$/;"	P	implementation:Pack
leave_multicast_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn leave_multicast_v4(&self, multiaddr: Ipv4Addr, interface: Ipv4Addr) -> io::Result<()>/;"	P	implementation:UdpSocket
leave_multicast_v6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    pub(in super::super) fn len() -> usize {$/;"	f	module:pool
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Buf
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    len: usize,$/;"	m	struct:ReadBufParts
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:OrphanQueueImpl
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    len: AtomicUsize,$/;"	m	struct:Inject
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Inject
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    len: usize,$/;"	m	struct:Page
level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    level: usize,$/;"	m	struct:Level
level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^mod level;$/;"	n
level_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn level_for(&self, when: u64) -> usize {$/;"	P	implementation:Wheel
level_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^fn level_for(elapsed: u64, when: u64) -> usize {$/;"	f
level_range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^fn level_range(level: usize) -> u64 {$/;"	f
levels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    levels: Vec<Level>,$/;"	m	struct:Wheel
lifo_slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    lifo_slot: Option<Notified>,$/;"	m	struct:Core
limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn limit(&self) -> u64 {$/;"	P	implementation:Take
lines	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^pub(crate) fn lines<R>(reader: R) -> Lines<R>$/;"	f
linger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream
linked_list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/mod.rs	/^pub(crate) mod linked_list;$/;"	n
list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    list: WaitList,$/;"	m	struct:Waiters
list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    list: LinkedList<Task<S>, <Task<S> as Link>::Target>,$/;"	m	struct:OwnedTasksInner
list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod list;$/;"	n
list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    list: list::Rx<T>,$/;"	m	struct:RxFields
list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^pub(super) mod list;$/;"	n
listen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn listen(self, backlog: u32) -> io::Result<TcpListener> {$/;"	P	implementation:TcpSocket
listener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/mod.rs	/^pub(crate) mod listener;$/;"	n
listener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^pub(crate) mod listener;$/;"	n
ll_sem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    ll_sem: ll::Semaphore,$/;"	m	struct:Semaphore
load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn load(&self) -> Snapshot {$/;"	P	implementation:State
load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn load(cell: &AtomicUsize, ordering: Ordering) -> State {$/;"	P	implementation:State
load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn load(cell: &AtomicUsize, order: Ordering) -> State {$/;"	P	implementation:State
load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn load(&self) -> StateSnapshot {$/;"	P	implementation:state::AtomicState
load_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn load_next(&self, ordering: Ordering) -> Option<NonNull<Block<T>>> {$/;"	P	implementation:Block
local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^pub(super) fn local<T: 'static>() -> (Steal<T>, Local<T>) {$/;"	f
local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^            local: &'static LocalKey<T>,$/;"	m	struct:TaskLocalFuture::with_task::Guard
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpListener
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpSocket
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixDatagram
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixListener
local_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixStream
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^        pub(crate) fn lock(&self) -> MutexGuard<'_, T> {$/;"	P	implementation:sync::Mutex
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mutex.rs	/^    pub(crate) fn lock(&self) -> MutexGuard<'_, T> {$/;"	P	implementation:Mutex
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn lock(&self) -> MutexGuard<'_, T> {$/;"	P	implementation:Mutex
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    lock: &'a Mutex<T>,$/;"	m	struct:MutexGuard
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    lock: Arc<Mutex<T>>,$/;"	m	struct:OwnedMutexGuard
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub async fn lock(&self) -> MutexGuard<'_, T> {$/;"	P	implementation:Mutex
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(super) fn lock(&self) -> crate::loom::sync::MutexGuard<'_, InnerState> {$/;"	P	implementation:Inner
lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    lock: &'a TryLock<T>,$/;"	m	struct:LockGuard
lock_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub async fn lock_owned(self: Arc<Self>) -> OwnedMutexGuard<T> {$/;"	P	implementation:Mutex
locked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    locked: AtomicBool,$/;"	m	struct:Inner
locked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    locked: AtomicBool,$/;"	m	struct:TryLock
loom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^mod loom;$/;"	n
loom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^mod loom;$/;"	n
ls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        ls: Option<crate::task::LocalSet>,$/;"	m	struct:test_combination::Rt
macros	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod macros;$/;"	n
main	/home/cht/Rust/listen/src/main.rs	/^async fn main() -> io::Result<()> {$/;"	f
maintenance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn maintenance(&mut self, worker: &Worker) {$/;"	P	implementation:Core
maintenance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn maintenance(&self, mut core: Box<Core>) -> Box<Core> {$/;"	P	implementation:Context
make_fixed_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^fn make_fixed_size<T>(buffer: Box<[T]>) -> Box<[T; LOCAL_QUEUE_CAPACITY]> {$/;"	f
make_future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^async fn make_future(mut rx: Receiver<()>) -> Receiver<()> {$/;"	f
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn map<U, F>(mut this: Self, f: F) -> MappedMutexGuard<'a, U>$/;"	P	implementation:MappedMutexGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn map<U, F>(mut this: Self, f: F) -> MappedMutexGuard<'a, U>$/;"	P	implementation:MutexGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    pub fn map<F, V: ?Sized>(mut this: Self, f: F) -> OwnedRwLockReadGuard<T, V>$/;"	P	implementation:OwnedRwLockReadGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    pub fn map<F, U: ?Sized>(mut this: Self, f: F) -> OwnedRwLockMappedWriteGuard<T, U>$/;"	P	implementation:OwnedRwLockWriteGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    pub fn map<F, V: ?Sized>(mut this: Self, f: F) -> OwnedRwLockMappedWriteGuard<T, V>$/;"	P	implementation:OwnedRwLockMappedWriteGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    pub fn map<F, U: ?Sized>(this: Self, f: F) -> RwLockReadGuard<'a, U>$/;"	P	implementation:RwLockReadGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    pub fn map<F, U: ?Sized>(mut this: Self, f: F) -> RwLockMappedWriteGuard<'a, U>$/;"	P	implementation:RwLockWriteGuard
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    pub fn map<F, U: ?Sized>(mut this: Self, f: F) -> RwLockMappedWriteGuard<'a, U>$/;"	P	implementation:RwLockMappedWriteGuard
mark_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn mark_pending(&self, not_after: u64) -> Result<(), u64> {$/;"	P	implementation:TimerHandle
mark_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    unsafe fn mark_pending(&self, not_after: u64) -> Result<(), u64> {$/;"	P	implementation:StateCell
marker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    marker: marker::PhantomData<&'a mut T>,$/;"	m	struct:MappedMutexGuard
mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    pub(super) fn mask(self) -> Ready {$/;"	P	implementation:Interest
mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(super) fn mask(self) -> Ready {$/;"	P	implementation:Direction
mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    mask: usize,$/;"	m	struct:Shared
mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    mask: usize,$/;"	m	struct:Pack
mask_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^pub(crate) const fn mask_for(n: u32) -> usize {$/;"	f
max_blocking_threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    max_blocking_threads: usize,$/;"	m	struct:Builder
max_blocking_threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn max_blocking_threads(&mut self, val: usize) -> &mut Self {$/;"	P	implementation:Builder
max_buf_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    max_buf_size: usize,$/;"	m	struct:Pipe
max_instances	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    max_instances: DWORD,$/;"	m	struct:ServerOptions
max_instances	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn max_instances(&mut self, instances: usize) -> &mut Self {$/;"	P	implementation:ServerOptions
max_instances	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub max_instances: u32,$/;"	m	struct:PipeInfo
max_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) const fn max_value(&self) -> usize {$/;"	P	implementation:Pack
maybe_changed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^fn maybe_changed<T>($/;"	f
maybe_done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^pub fn maybe_done<Fut: Future>(future: Fut) -> MaybeDone<Fut> {$/;"	f
maybe_done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/mod.rs	/^pub(crate) mod maybe_done;$/;"	n
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn metadata(&self) -> io::Result<Metadata> {$/;"	P	implementation:File
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/metadata.rs	/^pub async fn metadata(path: impl AsRef<Path>) -> io::Result<Metadata> {$/;"	f
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod metadata;$/;"	n
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub async fn metadata(&self) -> io::Result<Metadata> {$/;"	P	implementation:DirEntry
might_be_registered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn might_be_registered(&self) -> bool {$/;"	P	implementation:StateCell
might_be_registered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn might_be_registered(&self) -> bool {$/;"	P	implementation:TimerShared
minwinbase	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^    pub mod minwinbase {$/;"	n	module:um
mio_windows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub(super) mod mio_windows {$/;"	n	module:doc
missed_tick_behavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    missed_tick_behavior: MissedTickBehavior,$/;"	m	struct:Interval
missed_tick_behavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    pub fn missed_tick_behavior(&self) -> MissedTickBehavior {$/;"	P	implementation:Interval
mk_pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^fn mk_pool(num_threads: usize) -> Runtime {$/;"	f
mk_runtime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_blocking.rs	/^fn mk_runtime(num_threads: usize) -> Runtime {$/;"	f
mock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^    fn mock() -> Box<dyn Unpark> {$/;"	P	implementation:MockUnpark
mock_open_options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^mod mock_open_options;$/;"	n
mocked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mod.rs	/^mod mocked;$/;"	n
mocks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod mocks;$/;"	n
mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub mode: PipeMode,$/;"	m	struct:PipeInfo
model	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn model(f: impl Fn() + Send + Sync + 'static) {$/;"	f
mr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    mr: u32,$/;"	m	struct:RwLock
multi_stealer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_queue.rs	/^fn multi_stealer() {$/;"	f
multicast_loop_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket
multicast_loop_v6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket
multicast_ttl_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket
mut_load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^fn mut_load(this: &mut AtomicUsize) -> usize {$/;"	f
mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod mutex;$/;"	n
mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    mutex: Mutex<()>,$/;"	m	struct:Inner
mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    mutex: Mutex<()>,$/;"	m	struct:Inner
mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn mutex(this: &Self) -> &'a Mutex<T> {$/;"	P	implementation:MutexGuard
mutex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn mutex(this: &Self) -> &Arc<Mutex<T>> {$/;"	P	implementation:OwnedMutexGuard
my_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    my_index: usize,$/;"	m	struct:WorkerStatsBatcher
my_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^    async fn my_task(mut signal: Signals, task: CombiTask, out: CombiOutput) -> Output {$/;"	f	function:test_combination
n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    n: usize,$/;"	m	struct:Barrier
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    name: Option<&'a str>,$/;"	m	struct:Builder
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    pub fn name(&self, name: &'a str) -> Self {$/;"	P	implementation:Builder
named_pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/mod.rs	/^pub mod named_pipe;$/;"	n
named_pipe_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^unsafe fn named_pipe_info(handle: RawHandle) -> io::Result<PipeInfo> {$/;"	f
need_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    need_flush: bool,$/;"	m	struct:Blocking
need_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    need_flush: bool,$/;"	m	struct:CopyBuffer
net	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod net;$/;"	n
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^    pub fn new() -> Self {$/;"	P	implementation:DirBuilder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn new(inner: T) -> io::Result<Self>$/;"	P	implementation:AsyncFd
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    pub(crate) fn new() -> io::Result<Driver> {$/;"	P	implementation:Driver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    pub(crate) fn new(io: E) -> io::Result<Self> {$/;"	P	implementation:PollEvented
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn new(buf: &'a mut [u8]) -> ReadBuf<'a> {$/;"	P	implementation:ReadBuf
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn new() -> Self {$/;"	P	implementation:tests::LoggingMockWriter
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    pub(crate) fn new(inner: W) -> Self {$/;"	P	implementation:SplitByUtf8BoundaryIfWindows
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn new(inner: R) -> Self {$/;"	P	implementation:BufReader
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn new(stream: RW) -> BufStream<RW> {$/;"	P	implementation:BufStream
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn new(inner: W) -> Self {$/;"	P	implementation:BufWriter
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    pub(super) fn new() -> Self {$/;"	P	implementation:CopyBuffer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn new(max_buf_size: usize) -> Self {$/;"	P	implementation:Pipe
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn new(mut vec: V) -> Self {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^        pub(crate) fn new(t: T) -> Mutex<T> {$/;"	P	implementation:sync::Mutex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_ptr.rs	/^    pub(crate) fn new(ptr: *mut T) -> AtomicPtr<T> {$/;"	P	implementation:AtomicPtr
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    pub(crate) const fn new(val: u16) -> AtomicU16 {$/;"	P	implementation:AtomicU16
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u32.rs	/^    pub(crate) const fn new(val: u32) -> AtomicU32 {$/;"	P	implementation:AtomicU32
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u8.rs	/^    pub(crate) const fn new(val: u8) -> AtomicU8 {$/;"	P	implementation:AtomicU8
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    pub(crate) const fn new(val: usize) -> AtomicUsize {$/;"	P	implementation:AtomicUsize
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mutex.rs	/^    pub(crate) fn new(t: T) -> Mutex<T> {$/;"	P	implementation:Mutex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn new() -> Condvar {$/;"	P	implementation:Condvar
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn new(t: T) -> Mutex<T> {$/;"	P	implementation:Mutex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn new(t: T) -> RwLock<T> {$/;"	P	implementation:RwLock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/unsafe_cell.rs	/^    pub(crate) const fn new(data: T) -> UnsafeCell<T> {$/;"	P	implementation:UnsafeCell
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub(crate) fn new(listener: mio::net::TcpListener) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(crate) fn new(connected: mio::net::TcpStream) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    fn new(socket: mio::net::UdpSocket) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    fn new(socket: mio::net::UnixDatagram) -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub(crate) fn new(stream: mio::net::UnixStream) -> io::Result<UnixStream> {$/;"	P	implementation:UnixStream
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn new() -> Self {$/;"	P	implementation:ClientOptions
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn new() -> ServerOptions {$/;"	P	implementation:ServerOptions
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    pub(crate) fn new() -> CachedParkThread {$/;"	P	implementation:CachedParkThread
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:ParkThread
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn new() -> Self {$/;"	P	implementation:test::Mock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn new<S: AsRef<OsStr>>(program: S) -> Command {$/;"	P	implementation:Command
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    pub(crate) fn new(park: SignalDriver) -> Self {$/;"	P	implementation:Driver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        fn new(num_wait_until_status: usize) -> Self {$/;"	P	implementation:test::MockWait
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        pub(crate) fn new() -> Self {$/;"	P	implementation:test::MockQueue
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:OrphanQueueImpl
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn new(status: ExitStatus, num_wait_until_status: usize) -> Self {$/;"	P	implementation:test::MockWait
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn new(values: Vec<Option<()>>) -> Self {$/;"	P	implementation:test::MockStream
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    pub(crate) fn new(inner: W, orphan_queue: Q, signal: S) -> Self {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    pub(crate) fn new(park: P) -> BasicScheduler<P> {$/;"	P	implementation:BasicScheduler
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    pub(crate) fn new(builder: &Builder, thread_cap: usize) -> BlockingPool {$/;"	P	implementation:BlockingPool
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^    pub(crate) fn new(func: T) -> BlockingTask<T> {$/;"	P	implementation:BlockingTask
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub(crate) fn new(kind: Kind) -> Builder {$/;"	P	implementation:Builder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    pub(crate) fn new(cfg: Cfg) -> io::Result<(Self, Resources)> {$/;"	P	implementation:Driver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    pub(crate) fn new(driver: Driver) -> Parker {$/;"	P	implementation:Parker
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn new(_my_index: usize) -> Self {$/;"	P	implementation:WorkerStatsBatcher
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn new(_worker_threads: usize) -> Self {$/;"	P	implementation:RuntimeStats
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn new(my_index: usize) -> Self {$/;"	P	implementation:WorkerStatsBatcher
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn new(worker_threads: usize) -> Self {$/;"	P	implementation:RuntimeStats
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn new(future: T, scheduler: S, state: State) -> Box<Cell<T, S>> {$/;"	P	implementation:Cell
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn new() -> Inject<T> {$/;"	P	implementation:Inject
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    pub(super) fn new(raw: RawTask) -> JoinHandle<T> {$/;"	P	implementation:JoinHandle
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:LocalOwnedTasks
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:OwnedTasks
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn new<T, S>(task: T, scheduler: S) -> RawTask$/;"	P	implementation:RawTask
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn new() -> State {$/;"	P	implementation:State
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^        pub(super) fn new(value: T) -> Self {$/;"	P	implementation:atomic_take::AtomicTake
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn new(sender: oneshot::Sender<T>) -> Self {$/;"	P	implementation:AtomicOneshot
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn new() -> (Self, AssertDropHandle) {$/;"	P	implementation:AssertDrop
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn new(rt: CombiRuntime, ls: CombiLocalSet) -> Self {$/;"	P	implementation:test_combination::Rt
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    pub(super) fn new(data: Option<Box<T>>) -> AtomicCell<T> {$/;"	P	implementation:AtomicCell
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn new(num_workers: usize) -> State {$/;"	P	implementation:State
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn new(num_workers: usize) -> Idle {$/;"	P	implementation:Idle
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn new(size: usize, parker: Parker) -> (ThreadPool, Launch) {$/;"	P	implementation:ThreadPool
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^    fn new(rx: Receiver<()>) -> Self {$/;"	P	implementation:RxFuture
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn new(storage: S) -> Self {$/;"	P	implementation:Registry
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    pub(crate) fn new<F>(future: F) -> Self$/;"	P	implementation:ReusableBoxFuture
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    pub(crate) fn new(park: IoDriver) -> io::Result<Self> {$/;"	P	implementation:Driver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^fn new(signum: DWORD) -> io::Result<RxFuture> {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    pub fn new(mut n: usize) -> Barrier {$/;"	P	implementation:Barrier
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn new(num_permits: u32) -> Self {$/;"	P	implementation:Waiter
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn new(semaphore: &'a Semaphore, num_permits: u32) -> Self {$/;"	P	implementation:Acquire
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn new(permits: usize) -> Self {$/;"	P	implementation:Semaphore
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn new(receiver: &'a mut Receiver<T>) -> Recv<'a, T> {$/;"	P	implementation:Recv
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn new(start_index: usize) -> Block<T> {$/;"	P	implementation:Block
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub(crate) fn new(chan: chan::Rx<T, Semaphore>) -> Receiver<T> {$/;"	P	implementation:Receiver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub(crate) fn new(chan: chan::Tx<T, Semaphore>) -> Sender<T> {$/;"	P	implementation:Sender
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn new(chan: Arc<Chan<T, S>>) -> Rx<T, S> {$/;"	P	implementation:Rx
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn new(chan: Arc<Chan<T, S>>) -> Tx<T, S> {$/;"	P	implementation:Tx
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub(crate) fn new(chan: chan::Rx<T, Semaphore>) -> UnboundedReceiver<T> {$/;"	P	implementation:UnboundedReceiver
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub(crate) fn new(chan: chan::Tx<T, Semaphore>) -> UnboundedSender<T> {$/;"	P	implementation:UnboundedSender
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn new(t: T) -> Self$/;"	P	implementation:Mutex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pub fn new() -> Notify {$/;"	P	implementation:Notify
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn new() -> Self {$/;"	P	implementation:OnceCell
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn new() -> State {$/;"	P	implementation:State
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn new(value: T) -> RwLock<T>$/;"	P	implementation:RwLock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn new(permits: usize) -> Self {$/;"	P	implementation:Semaphore
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    pub(crate) fn new() -> AtomicWaker {$/;"	P	implementation:AtomicWaker
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^    fn new(tx: &'a mut oneshot::Sender<i32>) -> Self {$/;"	P	implementation:OnClose
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn new() -> Self {$/;"	P	implementation:state::AtomicState
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Builder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    pub fn new() -> LocalSet {$/;"	P	implementation:LocalSet
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn new() -> Self {$/;"	P	implementation:StateCell
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn new() -> Self {$/;"	P	implementation:TimerSharedPadded
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(crate) fn new(handle: &Handle, deadline: Instant) -> Self {$/;"	P	implementation:TimerEntry
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn new() -> Self {$/;"	P	implementation:TimerShared
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    pub(super) fn new(inner: Arc<super::Inner>) -> Self {$/;"	P	implementation:Handle
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn new(driver: &Driver<P>) -> TimerUnpark<P> {$/;"	P	implementation:TimerUnpark
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(crate) fn new(park: P, clock: Clock) -> Driver<P> {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn new(clock: Clock) -> Self {$/;"	P	implementation:ClockTime
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn new(time_source: ClockTime, unpark: Box<dyn Unpark>) -> Self {$/;"	P	implementation:Inner
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    pub(crate) fn new(level: usize) -> Level {$/;"	P	implementation:Level
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) fn new() -> Wheel {$/;"	P	implementation:Wheel
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Elapsed
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) const fn new() -> LinkedList<L, T> {$/;"	P	implementation:LinkedList
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) fn new() -> Pointers<T> {$/;"	P	implementation:Pointers
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    pub(crate) fn new(t: T) -> CachePadded<T> {$/;"	P	implementation:CachePadded
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^    pub(crate) fn new(seed: u64) -> FastRand {$/;"	P	implementation:FastRand
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pub(crate) fn new() -> Slab<T> {$/;"	P	implementation:Slab
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^    pub(crate) fn new(value: T) -> Self {$/;"	P	implementation:SyncWrapper
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    pub(crate) const fn new(data: T) -> TryLock<T> {$/;"	P	implementation:TryLock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    pub(crate) fn new(data: T) -> TryLock<T> {$/;"	P	implementation:TryLock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^macro_rules! new {$/;"	M
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:WakeList
new_current_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn new_current_thread() -> Builder {$/;"	P	implementation:Builder
new_multi_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn new_multi_thread() -> Builder {$/;"	P	implementation:Builder
new_receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^fn new_receiver<T>(shared: Arc<Shared<T>>) -> Receiver<T> {$/;"	f
new_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    pub(crate) fn new_timeout(deadline: Instant) -> Sleep {$/;"	P	implementation:Sleep
new_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn new_v4() -> io::Result<TcpSocket> {$/;"	P	implementation:TcpSocket
new_v6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn new_v6() -> io::Result<TcpSocket> {$/;"	P	implementation:TcpSocket
new_with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn new_with(value: Option<T>) -> Self {$/;"	P	implementation:OnceCell
new_with_delay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    pub(crate) fn new_with_delay(value: T, delay: Sleep) -> Timeout<T> {$/;"	P	implementation:Timeout
new_with_handle_and_interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub(crate) fn new_with_handle_and_interest($/;"	P	implementation:AsyncFd
new_with_interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    pub(crate) fn new_with_interest(io: E, interest: Interest) -> io::Result<Self> {$/;"	P	implementation:PollEvented
new_with_interest_and_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn new_with_interest_and_handle($/;"	P	implementation:Registration
new_with_interest_and_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    pub(crate) fn new_with_interest_and_handle($/;"	P	implementation:PollEvented
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^            fn next(&mut self) -> Option<task::Notified<T>> {$/;"	P	implementation:Local::push_overflow::BatchTaskIter
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    next: u64,$/;"	m	struct:Receiver
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    next: AtomicPtr<Block<T>>,$/;"	m	struct:Block
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    next: Option<NonNull<T>>,$/;"	m	struct:PointersInner
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    next: u32,$/;"	m	struct:Slot
next_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub async fn next_entry(&mut self) -> io::Result<Option<DirEntry>> {$/;"	P	implementation:ReadDir
next_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    pub(crate) fn next_expiration(&self, now: u64) -> Option<Expiration> {$/;"	P	implementation:Level
next_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn next_expiration(&self) -> Option<Expiration> {$/;"	P	implementation:Wheel
next_expiration_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(super) fn next_expiration_time(&self) -> Option<u64> {$/;"	P	implementation:Wheel
next_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    pub async fn next_line(&mut self) -> io::Result<Option<String>> {$/;"	f
next_local_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn next_local_task(&mut self) -> Option<Notified> {$/;"	P	implementation:Core
next_occupied_slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    fn next_occupied_slot(&self, now: u64) -> Option<usize> {$/;"	P	implementation:Level
next_segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^    pub async fn next_segment(&mut self) -> io::Result<Option<Vec<u8>>> {$/;"	f
next_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn next_task(&self) -> task::Notified<Runtime> {$/;"	P	implementation:Runtime
next_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn next_task(&mut self, worker: &Worker) -> Option<Notified> {$/;"	P	implementation:Core
next_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn next_task(&self) -> Option<task::LocalNotified<Arc<Shared>>> {$/;"	P	implementation:LocalSet
next_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    fn next_timeout(&self, timeout: Instant, now: Instant, period: Duration) -> Instant {$/;"	P	implementation:MissedTickBehavior
next_wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    next_wake: Option<NonZeroU64>,$/;"	m	struct:InnerState
no_compaction_if_page_still_in_use	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn no_compaction_if_page_still_in_use() {$/;"	f	module:test
no_expirations_before	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn no_expirations_before(&self, start_level: usize, before: u64) -> bool {$/;"	P	implementation:Wheel
no_kill_if_already_killed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn no_kill_if_already_killed() {$/;"	f	module:test
no_kill_if_reaped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn no_kill_if_reaped() {$/;"	f	module:test
no_kill_on_drop_by_default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn no_kill_on_drop_by_default() {$/;"	f	module:test
no_reap_if_no_signal_received	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn no_reap_if_no_signal_received() {$/;"	f	module:test
no_reap_if_signal_lock_held	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn no_reap_if_signal_lock_held() {$/;"	f	module:test
node	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    node: Waiter,$/;"	m	struct:Acquire
nodelay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream
noop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^unsafe fn noop(_data: *const ()) {}$/;"	f
noop_clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^unsafe fn noop_clone(_data: *const ()) -> RawWaker {$/;"	f
notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    notified: Option<NotificationType>,$/;"	m	struct:Waiter
notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pub fn notified(&self) -> Notified<'_> {$/;"	P	implementation:Notify
notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    notify: Notify,$/;"	m	struct:BasicScheduler
notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    notify: Notify,$/;"	m	struct:Inner
notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    notify: &'a Notify,$/;"	m	struct:Notified
notify_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn notify_all(&self) {$/;"	P	implementation:Condvar
notify_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn notify_all(&self) {$/;"	P	implementation:Shared
notify_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_notify.rs	/^fn notify_drop() {$/;"	f
notify_if_work_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn notify_if_work_pending(&self) {$/;"	P	implementation:Shared
notify_locked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn notify_locked(waiters: &mut WaitList, state: &AtomicUsize, curr: usize) -> Option<Waker> {$/;"	f
notify_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_notify.rs	/^fn notify_multi() {$/;"	f
notify_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn notify_one(&self) {$/;"	P	implementation:Condvar
notify_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Notify
notify_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_notify.rs	/^fn notify_one() {$/;"	f
notify_parked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn notify_parked(&self) {$/;"	P	implementation:Shared
notify_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn notify_rx(&mut self) {$/;"	P	implementation:Tail
notify_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    notify_rx: Notify,$/;"	m	struct:Shared
notify_rx_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    notify_rx_closed: Notify,$/;"	m	struct:Chan
notify_should_wakeup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn notify_should_wakeup(&self) -> bool {$/;"	P	implementation:Idle
notify_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    notify_tx: Notify,$/;"	m	struct:Shared
notify_waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pub fn notify_waiters(&self) {$/;"	P	implementation:Notify
notify_waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_notify.rs	/^fn notify_waiters() {$/;"	f
notify_waiters_and_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_notify.rs	/^fn notify_waiters_and_one() {$/;"	f
now	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn now(&self) -> u64 {$/;"	P	implementation:ClockTime
now	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn now() -> Instant {$/;"	P	implementation:Instant
now	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub(super) fn now() -> Instant {$/;"	f	module:variant
num	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_atomic_waker.rs	/^    num: AtomicUsize,$/;"	m	struct:Chan
num_cpus	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^    pub(crate) fn num_cpus() -> usize {$/;"	f	module:sys
num_cpus	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^    pub(crate) fn num_cpus() -> usize {$/;"	f	module:sys
num_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    num_idle: u32,$/;"	m	struct:Shared
num_initialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    num_initialized: usize,$/;"	m	struct:VecWithInitialized
num_kills	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        num_kills: usize,$/;"	m	struct:test::Mock
num_notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    num_notify: u32,$/;"	m	struct:Shared
num_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    num_permits: u32,$/;"	m	struct:Acquire
num_polls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        num_polls: usize,$/;"	m	struct:test::Mock
num_polls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^    num_polls: Arc<AtomicUsize>,$/;"	m	struct:BlockedFuture
num_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn num_searching(self) -> usize {$/;"	P	implementation:State
num_th	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    num_th: usize,$/;"	m	struct:Shared
num_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    num_tx: AtomicUsize,$/;"	m	struct:Shared
num_unparked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn num_unparked(self) -> usize {$/;"	P	implementation:State
num_wait_until_status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        num_wait_until_status: usize,$/;"	m	struct:test::MockWait
num_wait_until_status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        num_wait_until_status: usize,$/;"	m	struct:test::MockWait
num_workers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    num_workers: usize,$/;"	m	struct:Idle
observed_tail_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    observed_tail_position: UnsafeCell<usize>,$/;"	m	struct:Block
observed_tail_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) fn observed_tail_position(&self) -> Option<usize> {$/;"	P	implementation:Block
occupied	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    occupied: u64,$/;"	m	struct:Level
occupied_bit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^fn occupied_bit(slot: usize) -> u64 {$/;"	f
offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^pub(crate) fn offset(slot_index: usize) -> usize {$/;"	f
ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^pub(crate) fn ok<T, E>(t: T) -> Ready<Result<T, E>> {$/;"	f
on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        on_drop: Option<oneshot::Sender<()>>,$/;"	m	struct:test_combination::FutWrapper
on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        on_drop: Option<oneshot::Sender<()>>,$/;"	m	struct:test_combination::Output
on_first_poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        on_first_poll: Option<oneshot::Sender<()>>,$/;"	m	struct:test_combination::Signals
on_output_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        on_output_drop: Option<oneshot::Sender<()>>,$/;"	m	struct:test_combination::Signals
on_thread_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn on_thread_start<F>(&mut self, f: F) -> &mut Self$/;"	P	implementation:Builder
on_thread_stop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn on_thread_stop<F>(&mut self, f: F) -> &mut Self$/;"	P	implementation:Builder
one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^    one: Cell<u32>,$/;"	m	struct:FastRand
only_blocking_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn only_blocking_inner(first_pending: bool) {$/;"	f	module:group_a
only_blocking_with_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn only_blocking_with_pending() {$/;"	f	module:group_a
only_blocking_without_pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn only_blocking_without_pending() {$/;"	f	module:group_a
open	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {$/;"	P	implementation:File
open	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub async fn open(&self, path: impl AsRef<Path>) -> io::Result<File> {$/;"	P	implementation:OpenOptions
open	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn open(&self, addr: impl AsRef<OsStr>) -> io::Result<NamedPipeClient> {$/;"	P	implementation:ClientOptions
open_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    open_mode: DWORD,$/;"	m	struct:ServerOptions
open_options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod open_options;$/;"	n
open_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn open_read() {$/;"	f
open_set_len_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn open_set_len_err() {$/;"	f
open_set_len_ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn open_set_len_ok() {$/;"	f
open_with_security_attributes_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub unsafe fn open_with_security_attributes_raw($/;"	P	implementation:ClientOptions
open_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn open_write() {$/;"	f
orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) mod orphan;$/;"	n
orphan_queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    orphan_queue: Q,$/;"	m	struct:Reaper
os	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/mod.rs	/^pub mod os;$/;"	n
os	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^mod os {$/;"	n
out_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    out_buffer_size: DWORD,$/;"	m	struct:ServerOptions
out_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn out_buffer_size(&mut self, buffer: u32) -> &mut Self {$/;"	P	implementation:ServerOptions
out_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub out_buffer_size: u32,$/;"	m	struct:PipeInfo
output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn output(&mut self) -> impl Future<Output = io::Result<Output>> {$/;"	P	implementation:Command
output_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    pub fn output_mut(self: Pin<&mut Self>) -> Option<&mut Fut::Output> {$/;"	P	implementation:MaybeDone
overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^fn overflow() {$/;"	f
owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    owned: OwnedTasks<Arc<Shared>>,$/;"	m	struct:Shared
owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    owned: OwnedTasks<Runtime>,$/;"	m	struct:Inner
owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    owned: OwnedTasks<Arc<Shared>>,$/;"	m	struct:Shared
owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    owned: LocalOwnedTasks<Arc<Shared>>,$/;"	m	struct:Context
owned_read_guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod owned_read_guard;$/;"	n
owned_write_guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod owned_write_guard;$/;"	n
owned_write_guard_mapped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod owned_write_guard_mapped;$/;"	n
pack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^fn pack(steal: u16, real: u16) -> u32 {$/;"	f
pack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) fn pack(&self, value: usize, base: usize) -> usize {$/;"	P	implementation:Pack
pack_lossy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) fn pack_lossy(&self, value: usize, base: usize) -> usize {$/;"	P	implementation:Pack
page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn page(self) -> usize {$/;"	P	implementation:Address
page	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    page: *const Page<T>,$/;"	m	struct:Value
pages	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pages: [Arc<Page<T>>; NUM_PAGES],$/;"	m	struct:Allocator
pages	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    pages: [Arc<Page<T>>; NUM_PAGES],$/;"	m	struct:Slab
pair	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn pair() -> io::Result<(UnixDatagram, UnixDatagram)> {$/;"	P	implementation:UnixDatagram
pair	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn pair() -> io::Result<(UnixStream, UnixStream)> {$/;"	P	implementation:UnixStream
panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub(crate) fn panic(err: Box<dyn Any + Send + 'static>) -> JoinError {$/;"	P	implementation:JoinError
panic_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        panic_on_drop: bool,$/;"	m	struct:test_combination::FutWrapper
panic_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        panic_on_drop: bool,$/;"	m	struct:test_combination::Output
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn park(&mut self) -> io::Result<()> {$/;"	P	implementation:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^mod park;$/;"	n
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	f
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn park(&mut self) -> Result<(), Self::Error>;$/;"	P	interface:Park
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:CachedParkThread
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:ParkThread
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park(&self) {$/;"	P	implementation:Inner
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    park: SignalDriver,$/;"	m	struct:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    park: P,$/;"	m	struct:Inner
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:Parker
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn park(&self) {$/;"	P	implementation:Inner
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn park(&self, mut core: Box<Core>) -> Box<Core> {$/;"	P	implementation:Context
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    park: Option<Parker>,$/;"	m	struct:Core
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    park: IoDriver,$/;"	m	struct:Driver
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn park(&mut self) -> Result<(), Self::Error> {$/;"	f
park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    park: P,$/;"	m	struct:Driver
park_condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn park_condvar(&self) {$/;"	P	implementation:Inner
park_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    park_count: AtomicU64,$/;"	m	struct:WorkerStats
park_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    park_count: u64,$/;"	m	struct:WorkerStatsBatcher
park_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub fn park_count(&self) -> u64 {$/;"	P	implementation:WorkerStats
park_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn park_driver(&self, driver: &mut Driver) {$/;"	P	implementation:Inner
park_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn park_internal(&mut self, limit: Option<Duration>) -> Result<(), P::Error> {$/;"	f
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn park_timeout(&mut self, duration: Duration) -> io::Result<()> {$/;"	P	implementation:Driver
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	f
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error>;$/;"	P	interface:Park
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:CachedParkThread
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:ParkThread
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn park_timeout(&self, dur: Duration) {$/;"	P	implementation:Inner
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:Parker
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn park_timeout(&self, mut core: Box<Core>, duration: Option<Duration>) -> Box<Core> {$/;"	P	implementation:Context
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	P	implementation:Driver
park_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn park_timeout(&mut self, duration: Duration) -> Result<(), Self::Error> {$/;"	f
parking_lot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod parking_lot;$/;"	n
partial_read_set_len_ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn partial_read_set_len_ok() {$/;"	f
path	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    pub async fn peek(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:ReadHalf
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    pub async fn peek(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:OwnedReadHalf
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub async fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream
peek_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket
peer_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream
peer_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixDatagram
peer_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixStream
peer_cred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn peer_cred(&self) -> io::Result<UCred> {$/;"	P	implementation:UnixStream
pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    pending: AtomicBool,$/;"	m	struct:EventInfo
pending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pending: EntryList,$/;"	m	struct:Wheel
period	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    period: Duration,$/;"	m	struct:Interval
period	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    pub fn period(&self) -> Duration {$/;"	P	implementation:Interval
permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    permits: AtomicUsize,$/;"	m	struct:Semaphore
permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    permits: u32,$/;"	m	struct:OwnedSemaphorePermit
permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    permits: u32,$/;"	m	struct:SemaphorePermit
pid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pid: Option<pid_t>,$/;"	m	struct:UCred
pid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub fn pid(&self) -> Option<pid_t> {$/;"	P	implementation:UCred
pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^mod pin;$/;"	n
pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/pin.rs	/^macro_rules! pin {$/;"	M
pipe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn pipe() -> Self {$/;"	P	implementation:SignalKind
pipe_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pipe_mode: DWORD,$/;"	m	struct:ServerOptions
pipe_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn pipe_mode(&mut self, pipe_mode: PipeMode) -> &mut Self {$/;"	P	implementation:ServerOptions
pointer_width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^pub(crate) const fn pointer_width() -> u32 {$/;"	f
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pointers: Mutex<Pointers>,$/;"	m	struct:Inject
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    unsafe fn pointers(target: NonNull<Header>) -> NonNull<linked_list::Pointers<Header>> {$/;"	P	implementation:Task
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pointers: linked_list::Pointers<Waiter>,$/;"	m	struct:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    unsafe fn pointers(mut target: NonNull<Waiter>) -> NonNull<linked_list::Pointers<Waiter>> {$/;"	P	implementation:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pointers: linked_list::Pointers<Waiter>,$/;"	m	struct:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    unsafe fn pointers(mut target: NonNull<Waiter>) -> NonNull<linked_list::Pointers<Waiter>> {$/;"	P	implementation:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    pointers: linked_list::Pointers<Waiter>,$/;"	m	struct:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    unsafe fn pointers(mut target: NonNull<Waiter>) -> NonNull<linked_list::Pointers<Waiter>> {$/;"	P	implementation:Waiter
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pointers: StdUnsafeCell<linked_list::Pointers<TimerShared>>,$/;"	m	struct:TimerSharedPadded
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    unsafe fn pointers($/;"	P	implementation:TimerShared
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        pointers: Pointers<Entry>,$/;"	m	struct:tests::Entry
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        unsafe fn pointers(mut target: NonNull<Entry>) -> NonNull<Pointers<Entry>> {$/;"	P	implementation:tests::Entry
pointers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    unsafe fn pointers(target: NonNull<Self::Target>) -> NonNull<Pointers<Self::Target>>;$/;"	P	interface:Link
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:JoinHandle
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:MaybeDone
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/ready.rs	/^    fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {$/;"	P	implementation:Ready
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/try_join.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    poll: mio::Poll,$/;"	m	struct:Driver
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/seek.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_buf.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/fill_buf.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:FillBuf
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/flush.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_buf.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_exact.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:ReadLine
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_string.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_until.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:ReadUntil
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/shutdown.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all_buf.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_buf.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_vectored.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<usize>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:test::Mock
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Child
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Child
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/task.rs	/^    fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<R> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn poll(&self, mut cx: Context<'_>) -> Poll<T::Output> {$/;"	P	implementation:CoreStage
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn poll(self) {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/join.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:JoinHandle
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn poll(self) {$/;"	P	implementation:RawTask
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn poll<T: Future, S: Schedule>(ptr: NonNull<Header>) {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:BlockedFuture
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Track
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<F::Output> {$/;"	P	implementation:test_combination::FutWrapper
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^        fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<u32> {$/;"	P	implementation:test::ZeroSizedFuture
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {$/;"	P	implementation:ReusableBoxFuture
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    pub(crate) fn poll(&mut self, cx: &mut Context<'_>) -> Poll<T> {$/;"	P	implementation:ReusableBoxFuture
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Acquire
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<T, RecvError>> {$/;"	f
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {$/;"	P	implementation:Notified
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Receiver
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<bool> {$/;"	P	implementation:OnClose
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut std::task::Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:LocalSet
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut std::task::Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:RunUntil
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:TaskLocalFuture
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn poll(&self, waker: &Waker) -> Poll<TimerResult> {$/;"	P	implementation:StateCell
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut task::Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:Sleep
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) fn poll(&mut self, now: u64) -> Option<TimerHandle> {$/;"	P	implementation:Wheel
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^    fn poll(self: Pin<&mut Self>, cx: &mut task::Context<'_>) -> Poll<Self::Output> {$/;"	f
poll_accept	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn poll_accept(&self, cx: &mut Context<'_>) -> Poll<io::Result<(TcpStream, SocketAddr)>>/;"	P	implementation:TcpListener
poll_accept	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn poll_accept(&self, cx: &mut Context<'_>) -> Poll<io::Result<(UnixStream, SocketAddr)>/;"	P	implementation:UnixListener
poll_acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn poll_acquire($/;"	P	implementation:Semaphore
poll_acquire_many_available	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn poll_acquire_many_available() {$/;"	f
poll_acquire_many_unavailable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn poll_acquire_many_unavailable() {$/;"	f
poll_acquire_one_available	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn poll_acquire_one_available() {$/;"	f
poll_acquire_one_unavailable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn poll_acquire_one_unavailable() {$/;"	f
poll_acquire_one_zero_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn poll_acquire_one_zero_permits() {$/;"	f
poll_and_cancel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^    async fn poll_and_cancel(semaphore: Arc<Semaphore>) {$/;"	f	function:concurrent_cancel
poll_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) fn poll_at(&self) -> Option<u64> {$/;"	P	implementation:Wheel
poll_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub fn poll_closed(&mut self, cx: &mut Context<'_>) -> Poll<()> {$/;"	P	implementation:Sender
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_complete(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	P	implementation:File
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn poll_complete(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	P	implementation:Cursor
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn poll_complete(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	f
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn poll_complete(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>>;$/;"	P	interface:AsyncSeek
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_complete(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	P	implementation:BufReader
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_complete(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	P	implementation:BufStream
poll_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_complete(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<u64>> {$/;"	P	implementation:BufWriter
poll_copy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    pub(super) fn poll_copy<R, W>($/;"	P	implementation:CopyBuffer
poll_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    poll_count: AtomicU64,$/;"	m	struct:WorkerStats
poll_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    poll_count: u64,$/;"	m	struct:WorkerStatsBatcher
poll_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub fn poll_count(&self) -> u64 {$/;"	P	implementation:WorkerStats
poll_drop_handle_then_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn poll_drop_handle_then_drop() {$/;"	f	module:group_b
poll_elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(crate) fn poll_elapsed($/;"	P	implementation:TimerEntry
poll_elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    fn poll_elapsed(self: Pin<&mut Self>, cx: &mut task::Context<'_>) -> Poll<Result<(), Error>>/;"	P	implementation:Sleep
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:Cursor
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:u8
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	f
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>>;$/;"	P	interface:AsyncBufRead
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:BufReader
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:BufStream
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:BufWriter
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	f
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:Empty
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&[u8]>> {$/;"	P	implementation:Take
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_flush(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>> {$/;"	P	implementation:Inner
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>/;"	P	implementation:File
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:Cursor
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:Vec
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>;$/;"	P	interface:AsyncWrite
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	f
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>/;"	f
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>> {$/;"	P	implementation:WriteHalf
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>/;"	P	implementation:Stderr
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Result<(), io::Error>/;"	P	implementation:tests::LoggingMockWriter
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Result<(), io::Error>/;"	P	implementation:tests::TextMockWriter
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    fn poll_flush($/;"	f
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>/;"	P	implementation:Stdout
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufReader
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufStream
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_flush(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufWriter
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_flush($/;"	P	implementation:DuplexStream
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut task::Context<'_>) -> Poll<std::io::Result<()>> /;"	P	implementation:Pipe
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Result<(), io::Error>> {$/;"	P	implementation:Sink
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:WriteHalf
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:OwnedWriteHalf
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:TcpStream
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:WriteHalf
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:OwnedWriteHalf
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:UnixStream
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeClient
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeServer
poll_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll_flush(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:ChildStdin
poll_fn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/mod.rs	/^mod poll_fn;$/;"	n
poll_fn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/poll_fn.rs	/^pub fn poll_fn<T, F>(f: F) -> PollFn<F>$/;"	f
poll_future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^fn poll_future<T: Future>(core: &CoreStage<T>, cx: Context<'_>) -> Poll<()> {$/;"	f
poll_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn poll_inner(&self) -> PollFuture {$/;"	f
poll_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    fn poll_io<R>($/;"	P	implementation:Registration
poll_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn poll_lock(&self, cx: &mut Context<'_>) -> Poll<Guard<'_, T>> {$/;"	P	implementation:Inner
poll_next_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^    pub fn poll_next_entry(&mut self, cx: &mut Context<'_>) -> Poll<io::Result<Option<DirEntry>>/;"	P	implementation:ReadDir
poll_next_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^    pub fn poll_next_line($/;"	f
poll_next_segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^    pub fn poll_next_segment($/;"	f
poll_peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    pub fn poll_peek($/;"	P	implementation:ReadHalf
poll_peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    pub fn poll_peek($/;"	P	implementation:OwnedReadHalf
poll_peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn poll_peek($/;"	P	implementation:TcpStream
poll_peek_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn poll_peek_from($/;"	P	implementation:UdpSocket
poll_process_levels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn poll_process_levels() {$/;"	f
poll_process_levels_targeted	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn poll_process_levels_targeted() {$/;"	f
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_read($/;"	P	implementation:File
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^    fn poll_read($/;"	P	implementation:Cursor
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^    fn poll_read($/;"	P	implementation:u8
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^    fn poll_read($/;"	P	interface:AsyncRead
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^    fn poll_read($/;"	f
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    fn poll_read($/;"	f
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn poll_read($/;"	P	implementation:ReadHalf
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdin.rs	/^    fn poll_read($/;"	P	implementation:Stdin
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_read($/;"	P	implementation:BufReader
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_read($/;"	P	implementation:BufStream
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_read($/;"	P	implementation:BufWriter
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^    fn poll_read($/;"	f
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^    fn poll_read($/;"	P	implementation:Empty
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_read($/;"	P	implementation:DuplexStream
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_read($/;"	P	implementation:Pipe
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/repeat.rs	/^    fn poll_read($/;"	P	implementation:Repeat
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    fn poll_read($/;"	P	implementation:Take
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn poll_read($/;"	P	implementation:ReadHalf
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn poll_read($/;"	P	implementation:OwnedReadHalf
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn poll_read($/;"	P	implementation:TcpStream
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn poll_read($/;"	P	implementation:ReadHalf
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn poll_read($/;"	P	implementation:OwnedReadHalf
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn poll_read($/;"	P	implementation:UnixStream
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_read($/;"	P	implementation:NamedPipeClient
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_read($/;"	P	implementation:NamedPipeServer
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll_read($/;"	P	implementation:ChildStderr
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll_read($/;"	P	implementation:ChildStdout
poll_read_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn poll_read_io<R>($/;"	P	implementation:Registration
poll_read_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(crate) fn poll_read_priv($/;"	P	implementation:TcpStream
poll_read_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub(crate) fn poll_read_priv($/;"	P	implementation:UnixStream
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn poll_read_ready<'a>($/;"	P	implementation:AsyncFd
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<ReadyEvent>> {$/;"	P	implementation:Registration
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:TcpStream
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:UnixStream
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeClient
poll_read_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeServer
poll_read_ready_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn poll_read_ready_mut<'a>($/;"	P	implementation:AsyncFd
poll_read_to_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^fn poll_read_to_end<V: VecU8, R: AsyncRead + ?Sized>($/;"	f
poll_readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(super) fn poll_readiness($/;"	P	implementation:ScheduledIo
poll_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    fn poll_ready($/;"	P	implementation:Registration
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn poll_recv(&self, cx: &mut Context<'_>, buf: &mut ReadBuf<'_>) -> Poll<io::Result<()>>/;"	P	implementation:UdpSocket
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn poll_recv(&self, cx: &mut Context<'_>, buf: &mut ReadBuf<'_>) -> Poll<io::Result<()>>/;"	P	implementation:UnixDatagram
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn poll_recv(&mut self, _cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:test::MockStream
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^    fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:RxFuture
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:Signal
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>>;$/;"	P	interface:InternalStream
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:Signal
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    pub fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:CtrlBreak
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    pub fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<()>> {$/;"	P	implementation:CtrlC
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<T>> {$/;"	P	implementation:Receiver
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn poll_recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<T>> {$/;"	P	implementation:UnboundedReceiver
poll_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn poll_recv(&self, cx: &mut Context<'_>) -> Poll<Result<T, RecvError>> {$/;"	P	implementation:Inner
poll_recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn poll_recv_from($/;"	P	implementation:UdpSocket
poll_recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn poll_recv_from($/;"	P	implementation:UnixDatagram
poll_result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        poll_result: Poll<Result<(), ()>>,$/;"	m	struct:test::Mock
poll_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn poll_send(&self, cx: &mut Context<'_>, buf: &[u8]) -> Poll<io::Result<usize>> {$/;"	P	implementation:UdpSocket
poll_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn poll_send(&self, cx: &mut Context<'_>, buf: &[u8]) -> Poll<io::Result<usize>> {$/;"	P	implementation:UnixDatagram
poll_send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn poll_send_to($/;"	P	implementation:UdpSocket
poll_send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn poll_send_to<P>($/;"	P	implementation:UnixDatagram
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>> /;"	P	implementation:File
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:Vec
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>;$/;"	P	interface:AsyncWrite
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:Cursor
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	f
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Result<(), io::Error>>/;"	f
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), io::Error>> /;"	P	implementation:WriteHalf
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^    fn poll_shutdown($/;"	P	implementation:Stderr
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_shutdown($/;"	P	implementation:tests::LoggingMockWriter
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_shutdown($/;"	P	implementation:tests::TextMockWriter
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    fn poll_shutdown($/;"	f
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^    fn poll_shutdown($/;"	P	implementation:Stdout
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufReader
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufStream
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_shutdown(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:BufWriter
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_shutdown($/;"	P	implementation:DuplexStream
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_shutdown($/;"	P	implementation:Pipe
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Result<(), io::Error>> {$/;"	P	implementation:Sink
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:WriteHalf
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:OwnedWriteHalf
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:TcpStream
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:WriteHalf
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:OwnedWriteHalf
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:UnixStream
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeClient
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeServer
poll_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll_shutdown(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:ChildStdin
poll_tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    pub fn poll_tick(&mut self, cx: &mut Context<'_>) -> Poll<Instant> {$/;"	P	implementation:Interval
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn poll_write($/;"	P	implementation:File
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write($/;"	P	implementation:Cursor
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write($/;"	P	implementation:Vec
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write($/;"	P	interface:AsyncWrite
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write($/;"	f
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    fn poll_write($/;"	f
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn poll_write($/;"	P	implementation:WriteHalf
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stderr.rs	/^    fn poll_write($/;"	P	implementation:Stderr
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_write($/;"	P	implementation:tests::LoggingMockWriter
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        fn poll_write($/;"	P	implementation:tests::TextMockWriter
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    fn poll_write($/;"	f
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdout.rs	/^    fn poll_write($/;"	P	implementation:Stdout
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_write($/;"	P	implementation:BufReader
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_write($/;"	P	implementation:BufStream
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_write($/;"	P	implementation:BufWriter
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_write($/;"	P	implementation:DuplexStream
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    fn poll_write($/;"	P	implementation:Pipe
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^    fn poll_write($/;"	P	implementation:Sink
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn poll_write($/;"	P	implementation:WriteHalf
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn poll_write($/;"	P	implementation:OwnedWriteHalf
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn poll_write($/;"	P	implementation:TcpStream
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn poll_write($/;"	P	implementation:WriteHalf
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn poll_write($/;"	P	implementation:OwnedWriteHalf
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn poll_write($/;"	P	implementation:UnixStream
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_write($/;"	P	implementation:NamedPipeClient
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_write($/;"	P	implementation:NamedPipeServer
poll_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn poll_write($/;"	P	implementation:ChildStdin
poll_write_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn poll_write_io<R>($/;"	P	implementation:Registration
poll_write_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(super) fn poll_write_priv($/;"	P	implementation:TcpStream
poll_write_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub(crate) fn poll_write_priv($/;"	P	implementation:UnixStream
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn poll_write_ready<'a>($/;"	P	implementation:AsyncFd
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<ReadyEvent>> /;"	P	implementation:Registration
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:TcpStream
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:UnixStream
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeClient
poll_write_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<io::Result<()>> {$/;"	P	implementation:NamedPipeServer
poll_write_ready_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn poll_write_ready_mut<'a>($/;"	P	implementation:AsyncFd
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write_vectored($/;"	P	implementation:Cursor
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write_vectored($/;"	P	implementation:Vec
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write_vectored($/;"	P	interface:AsyncWrite
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_write.rs	/^    fn poll_write_vectored($/;"	f
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn poll_write_vectored($/;"	P	implementation:BufReader
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn poll_write_vectored($/;"	P	implementation:BufStream
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn poll_write_vectored($/;"	P	implementation:BufWriter
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^    fn poll_write_vectored($/;"	P	implementation:WriteHalf
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    fn poll_write_vectored($/;"	P	implementation:OwnedWriteHalf
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn poll_write_vectored($/;"	P	implementation:TcpStream
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^    fn poll_write_vectored($/;"	P	implementation:WriteHalf
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    fn poll_write_vectored($/;"	P	implementation:OwnedWriteHalf
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn poll_write_vectored($/;"	P	implementation:UnixStream
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_write_vectored($/;"	P	implementation:NamedPipeClient
poll_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    fn poll_write_vectored($/;"	P	implementation:NamedPipeServer
poll_write_vectored_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(super) fn poll_write_vectored_priv($/;"	P	implementation:TcpStream
poll_write_vectored_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub(super) fn poll_write_vectored_priv($/;"	P	implementation:UnixStream
pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^pub(super) mod pool {$/;"	n
pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/mod.rs	/^mod pool;$/;"	n
pool_multi_notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn pool_multi_notify() {$/;"	f	module:group_d
pool_multi_spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn pool_multi_spawn() {$/;"	f	module:group_a
pool_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn pool_shutdown() {$/;"	f	module:group_c
pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn pop(&self) -> Option<RemoteMsg> {$/;"	P	implementation:Spawner
pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    pub(super) fn pop(&mut self) -> Option<task::Notified<T>> {$/;"	P	implementation:Local
pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn pop(&self) -> Option<task::Notified<T>> {$/;"	P	implementation:Inject
pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    pub(crate) fn pop(&mut self, tx: &Tx<T>) -> Option<block::Read<T>> {$/;"	P	implementation:Rx
pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    pub(crate) fn pop(&mut self) -> Option<OwnedItem> {$/;"	P	implementation:Stack
pop_back	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) fn pop_back(&mut self) -> Option<L::Handle> {$/;"	P	implementation:LinkedList
pop_front	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    pub(crate) fn pop_front(&self) -> Option<T> {$/;"	P	implementation:VecDequeCell
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pos: u64,$/;"	m	struct:Inner
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pos: usize,$/;"	m	struct:Buf
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    pos: usize,$/;"	m	struct:CopyBuffer
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pos: u64,$/;"	m	struct:Slot
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pos: u64,$/;"	m	struct:Tail
pre_exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub unsafe fn pre_exec<F>(&mut self, f: F) -> &mut Command$/;"	P	implementation:Command
pre_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn pre_shutdown(&mut self, worker: &Worker) {$/;"	P	implementation:Core
prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^        prev: Budget,$/;"	m	struct:with_budget::ResetGuard
prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^            prev: Option<T>,$/;"	m	struct:TaskLocalFuture::with_task::Guard
prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    prev: Option<NonNull<T>>,$/;"	m	struct:PointersInner
prev_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    prev_len: usize,$/;"	m	struct:Page
private	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^mod private {$/;"	n
process	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    fn process(&self) {$/;"	P	implementation:Driver
process	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn process(&self) {$/;"	P	implementation:Handle
process_at_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn process_at_time(&self, mut now: u64) {$/;"	P	implementation:Handle
process_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) fn process_expiration(&mut self, expiration: &Expiration) {$/;"	P	implementation:Wheel
project	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    fn project(self: Pin<&mut Self>) -> (Pin<&mut Waiter>, &Semaphore, u32, &mut bool) {$/;"	P	implementation:Acquire
project	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn project(self: Pin<&mut Self>) -> (&mut Receiver<T>, &UnsafeCell<Waiter>) {$/;"	P	implementation:Recv
project	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    fn project(self: Pin<&mut Self>) -> (&Notify, &mut State, &UnsafeCell<Waiter>) {$/;"	P	implementation:Notified
ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    ptr: *const u8,$/;"	m	struct:ReadBufParts
ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    ptr: NonNull<Header>,$/;"	m	struct:RawTask
ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn ptr(r: &Pin<Box<Entry>>) -> NonNull<Entry> {$/;"	f	module:tests
ptr_eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn ptr_eq(&self, other: &Shared) -> bool {$/;"	P	implementation:Shared
ptr_eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn ptr_eq(&self, other: &Shared) -> bool {$/;"	P	implementation:Shared
push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn push(&self, task: task::Notified<T>) {$/;"	P	implementation:Inject
push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    pub(crate) fn push(&self, value: T) {$/;"	P	implementation:Tx
push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    pub(crate) fn push(&mut self, entry: OwnedItem) {$/;"	P	implementation:Stack
push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    pub(crate) fn push(&mut self, val: Waker) {$/;"	P	implementation:WakeList
push_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn push_all<'a>($/;"	f	module:tests
push_and_drain	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn push_and_drain() {$/;"	f	module:tests
push_back	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    pub(super) fn push_back(&mut self, mut task: task::Notified<T>, inject: &Inject<T>) {$/;"	P	implementation:Local
push_back	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    pub(crate) fn push_back(&self, item: T) {$/;"	P	implementation:VecDequeCell
push_batch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    pub(crate) fn push_batch<I>(&self, mut iter: I)$/;"	P	implementation:Inject
push_batch_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    fn push_batch_inner($/;"	P	implementation:Inject
push_front	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) fn push_front(&mut self, val: L::Handle) {$/;"	P	implementation:LinkedList
push_orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn push_orphan(&self, orphan: StdChild) {$/;"	P	implementation:GlobalOrphanQueue
push_orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        fn push_orphan(&self, orphan: W) {$/;"	P	implementation:test::MockQueue
push_orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn push_orphan(&self, orphan: T) {$/;"	P	implementation:O
push_orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn push_orphan(&self, orphan: T);$/;"	P	interface:OrphanQueue
push_orphan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    pub(crate) fn push_orphan(&self, orphan: T)$/;"	P	implementation:OrphanQueueImpl
push_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    fn push_overflow($/;"	P	implementation:Local
push_pop_push_pop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn push_pop_push_pop() {$/;"	f	module:tests
put_back_original_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^fn put_back_original_data(output: &mut String, mut vector: Vec<u8>, num_bytes_read: usize) {$/;"	f
put_slice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn put_slice(&mut self, buf: &[u8]) {$/;"	P	implementation:ReadBuf
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    queue: Mutex<Vec<T>>,$/;"	m	struct:OrphanQueueImpl
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    queue: Mutex<Option<VecDeque<RemoteMsg>>>,$/;"	m	struct:Shared
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    queue: VecDeque<task::Notified<Arc<Shared>>>,$/;"	m	struct:Tasks
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    queue: VecDeque<Task>,$/;"	m	struct:Shared
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    queue: VecDeque<task::Notified<Runtime>>,$/;"	m	struct:Core
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    queue: LinkedList<Waiter, <Waiter as linked_list::Link>::Target>,$/;"	m	struct:Waitlist
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    queue: Mutex<Option<VecDeque<task::Notified<Arc<Shared>>>>>,$/;"	m	struct:Shared
queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    queue: VecDequeCell<task::Notified<Arc<Shared>>>,$/;"	m	struct:Context
queued	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    queued: bool,$/;"	m	struct:Acquire
queued	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    queued: bool,$/;"	m	struct:Waiter
quit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn quit() -> Self {$/;"	P	implementation:SignalKind
racy_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn racy_shutdown() {$/;"	f	module:group_a
rand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^pub(crate) mod rand {$/;"	n
rand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^pub(crate) mod rand {$/;"	n
rand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    rand: FastRand,$/;"	m	struct:Core
rand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/mod.rs	/^mod rand;$/;"	n
raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    raw: RawTask,$/;"	m	struct:Task
raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    raw: RawTask,$/;"	m	struct:UnownedTask
raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod raw;$/;"	n
raw_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn raw_handle(&self) -> Option<RawHandle> {$/;"	P	implementation:Child
raw_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^fn raw_waker<T, S>(header: *const Header) -> RawWaker$/;"	f
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    fn read(&mut self, dst: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:MockFile
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod read;$/;"	n
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn read(&mut self, read: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read.rs	/^pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {$/;"	f
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    read: Arc<Mutex<Pipe>>,$/;"	m	struct:DuplexStream
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read.rs	/^pub(crate) fn read<'a, R>(reader: &'a mut R, buf: &'a mut [u8]) -> Read<'a, R>$/;"	f
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn read(&self) -> LockResult<RwLockReadGuard<'_, T>> {$/;"	P	implementation:RwLock
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn read(&mut self, allowed: bool) -> &mut Self {$/;"	P	implementation:ClientOptions
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn read(&mut self, bytes: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Pipe
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn read(&self, slot_index: usize) -> Option<Read<T>> {$/;"	P	implementation:Block
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub async fn read(&self) -> RwLockReadGuard<'_, T> {$/;"	P	implementation:RwLock
read_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/mod.rs	/^mod read_buf;$/;"	n
read_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_buf.rs	/^pub(crate) fn read_buf<'a, R, B>(reader: &'a mut R, buf: &'a mut B) -> ReadBuf<'a, R, B>$/;"	f
read_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod read_dir;$/;"	n
read_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_dir.rs	/^pub async fn read_dir(path: impl AsRef<Path>) -> io::Result<ReadDir> {$/;"	f
read_done	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    read_done: bool,$/;"	m	struct:CopyBuffer
read_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_err() {$/;"	f
read_err_then_read_success	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_err_then_read_success() {$/;"	f
read_exact	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_exact.rs	/^pub(crate) fn read_exact<'a, A>(reader: &'a mut A, buf: &'a mut [u8]) -> ReadExact<'a, A>$/;"	f
read_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn read_from<T: Read>(&mut self, rd: &mut T) -> io::Result<usize> {$/;"	P	implementation:Buf
read_guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod read_guard;$/;"	n
read_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^pub(crate) fn read_line<'a, R>(reader: &'a mut R, string: &'a mut String) -> ReadLine<'a, R>$/;"	f
read_line_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_line.rs	/^pub(super) fn read_line_internal<R: AsyncBufRead + ?Sized>($/;"	f
read_link	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod read_link;$/;"	n
read_link	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_link.rs	/^pub async fn read_link(path: impl AsRef<Path>) -> io::Result<PathBuf> {$/;"	f
read_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub async fn read_owned(self: Arc<Self>) -> OwnedRwLockReadGuard<T> {$/;"	P	implementation:RwLock
read_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn read_state(&self) -> Poll<TimerResult> {$/;"	P	implementation:StateCell
read_to_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^pub(crate) fn read_to_end<'a, R>(reader: &'a mut R, buffer: &'a mut Vec<u8>) -> ReadToEnd<'a, R>$/;"	f
read_to_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        async fn read_to_end<A: AsyncRead + Unpin>(io: Option<A>) -> io::Result<Vec<u8>> {$/;"	f	method:Child::wait_with_output
read_to_end_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_end.rs	/^pub(super) fn read_to_end_internal<V: VecU8, R: AsyncRead + ?Sized>($/;"	f
read_to_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod read_to_string;$/;"	n
read_to_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/read_to_string.rs	/^pub async fn read_to_string(path: impl AsRef<Path>) -> io::Result<String> {$/;"	f
read_to_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_string.rs	/^pub(crate) fn read_to_string<'a, R>($/;"	f
read_to_string_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_to_string.rs	/^fn read_to_string_internal<R: AsyncRead + ?Sized>($/;"	f
read_twice_before_dispatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_twice_before_dispatch() {$/;"	f
read_until	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_until.rs	/^pub(crate) fn read_until<'a, R>($/;"	f
read_until_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_until.rs	/^pub(super) fn read_until_internal<R: AsyncBufRead + ?Sized>($/;"	f
read_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    read_waker: Option<Waker>,$/;"	m	struct:Pipe
read_with_bigger_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_with_bigger_buf() {$/;"	f
read_with_buffer_larger_than_max	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_with_buffer_larger_than_max() {$/;"	f
read_with_smaller_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn read_with_smaller_buf() {$/;"	f
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub async fn readable<'a>(&'a self) -> io::Result<AsyncFdReadyGuard<'a, T>> {$/;"	P	implementation:AsyncFd
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:TcpStream
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:UdpSocket
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:UnixDatagram
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:UnixStream
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeClient
readable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn readable(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeServer
readable_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub async fn readable_mut<'a>(&'a mut self) -> io::Result<AsyncFdReadyMutGuard<'a, T>> {$/;"	P	implementation:AsyncFd
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    reader: Option<Waker>,$/;"	m	struct:Waiters
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    reader: &'a mut R,$/;"	m	struct:Copy
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_int.rs	/^macro_rules! reader {$/;"	M
reader8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/read_int.rs	/^macro_rules! reader8 {$/;"	M
readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    async fn readiness(&self, interest: Interest) -> io::Result<AsyncFdReadyGuard<'_, T>> {$/;"	P	implementation:AsyncFd
readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    readiness: AtomicUsize,$/;"	m	struct:ScheduledIo
readiness_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    async fn readiness_mut($/;"	P	implementation:AsyncFd
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^mod ready;$/;"	n
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^mod ready;$/;"	n
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/ready.rs	/^macro_rules! ready {$/;"	M
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:TcpStream
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:UdpSocket
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:UnixDatagram
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:UnixStream
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:NamedPipeClient
ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn ready(&self, interest: Interest) -> io::Result<Ready> {$/;"	P	implementation:NamedPipeServer
ready_event	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(super) fn ready_event(&self, interest: Interest) -> ReadyEvent {$/;"	P	implementation:ScheduledIo
ready_slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    ready_slots: AtomicUsize,$/;"	m	struct:Block
reap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^mod reap;$/;"	n
reap_orphans	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn reap_orphans(handle: &SignalHandle) {$/;"	P	implementation:GlobalOrphanQueue
reap_orphans	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    pub(crate) fn reap_orphans(&self, handle: &SignalHandle)$/;"	P	implementation:OrphanQueueImpl
reaper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    fn reaper() {$/;"	f	module:test
receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    receiver: UnixStream,$/;"	m	struct:OsExtraData
receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    receiver: PollEvented<UnixStream>,$/;"	m	struct:Driver
receiver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    receiver: &'a mut Receiver<T>,$/;"	m	struct:Recv
receiver_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub fn receiver_count(&self) -> usize {$/;"	P	implementation:Sender
receiver_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn receiver_count(&self) -> usize {$/;"	P	implementation:Sender
reclaim	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn reclaim(&mut self) {$/;"	P	implementation:Block
reclaim_block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    pub(crate) unsafe fn reclaim_block(&self, mut block: NonNull<Block<T>>) {$/;"	P	implementation:Tx
reclaim_blocks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    fn reclaim_blocks(&mut self, tx: &Tx<T>) {$/;"	P	implementation:Rx
record_event	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn record_event(&self, event_id: EventId) {$/;"	P	implementation:Registry
record_event	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    pub(crate) fn record_event(&self, event_id: EventId) {$/;"	P	implementation:Globals
record_invalid_event_does_nothing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn record_invalid_event_does_nothing() {$/;"	f	module:tests
recursive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^    pub fn recursive(&mut self, recursive: bool) -> &mut Self {$/;"	P	implementation:DirBuilder
recursive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/dir_builder.rs	/^    recursive: bool,$/;"	m	struct:DirBuilder
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    pub(crate) fn recv(self) -> T {$/;"	P	implementation:Receiver
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^    async fn recv(&mut self) -> Option<()> {$/;"	P	implementation:RxFuture
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub async fn recv(&mut self) -> Option<()> {$/;"	P	implementation:Signal
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    pub async fn recv(&mut self) -> Option<()> {$/;"	P	implementation:CtrlBreak
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows.rs	/^    pub async fn recv(&mut self) -> Option<()> {$/;"	P	implementation:CtrlC
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub async fn recv(&mut self) -> Result<T, RecvError> {$/;"	P	implementation:Receiver
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn recv(&mut self) -> Option<T> {$/;"	P	implementation:Receiver
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<T>> {$/;"	P	implementation:Rx
recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub async fn recv(&mut self) -> Option<T> {$/;"	P	implementation:UnboundedReceiver
recv_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn recv_buffer_size(&self) -> io::Result<u32> {$/;"	P	implementation:TcpSocket
recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket
recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UnixDatagram
recv_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn recv_ref($/;"	P	implementation:Receiver
ref_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn ref_count(self) -> usize {$/;"	P	implementation:Snapshot
ref_count_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    ref_count_rx: AtomicUsize,$/;"	m	struct:Shared
ref_dec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn ref_dec(&mut self) {$/;"	P	implementation:Snapshot
ref_dec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn ref_dec(&self) -> bool {$/;"	P	implementation:State
ref_dec_twice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn ref_dec_twice(&self) -> bool {$/;"	P	implementation:State
ref_inc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn ref_inc(&mut self) {$/;"	P	implementation:Snapshot
ref_inc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn ref_inc(&self) {$/;"	P	implementation:State
refresh	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn refresh(&mut self, page: &Page<T>) {$/;"	P	implementation:CachedPage
register	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn register($/;"	P	implementation:Pipe
register_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    pub(crate) fn register_by_ref(&self, waker: &Waker) {$/;"	P	implementation:AtomicWaker
register_listener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn register_listener(&self, event_id: EventId) -> watch::Receiver<()> {$/;"	P	implementation:Registry
register_listener	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    pub(crate) fn register_listener(&self, event_id: EventId) -> watch::Receiver<()> {$/;"	P	implementation:Globals
register_panics_on_invalid_input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn register_panics_on_invalid_input() {$/;"	f	module:tests
registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    registration: Registration,$/;"	m	struct:AsyncFd
registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^mod registration;$/;"	n
registration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/poll_evented.rs	/^    pub(crate) fn registration(&self) -> &Registration {$/;"	P	implementation:PollEvented
registration_is_send_and_sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/tests/mod.rs	/^fn registration_is_send_and_sync() {$/;"	f
registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    registry: mio::Registry,$/;"	m	struct:Inner
registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^mod registry;$/;"	n
registry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    registry: Registry<OsStorage>,$/;"	m	struct:Globals
reject_remote_clients	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn reject_remote_clients(&mut self, reject: bool) -> &mut Self {$/;"	P	implementation:ServerOptions
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn release(&self, task: &Task<Self>) -> Option<Task<Self>> {$/;"	P	implementation:Arc
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/schedule.rs	/^    fn release(&self, _task: &Task<Self>) -> Option<Task<Self>> {$/;"	P	implementation:NoopSchedule
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn release(&self) -> usize {$/;"	f
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn release(&self, task: &Task<Self>) -> Option<Task<Self>>;$/;"	P	interface:Schedule
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^    fn release(&self, _task: &Task<Self>) -> Option<Task<Self>> {$/;"	P	implementation:Runtime
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn release(&self, task: &Task<Self>) -> Option<Task<Self>> {$/;"	P	implementation:Runtime
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn release(&self, task: &Task) -> Option<Task> {$/;"	P	implementation:Arc
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn release(&self, added: usize) {$/;"	P	implementation:Semaphore
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn release(mut self) -> Sender<T> {$/;"	P	implementation:OwnedPermit
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn release() {$/;"	f
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn release(&self, task: &Task<Self>) -> Option<Task<Self>> {$/;"	P	implementation:Arc
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn release(&self) -> Arc<Page<T>> {$/;"	P	implementation:Value
release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn release(&self, value: *const Value<T>) {$/;"	P	implementation:Page
release_during_acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^fn release_during_acquire() {$/;"	f
rem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    rem: AtomicUsize,$/;"	m	struct:Slot
remaining	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn remaining(&self) -> usize {$/;"	P	implementation:ReadBuf
remote_abort	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn remote_abort(self) {$/;"	f
remote_abort	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn remote_abort(self) {$/;"	P	implementation:RawTask
remote_abort	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn remote_abort<T: Future, S: Schedule>(ptr: NonNull<Header>) {$/;"	f
remotes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    remotes: Box<[Remote]>,$/;"	m	struct:Shared
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn remove(&self, task: &Task<S>) -> Option<Task<S>> {$/;"	P	implementation:LocalOwnedTasks
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    pub(crate) fn remove(&self, task: &Task<S>) -> Option<Task<S>> {$/;"	P	implementation:OwnedTasks
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    pub(crate) unsafe fn remove(&mut self, item: NonNull<TimerShared>) {$/;"	P	implementation:Wheel
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/stack.rs	/^    pub(crate) fn remove(&mut self, entry: &Item) {$/;"	P	implementation:Stack
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    pub(crate) unsafe fn remove(&mut self, node: NonNull<L::Target>) -> Option<L::Handle> {$/;"	P	implementation:LinkedList
remove_by_address	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn remove_by_address() {$/;"	f	module:tests
remove_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod remove_dir;$/;"	n
remove_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/remove_dir.rs	/^pub async fn remove_dir(path: impl AsRef<Path>) -> io::Result<()> {$/;"	f
remove_dir_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod remove_dir_all;$/;"	n
remove_dir_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/remove_dir_all.rs	/^pub async fn remove_dir_all(path: impl AsRef<Path>) -> io::Result<()> {$/;"	f
remove_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    pub(crate) unsafe fn remove_entry(&mut self, item: NonNull<TimerShared>) {$/;"	P	implementation:Level
remove_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod remove_file;$/;"	n
remove_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/remove_file.rs	/^pub async fn remove_file(path: impl AsRef<Path>) -> io::Result<()> {$/;"	f
rename	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod rename;$/;"	n
rename	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/rename.rs	/^pub async fn rename(from: impl AsRef<Path>, to: impl AsRef<Path>) -> io::Result<()> {$/;"	f
reregister	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn reregister($/;"	P	implementation:Pipe
reregister	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) unsafe fn reregister(&self, new_tick: u64, entry: NonNull<TimerShared>) {$/;"	P	implementation:Handle
reserve	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn reserve(&mut self, num_bytes: usize) {$/;"	f
reserve	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn reserve(&self) -> Result<Permit<'_, T>, SendError<()>> {$/;"	P	implementation:Sender
reserve_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    async fn reserve_inner(&self) -> Result<(), SendError<()>> {$/;"	P	implementation:Sender
reserve_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn reserve_owned(self) -> Result<OwnedPermit<T>, SendError<()>> {$/;"	P	implementation:Sender
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    fn reset(&self) {$/;"	P	implementation:ScheduledIo
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(crate) fn reset(mut self: Pin<&mut Self>, new_time: Instant) {$/;"	P	implementation:TimerEntry
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^    pub fn reset(self: Pin<&mut Self>, deadline: Instant) {$/;"	P	implementation:Sleep
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^        fn reset(&self) {$/;"	P	implementation:test::Foo
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn reset(&self);$/;"	P	interface:Entry
reset_future	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn reset_future() {$/;"	f
resources	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    resources: Mutex<Option<Slab<ScheduledIo>>>,$/;"	m	struct:Inner
resources	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    resources: Option<Slab<ScheduledIo>>,$/;"	m	struct:Driver
result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    result: UnsafeCell<TimerResult>,$/;"	m	struct:StateCell
retain_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn retain_ready(&mut self) {$/;"	P	implementation:AsyncFdReadyGuard
retain_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn retain_ready(&mut self) {$/;"	P	implementation:AsyncFdReadyMutGuard
return_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        return_err: bool,$/;"	m	struct:test::MockWait
returned_from_park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn returned_from_park(&mut self) {}$/;"	P	implementation:WorkerStatsBatcher
returned_from_park	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn returned_from_park(&mut self) {}$/;"	P	implementation:WorkerStatsBatcher
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    pub fn reunite(self, other: OwnedReadHalf) -> Result<TcpStream, ReuniteError> {$/;"	P	implementation:OwnedWriteHalf
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    pub fn reunite(self, other: OwnedWriteHalf) -> Result<TcpStream, ReuniteError> {$/;"	P	implementation:OwnedReadHalf
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^pub(crate) fn reunite($/;"	f
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    pub fn reunite(self, other: OwnedReadHalf) -> Result<UnixStream, ReuniteError> {$/;"	P	implementation:OwnedWriteHalf
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    pub fn reunite(self, other: OwnedWriteHalf) -> Result<UnixStream, ReuniteError> {$/;"	P	implementation:OwnedReadHalf
reunite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^pub(crate) fn reunite($/;"	f
reusable_box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^mod reusable_box;$/;"	n
reuseaddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn reuseaddr(&self) -> io::Result<bool> {$/;"	P	implementation:TcpSocket
reuseport	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn reuseport(&self) -> io::Result<bool> {$/;"	P	implementation:TcpSocket
rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        rt: crate::runtime::Runtime,$/;"	m	struct:test_combination::Rt
rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn rt() -> Runtime {$/;"	f	module:tests
rt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^    fn rt() -> Runtime {$/;"	f	module:tests
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    fn run(&self, worker_thread_id: usize) {$/;"	P	implementation:Inner
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    pub(crate) fn run(self) {$/;"	P	implementation:LocalNotified
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    pub(crate) fn run(self) {$/;"	P	implementation:UnownedTask
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn run(&self, mut core: Box<Core>) -> RunResult {$/;"	P	implementation:Context
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^fn run(worker: Arc<Worker>) {$/;"	f
run_fuzz	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn run_fuzz(ops: Vec<usize>) {$/;"	f	module:tests
run_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    pub(in super::super) fn run_one() {$/;"	f	module:pool
run_queue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    run_queue: queue::Local<Arc<Shared>>,$/;"	m	struct:Core
run_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn run_task(&self, task: Notified, mut core: Box<Core>) -> RunResult {$/;"	P	implementation:Context
run_until	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    pub async fn run_until<F>(&self, future: F) -> F::Output$/;"	P	implementation:LocalSet
rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    rx: oneshot::Receiver<T>,$/;"	m	struct:JoinHandle
rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    rx: oneshot::Receiver<()>,$/;"	m	struct:Waiting
rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^    rx: oneshot::Receiver<()>,$/;"	m	struct:Receiver
rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_basic_scheduler.rs	/^    rx: Receiver<()>,$/;"	m	struct:BlockedFuture
rx_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    rx_closed: bool,$/;"	m	struct:RxFields
rx_cnt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    rx_cnt: usize,$/;"	m	struct:Tail
rx_fields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    rx_fields: UnsafeCell<RxFields<T>>,$/;"	m	struct:Chan
rx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    rx_task: Task,$/;"	m	struct:Inner
rx_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    rx_waker: AtomicWaker,$/;"	m	struct:Chan
s	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    s: &'a semaphore::Semaphore,$/;"	m	struct:MappedMutexGuard
s	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    s: semaphore::Semaphore,$/;"	m	struct:Mutex
s	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    s: Semaphore,$/;"	m	struct:RwLock
same_channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn same_channel(&self, other: &Self) -> bool {$/;"	P	implementation:Sender
same_channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn same_channel(&self, other: &Self) -> bool {$/;"	P	implementation:Tx
same_channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn same_channel(&self, other: &Self) -> bool {$/;"	P	implementation:UnboundedSender
saturating_duration_since	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {$/;"	P	implementation:Instant
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn schedule(&self, task: task::Notified<Self>) {$/;"	P	implementation:Arc
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/mod.rs	/^mod schedule;$/;"	n
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/schedule.rs	/^    fn schedule(&self, _task: task::Notified<Self>) {$/;"	P	implementation:NoopSchedule
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn schedule(&self, task: Notified<Self>);$/;"	P	interface:Schedule
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^    fn schedule(&self, _task: task::Notified<Self>) {$/;"	P	implementation:Runtime
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn schedule(&self, task: task::Notified<Self>) {$/;"	P	implementation:Runtime
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn schedule() {$/;"	f
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn schedule(&self, task: Notified) {$/;"	P	implementation:Arc
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    pub(super) fn schedule(&self, task: Notified, is_yield: bool) {$/;"	P	implementation:Shared
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn schedule(&self, task: task::Notified<Arc<Self>>) {$/;"	P	implementation:Shared
schedule	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn schedule(&self, task: task::Notified<Self>) {$/;"	P	implementation:Arc
schedule_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn schedule_local(&self, core: &mut Core, task: Notified, is_yield: bool) {$/;"	P	implementation:Shared
scheduled_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^mod scheduled_io;$/;"	n
scheduler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^        scheduler: &'a mut Inner<P>,$/;"	m	struct:enter::Guard
scope	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub fn scope<F>(&'static self, value: T, f: F) -> TaskLocalFuture<T, F>$/;"	P	implementation:LocalKey
scoped_thread_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^macro_rules! scoped_thread_local {$/;"	M
scoped_tls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^pub(crate) mod scoped_tls;$/;"	n
sealed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^pub(crate) mod sealed {$/;"	n
security_qos_flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn security_qos_flags(&mut self, flags: u32) -> &mut Self {$/;"	P	implementation:ClientOptions
security_qos_flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    security_qos_flags: DWORD,$/;"	m	struct:ClientOptions
seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^    pub(crate) fn seed() -> u64 {$/;"	f	module:rand
seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^    pub(crate) fn seed() -> u64 {$/;"	f	module:rand
seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:MockFile
seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/seek.rs	/^pub(crate) fn seek<S>(seek: &mut S, pos: SeekFrom) -> Seek<'_, S>$/;"	f
select	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/select.rs	/^macro_rules! select {$/;"	M
select_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/select.rs	/^macro_rules! select_variant {$/;"	M
sem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    sem: &'a Semaphore,$/;"	m	struct:SemaphorePermit
sem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    sem: Arc<Semaphore>,$/;"	m	struct:OwnedSemaphorePermit
semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    semaphore: &'a Semaphore,$/;"	m	struct:Acquire
semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(super) fn semaphore(&self) -> &S {$/;"	P	implementation:Tx
semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    semaphore: S,$/;"	m	struct:Chan
semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    semaphore: Semaphore,$/;"	m	struct:OnceCell
semaphore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_semaphore_batch.rs	/^        semaphore: Semaphore,$/;"	m	struct:basic_usage::Shared
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    pub(crate) fn send(self, value: T) {$/;"	P	implementation:Sender
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub fn send(&self, value: T) -> Result<usize, SendError<T>> {$/;"	P	implementation:Sender
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn send(&self, value: T) -> Result<(), SendError<T>> {$/;"	P	implementation:Sender
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn send(mut self, value: T) -> Sender<T> {$/;"	P	implementation:OwnedPermit
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn send(self, value: T) {$/;"	P	implementation:Permit
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    fn send(&self, value: T) {$/;"	P	implementation:Chan
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn send(&self, value: T) {$/;"	P	implementation:Tx
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^    pub fn send(&self, message: T) -> Result<(), SendError<T>> {$/;"	P	implementation:UnboundedSender
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub fn send(mut self, t: T) -> Result<(), T> {$/;"	P	implementation:Sender
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn send(&self, value: T) -> Result<(), error::SendError<T>> {$/;"	P	implementation:Sender
send2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    fn send2(&self, value: Option<T>) -> Result<usize, SendError<Option<T>>> {$/;"	P	implementation:Sender
send_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn send_buffer_size(&self) -> io::Result<u32> {$/;"	P	implementation:TcpSocket
send_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub async fn send_timeout($/;"	P	implementation:Sender
send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn send_to<A: ToSocketAddrs>(&self, buf: &[u8], target: A) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn send_to<P>(&self, buf: &[u8], target: P) -> io::Result<usize>$/;"	P	implementation:UnixDatagram
send_to_addr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    async fn send_to_addr(&self, buf: &[u8], target: SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
sender	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    sender: UnixStream,$/;"	m	struct:OsExtraData
set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^    pub(crate) fn set<F, R>(&'static self, t: &T, f: F) -> R$/;"	P	implementation:ScopedKey
set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    pub(super) fn set(&self, val: Box<T>) {$/;"	P	implementation:AtomicCell
set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    pub(crate) fn set<F>(&mut self, future: F)$/;"	P	implementation:ReusableBoxFuture
set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn set(&self, value: T) -> Result<(), SetError<T>> {$/;"	P	implementation:OnceCell
set_broadcast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn set_broadcast(&self, on: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket
set_cached_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    unsafe fn set_cached_when(&self, when: u64) {$/;"	P	implementation:TimerShared
set_cancelled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn set_cancelled(&mut self) {$/;"	P	implementation:Snapshot
set_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn set_closed(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
set_closed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn set_closed(&self) {$/;"	P	implementation:state::AtomicState
set_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn set_complete(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
set_elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn set_elapsed(&mut self, when: u64) {$/;"	P	implementation:Wheel
set_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn set_expiration(&self, timestamp: u64) {$/;"	P	implementation:StateCell
set_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn set_expiration(&self, t: u64) {$/;"	P	implementation:TimerShared
set_expiration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn set_expiration(&self, tick: u64) {$/;"	P	implementation:TimerHandle
set_filled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn set_filled(&mut self, n: usize) {$/;"	P	implementation:ReadBuf
set_join_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^fn set_join_waker($/;"	f
set_join_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn set_join_waker(&mut self) {$/;"	P	implementation:Snapshot
set_join_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn set_join_waker(&self) -> UpdateResult {$/;"	P	implementation:State
set_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn set_len(&self, size: u64) -> io::Result<()> {$/;"	P	implementation:File
set_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^    pub fn set_limit(&mut self, limit: u64) {$/;"	P	implementation:Take
set_linger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn set_linger(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream
set_missed_tick_behavior	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    pub fn set_missed_tick_behavior(&mut self, behavior: MissedTickBehavior) {$/;"	P	implementation:Interval
set_multicast_loop_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn set_multicast_loop_v4(&self, on: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket
set_multicast_loop_v6	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn set_multicast_loop_v6(&self, on: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket
set_multicast_ttl_v4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn set_multicast_ttl_v4(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket
set_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^fn set_next(header: NonNull<task::Header>, val: Option<NonNull<task::Header>>) {$/;"	f
set_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn set_next(&mut self, value: Option<NonNull<T>>) {$/;"	P	implementation:Pointers
set_nodelay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream
set_nonblocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^fn set_nonblocking<T: AsRawFd>(fd: &mut T, nonblocking: bool) -> io::Result<()> {$/;"	f
set_notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn set_notified(&mut self) {$/;"	P	implementation:Snapshot
set_owner_id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) unsafe fn set_owner_id(&self, owner: u64) {$/;"	P	implementation:Header
set_permissions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn set_permissions(&self, perm: Permissions) -> io::Result<()> {$/;"	P	implementation:File
set_permissions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod set_permissions;$/;"	n
set_permissions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/set_permissions.rs	/^pub async fn set_permissions(path: impl AsRef<Path>, perm: Permissions) -> io::Result<()> {$/;"	f
set_prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    fn set_prev(&mut self, value: Option<NonNull<T>>) {$/;"	P	implementation:Pointers
set_readiness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(super) fn set_readiness($/;"	P	implementation:ScheduledIo
set_ready	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    fn set_ready(&self, slot: usize) {$/;"	P	implementation:Block
set_recv_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn set_recv_buffer_size(&self, size: u32) -> io::Result<()> {$/;"	P	implementation:TcpSocket
set_reuseaddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn set_reuseaddr(&self, reuseaddr: bool) -> io::Result<()> {$/;"	P	implementation:TcpSocket
set_reuseport	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn set_reuseport(&self, reuseport: bool) -> io::Result<()> {$/;"	P	implementation:TcpSocket
set_running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn set_running(&mut self) {$/;"	P	implementation:Snapshot
set_rx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn set_rx_task(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
set_same_layout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    unsafe fn set_same_layout<F>(&mut self, future: F)$/;"	P	implementation:ReusableBoxFuture
set_send_buffer_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/socket.rs	/^    pub fn set_send_buffer_size(&self, size: u32) -> io::Result<()> {$/;"	P	implementation:TcpSocket
set_stage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    unsafe fn set_stage(&self, stage: Stage<T>) {$/;"	P	implementation:CoreStage
set_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^fn set_state(data: usize, state: usize) -> usize {$/;"	f
set_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    unsafe fn set_task(&self, cx: &mut Context<'_>) {$/;"	P	implementation:Task
set_ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:TcpListener
set_ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:TcpStream
set_ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket
set_tx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn set_tx_task(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
set_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    fn set_value(&self, value: T, permit: SemaphorePermit<'_>) -> &T {$/;"	P	implementation:OnceCell
set_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) unsafe fn set_waker(&self, waker: Option<Waker>) {$/;"	P	implementation:Trailer
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^pub mod shared {$/;"	n
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    shared: Arc<Shared>,$/;"	m	struct:Context
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    shared: Arc<Shared>,$/;"	m	struct:Spawner
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    shared: Mutex<Shared>,$/;"	m	struct:Inner
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    shared: Arc<Shared>,$/;"	m	struct:Inner
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    shared: Arc<worker::Shared>,$/;"	m	struct:Spawner
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    shared: Arc<Shared>,$/;"	m	struct:Worker
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    shared: Arc<Shared<T>>,$/;"	m	struct:Receiver
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    shared: Arc<Shared<T>>,$/;"	m	struct:Sender
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    shared: Arc<Shared<T>>,$/;"	m	struct:Receiver
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    shared: Arc<Shared<T>>,$/;"	m	struct:Sender
shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    shared: Arc<Shared>,$/;"	m	struct:Context
shift	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    shift: u32,$/;"	m	struct:Pack
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn shutdown(&mut self) {}$/;"	P	implementation:Driver
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(super) fn shutdown(&self) {$/;"	P	implementation:ScheduledIo
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/shutdown.rs	/^pub(super) fn shutdown<A>(a: &mut A) -> Shutdown<'_, A>$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:UnixDatagram
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn shutdown(&mut self) {$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn shutdown(&mut self);$/;"	P	interface:Park
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:CachedParkThread
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:ParkThread
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn shutdown(&self) {$/;"	P	implementation:Inner
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:Driver
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/mod.rs	/^mod shutdown;$/;"	n
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    pub(crate) fn shutdown(&mut self, timeout: Option<Duration>) {$/;"	P	implementation:BlockingPool
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    shutdown: bool,$/;"	m	struct:Shared
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:Driver
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub(crate) fn shutdown(mut self) {$/;"	P	implementation:Handle
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:Parker
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn shutdown(&self) {$/;"	P	implementation:Inner
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^    pub(crate) fn shutdown(&mut self) {$/;"	P	implementation:Spawner
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn shutdown(self) {$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    pub(crate) fn shutdown(self) {$/;"	P	implementation:Task
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    pub(crate) fn shutdown(self) {$/;"	P	implementation:UnownedTask
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) fn shutdown(self) {$/;"	P	implementation:RawTask
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn shutdown<T: Future, S: Schedule>(ptr: NonNull<Header>) {$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn shutdown(&self) {$/;"	P	implementation:Runtime
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn shutdown() {$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn shutdown(&mut self) {$/;"	P	implementation:Spawner
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:Core
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn shutdown(&self, core: Box<Core>) {$/;"	P	implementation:Shared
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    fn shutdown(&mut self) {$/;"	P	implementation:Driver
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn shutdown(&mut self) {$/;"	f
shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/error.rs	/^    pub fn shutdown() -> Error {$/;"	P	implementation:Error
shutdown_cores	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    shutdown_cores: Mutex<Vec<Box<Core>>>,$/;"	m	struct:Shared
shutdown_immediately	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn shutdown_immediately() {$/;"	f
shutdown_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^    shutdown_on_drop: bool,$/;"	m	struct:OwnedWriteHalf
shutdown_on_drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^    shutdown_on_drop: bool,$/;"	m	struct:OwnedWriteHalf
shutdown_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    shutdown_rx: shutdown::Receiver,$/;"	m	struct:BlockingPool
shutdown_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub(super) fn shutdown_std(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream
shutdown_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub(super) fn shutdown_std(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:UnixStream
shutdown_tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    shutdown_tx: Option<shutdown::Sender>,$/;"	m	struct:Shared
shutdown_with_notification	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    fn shutdown_with_notification() {$/;"	f	module:group_b
sigchild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    sigchild: Mutex<Option<watch::Receiver<()>>>,$/;"	m	struct:OrphanQueueImpl
signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^    signal: S,$/;"	m	struct:Reaper
signal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub fn signal(kind: SignalKind) -> io::Result<Signal> {$/;"	f
signal_enable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^fn signal_enable(signal: SignalKind, handle: &Handle) -> io::Result<()> {$/;"	f
signal_enable_error_on_forbidden_input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn signal_enable_error_on_forbidden_input() {$/;"	f	module:tests
signal_enable_error_on_invalid_input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    fn signal_enable_error_on_invalid_input() {$/;"	f	module:tests
signal_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    signal_handle: SignalHandle,$/;"	m	struct:Driver
signal_with_handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^pub(crate) fn signal_with_handle($/;"	f
single_timer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^fn single_timer() {$/;"	f
sleep	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^pub(super) mod sleep;$/;"	n
sleep	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^pub fn sleep(duration: Duration) -> Sleep {$/;"	f
sleep_is_eager	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/tests/mod.rs	/^fn sleep_is_eager() {$/;"	f
sleep_until	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/sleep.rs	/^pub fn sleep_until(deadline: Instant) -> Sleep {$/;"	f
sleepers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    sleepers: Mutex<Vec<usize>>,$/;"	m	struct:Idle
slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    slot: RwLockReadGuard<'a, Slot<T>>,$/;"	m	struct:RecvGuard
slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^            slot: &'a mut Option<T>,$/;"	m	struct:TaskLocalFuture::with_task::Guard
slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    slot: [EntryList; LEVEL_MULT],$/;"	m	struct:Level
slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    fn slot(&self, addr: Address) -> usize {$/;"	P	implementation:Page
slot_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^fn slot_for(duration: u64, level: usize) -> usize {$/;"	f
slot_range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^fn slot_range(level: usize) -> u64 {$/;"	f
slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    slots: *const Slot<T>,$/;"	m	struct:CachedPage
slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    slots: Mutex<Slots<T>>,$/;"	m	struct:Page
slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    slots: Vec<Slot<T>>,$/;"	m	struct:Slots
smoke	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    fn smoke() {$/;"	f	module:tests
smoke	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_list.rs	/^fn smoke() {$/;"	f
smoke	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^fn smoke() {$/;"	f
smoke	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_watch.rs	/^fn smoke() {$/;"	f
socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/mod.rs	/^pub(crate) mod socket;$/;"	n
socket	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/mod.rs	/^pub(crate) mod socket;$/;"	n
socketaddr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^mod socketaddr;$/;"	n
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn spawn(&mut self) -> io::Result<Child> {$/;"	P	implementation:Command
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    pub(crate) fn spawn<F>(&self, future: F) -> JoinHandle<F::Output>$/;"	P	implementation:Spawner
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    pub(crate) fn spawn(&self, task: Task, rt: &Handle) -> Result<(), ()> {$/;"	P	implementation:Spawner
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn spawn<F>(&self, future: F) -> JoinHandle<F::Output>$/;"	P	implementation:Handle
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^    pub(crate) fn spawn<F>(&self, future: F) -> JoinHandle<F::Output>$/;"	P	implementation:Spawner
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn spawn<T>(&self, future: T) -> JoinHandle<T::Output>$/;"	P	implementation:Runtime
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        fn spawn<T>(&self, task: T) -> JoinHandle<T::Output>$/;"	P	implementation:test_combination::Rt
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn spawn<F>(&self, future: F) -> JoinHandle<F::Output>$/;"	P	implementation:Spawner
spawn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    pub fn spawn<Fut>(self, future: Fut) -> JoinHandle<Fut::Output>$/;"	P	implementation:Builder
spawn_blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^pub(super) fn spawn_blocking<F, R>(f: F) -> JoinHandle<R>$/;"	f
spawn_blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^pub(crate) fn spawn_blocking<F, R>(func: F) -> JoinHandle<R>$/;"	f
spawn_blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn spawn_blocking<F, R>(&self, func: F) -> JoinHandle<R>$/;"	P	implementation:Handle
spawn_blocking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    pub fn spawn_blocking<Function, Output>(self, function: Function) -> JoinHandle<Output>$/;"	P	implementation:Builder
spawn_blocking_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub(crate) fn spawn_blocking_inner<F, R>(&self, func: F, name: Option<&str>) -> JoinHandle<R/;"	P	implementation:Handle
spawn_child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(crate) fn spawn_child(cmd: &mut std::process::Command) -> io::Result<SpawnedChild> {$/;"	f
spawn_child	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^pub(crate) fn spawn_child(cmd: &mut StdCommand) -> io::Result<SpawnedChild> {$/;"	f
spawn_during_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn spawn_during_shutdown() {$/;"	f
spawn_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/builder.rs	/^    pub fn spawn_local<Fut>(self, future: Fut) -> JoinHandle<Fut::Output>$/;"	P	implementation:Builder
spawn_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    pub fn spawn_local<F>(&self, future: F) -> JoinHandle<F::Output>$/;"	P	implementation:LocalSet
spawn_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    fn spawn_thread($/;"	P	implementation:Spawner
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    pub(crate) fn spawner(&self) -> &Spawner {$/;"	P	implementation:BasicScheduler
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    spawner: Spawner,$/;"	m	struct:BasicScheduler
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    spawner: Spawner,$/;"	m	struct:Inner
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    pub(crate) fn spawner(&self) -> &Spawner {$/;"	P	implementation:BlockingPool
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    spawner: Spawner,$/;"	m	struct:BlockingPool
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn spawner(&self) -> &Spawner {$/;"	P	implementation:ThreadPool
spawner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    spawner: Spawner,$/;"	m	struct:ThreadPool
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^pub(crate) fn split<R>(reader: R, delim: u8) -> Split<R>$/;"	f
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/mod.rs	/^mod split;$/;"	n
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split.rs	/^pub(crate) fn split(stream: &mut TcpStream) -> (ReadHalf<'_>, WriteHalf<'_>) {$/;"	f
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn split<'a>(&'a mut self) -> (ReadHalf<'a>, WriteHalf<'a>) {$/;"	P	implementation:TcpStream
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^mod split;$/;"	n
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split.rs	/^pub(crate) fn split(stream: &mut UnixStream) -> (ReadHalf<'_>, WriteHalf<'_>) {$/;"	f
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn split<'a>(&'a mut self) -> (ReadHalf<'a>, WriteHalf<'a>) {$/;"	P	implementation:UnixStream
split_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/mod.rs	/^mod split_owned;$/;"	n
split_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/split_owned.rs	/^pub(crate) fn split_owned(stream: TcpStream) -> (OwnedReadHalf, OwnedWriteHalf) {$/;"	f
split_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^mod split_owned;$/;"	n
split_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/split_owned.rs	/^pub(crate) fn split_owned(stream: UnixStream) -> (OwnedReadHalf, OwnedWriteHalf) {$/;"	f
stack_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    stack_size: Option<usize>,$/;"	m	struct:Inner
stage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    stage: UnsafeCell<Stage<T>>,$/;"	m	struct:CoreStage
start_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    start_index: usize,$/;"	m	struct:Block
start_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^pub(crate) fn start_index(slot_index: usize) -> usize {$/;"	f
start_kill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn start_kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Child
start_paused	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    start_paused: bool,$/;"	m	struct:Builder
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    fn start_seek(self: Pin<&mut Self>, mut pos: SeekFrom) -> io::Result<()> {$/;"	P	implementation:File
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn start_seek(mut self: Pin<&mut Self>, pos: SeekFrom) -> io::Result<()> {$/;"	P	implementation:Cursor
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn start_seek(self: Pin<&mut Self>, pos: SeekFrom) -> io::Result<()> {$/;"	f
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_seek.rs	/^    fn start_seek(self: Pin<&mut Self>, position: SeekFrom) -> io::Result<()>;$/;"	P	interface:AsyncSeek
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    fn start_seek(self: Pin<&mut Self>, pos: SeekFrom) -> io::Result<()> {$/;"	P	implementation:BufReader
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    fn start_seek(self: Pin<&mut Self>, position: SeekFrom) -> io::Result<()> {$/;"	P	implementation:BufStream
start_seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    fn start_seek(self: Pin<&mut Self>, pos: SeekFrom) -> io::Result<()> {$/;"	P	implementation:BufWriter
start_time	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    start_time: Instant,$/;"	m	struct:ClockTime
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    state: State,$/;"	m	struct:Inner
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    state: State<T>,$/;"	m	struct:Blocking
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    state: AtomicUsize,$/;"	m	struct:Inner
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    state: AtomicUsize,$/;"	m	struct:Inner
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod state;$/;"	n
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    state: AtomicUsize,$/;"	m	struct:Idle
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    state: Mutex<BarrierState>,$/;"	m	struct:Barrier
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    state: AtomicUsize,$/;"	m	struct:Waiter
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    state: AtomicUsize,$/;"	m	struct:Notify
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    state: State,$/;"	m	struct:Notified
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    state: AtomicUsize,$/;"	m	struct:Inner
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    state: AtomicUsize,$/;"	m	struct:AtomicWaker
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    state: AtomicState,$/;"	m	struct:Shared
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^mod state {$/;"	n
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    state: AtomicU64,$/;"	m	struct:StateCell
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    state: StateCell,$/;"	m	struct:TimerShared
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    pub(crate) fn stats(&self) -> &RuntimeStats {$/;"	P	implementation:Spawner
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    stats: RuntimeStats,$/;"	m	struct:Shared
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    stats: WorkerStatsBatcher,$/;"	m	struct:Inner
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/spawner.rs	/^    pub(crate) fn stats(&self) -> &RuntimeStats {$/;"	P	implementation:Spawner
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^    pub(crate) fn stats(&self) -> &RuntimeStats {$/;"	P	implementation:Spawner
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    pub(crate) fn stats(&self) -> &RuntimeStats {$/;"	P	implementation:Shared
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    stats: RuntimeStats,$/;"	m	struct:Shared
stats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    stats: WorkerStatsBatcher,$/;"	m	struct:Core
status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn status(&mut self) -> impl Future<Output = io::Result<ExitStatus>> {$/;"	P	implementation:Command
status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        status: ExitStatus,$/;"	m	struct:test::MockWait
std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    std: Arc<StdFile>,$/;"	m	struct:File
std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mod.rs	/^mod std;$/;"	n
std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    std: StdCommand,$/;"	m	struct:Command
std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    std: std::time::Instant,$/;"	m	struct:Instant
stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn stderr<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {$/;"	P	implementation:Command
stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub stderr: Option<ChildStderr>,$/;"	m	struct:Child
stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    stderr: Option<imp::ChildStdio>,$/;"	m	struct:SpawnedChild
stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn stdin<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {$/;"	P	implementation:Command
stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub stdin: Option<ChildStdin>,$/;"	m	struct:Child
stdin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    stdin: Option<imp::ChildStdio>,$/;"	m	struct:SpawnedChild
stdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^pub(super) fn stdio<T>(io: T) -> io::Result<PollEvented<Pipe>>$/;"	f
stdio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^pub(super) fn stdio<T>(io: T) -> io::Result<PollEvented<NamedPipe>>$/;"	f
stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn stdout<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {$/;"	P	implementation:Command
stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub stdout: Option<ChildStdout>,$/;"	m	struct:Child
stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    stdout: Option<imp::ChildStdio>,$/;"	m	struct:SpawnedChild
steal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    steal: queue::Steal<Arc<Shared>>,$/;"	m	struct:Remote
steal_batch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^fn steal_batch() {$/;"	f
steal_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub fn steal_count(&self) -> u64 {$/;"	P	implementation:WorkerStats
steal_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    steal_count: AtomicU64,$/;"	m	struct:WorkerStats
steal_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    steal_count: u64,$/;"	m	struct:WorkerStatsBatcher
steal_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    pub(super) fn steal_into($/;"	P	implementation:Steal
steal_into2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    fn steal_into2(&self, dst: &mut Local<T>, dst_tail: u16) -> u16 {$/;"	P	implementation:Steal
steal_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_queue.rs	/^fn steal_overflow() {$/;"	f
steal_tasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_queue.rs	/^    fn steal_tasks(steal: queue::Steal<NoopSchedule>) -> usize {$/;"	f	function:multi_stealer
steal_work	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn steal_work(&mut self, worker: &Worker) -> Option<Notified> {$/;"	P	implementation:Core
storage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    pub(crate) fn storage(&self) -> &OsStorage {$/;"	P	implementation:Globals
storage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    storage: S,$/;"	m	struct:Registry
store_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn store_output(&self, output: super::Result<T::Output>) {$/;"	P	implementation:CoreStage
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_broadcast.rs	/^        let (tx, mut rx1) = broadcast::channel::<Arc<&'static str>>(16);$/;"	v	function:broadcast_two
stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    stream: UnsafeCell<T>,$/;"	m	struct:Inner
stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod stream {}$/;"	n
stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/mod.rs	/^pub(crate) mod stream;$/;"	n
stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^pub(crate) mod stream;$/;"	n
stream_pin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    fn stream_pin(&mut self) -> Pin<&mut T> {$/;"	P	implementation:Guard
stress1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^fn stress1() {$/;"	f
stress2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/queue.rs	/^fn stress2() {$/;"	f
sub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/ready.rs	/^    fn sub(self, other: Ready) -> Ready {$/;"	P	implementation:Ready
sub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn sub(self, rhs: Duration) -> Instant {$/;"	P	implementation:Instant
sub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn sub(self, rhs: Instant) -> Duration {$/;"	P	implementation:Instant
sub_assign	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^    fn sub_assign(&mut self, rhs: Duration) {$/;"	P	implementation:Instant
submit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/mock.rs	/^    pub(crate) fn submit(&mut self, _to: &RuntimeStats) {}$/;"	P	implementation:WorkerStatsBatcher
submit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub(crate) fn submit(&mut self, to: &RuntimeStats) {$/;"	P	implementation:WorkerStatsBatcher
subscribe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub fn subscribe(&self) -> Receiver<T> {$/;"	P	implementation:Sender
subscribe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    pub fn subscribe(&self) -> Receiver<T> {$/;"	P	implementation:Sender
support	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^pub mod support;$/;"	n
swap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    pub(super) fn swap(&self, val: Option<Box<T>>) -> Option<Box<T>> {$/;"	P	implementation:AtomicCell
symlink	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/symlink.rs	/^pub async fn symlink(src: impl AsRef<Path>, dst: impl AsRef<Path>) -> io::Result<()> {$/;"	f
symlink_dir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/symlink_dir.rs	/^pub async fn symlink_dir(src: impl AsRef<Path>, dst: impl AsRef<Path>) -> io::Result<()> {$/;"	f
symlink_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/symlink_file.rs	/^pub async fn symlink_file(src: impl AsRef<Path>, dst: impl AsRef<Path>) -> io::Result<()> {$/;"	f
symlink_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod symlink_metadata;$/;"	n
symlink_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/symlink_metadata.rs	/^pub async fn symlink_metadata(path: impl AsRef<Path>) -> io::Result<Metadata> {$/;"	f
sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^pub(crate) mod sync {$/;"	n
sync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^pub(crate) mod sync {$/;"	n
sync_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn sync_all(&self) -> io::Result<()> {$/;"	P	implementation:File
sync_all_err_ordered_after_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn sync_all_err_ordered_after_write() {$/;"	f
sync_all_ordered_after_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn sync_all_ordered_after_write() {$/;"	f
sync_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn sync_data(&self) -> io::Result<()> {$/;"	P	implementation:File
sync_data_err_ordered_after_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn sync_data_err_ordered_after_write() {$/;"	f
sync_data_ordered_after_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn sync_data_ordered_after_write() {$/;"	f
sync_scope	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub fn sync_scope<F, R>(&'static self, value: T, f: F) -> R$/;"	P	implementation:LocalKey
sync_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn sync_when(&self) -> u64 {$/;"	P	implementation:TimerHandle
sync_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) unsafe fn sync_when(&self) -> u64 {$/;"	P	implementation:TimerShared
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/platform.rs	/^mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^pub(crate) mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^pub(crate) mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^mod sys {$/;"	n
sys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^mod sys {$/;"	n
tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^    tail: AtomicU16,$/;"	m	struct:Inner
tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/inject.rs	/^    tail: Option<NonNull<task::Header>>,$/;"	m	struct:Pointers
tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    tail: Mutex<Tail>,$/;"	m	struct:Shared
tail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^    tail: Option<NonNull<T>>,$/;"	m	struct:LinkedList
tail_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    tail_position: AtomicUsize,$/;"	m	struct:Tx
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn take(&mut self, n: usize) -> ReadBuf<'_> {$/;"	P	implementation:ReadBuf
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^pub(super) fn take<R: AsyncRead>(inner: R, limit: u64) -> Take<R> {$/;"	f
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    pub(crate) fn take(&mut self) -> Vec<u8> {$/;"	P	implementation:VecWithInitialized
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^        pub(super) fn take(&self) -> Option<T> {$/;"	P	implementation:atomic_take::AtomicTake
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^    pub(super) fn take(&self) -> Option<Box<T>> {$/;"	P	implementation:AtomicCell
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    pub fn take(&mut self) -> Option<T> {$/;"	P	implementation:OnceCell
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    pub(crate) fn take(&self) -> VecDeque<T> {$/;"	P	implementation:VecDequeCell
take_entries	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn take_entries(&mut self, expiration: &Expiration) -> EntryList {$/;"	P	implementation:Wheel
take_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket
take_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixDatagram
take_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixListener
take_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixStream
take_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    fn take_inner(&mut self) -> Option<T> {$/;"	P	implementation:AsyncFd
take_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn take_inner(&self) -> Option<InnerGuard<'_, P>> {$/;"	P	implementation:BasicScheduler
take_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/maybe_done.rs	/^    pub fn take_output(self: Pin<&mut Self>) -> Option<Fut::Output> {$/;"	P	implementation:MaybeDone
take_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn take_output(&self) -> super::Result<T::Output> {$/;"	P	implementation:CoreStage
take_slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    pub(crate) fn take_slot(&mut self, slot: usize) -> EntryList {$/;"	P	implementation:Level
take_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    pub(crate) fn take_waker(&self) -> Option<Waker> {$/;"	P	implementation:AtomicWaker
taken	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^        taken: AtomicBool,$/;"	m	struct:atomic_take::AtomicTake
task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^pub mod task;$/;"	n
task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/mod.rs	/^mod task;$/;"	n
task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/mod.rs	/^pub(crate) mod task;$/;"	n
task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    task: Task<S>,$/;"	m	struct:LocalNotified
task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_atomic_waker.rs	/^    task: AtomicWaker,$/;"	m	struct:Chan
task_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^macro_rules! task_local {$/;"	M
tasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    tasks: Option<Tasks>,$/;"	m	struct:Inner
tasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    tasks: RefCell<Tasks>,$/;"	m	struct:Context
terminate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn terminate() -> Self {$/;"	P	implementation:SignalKind
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^pub(crate) mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^mod test {$/;"	n
test_combination	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^fn test_combination($/;"	f
test_combinations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^fn test_combinations() {$/;"	f
test_different_futures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn test_different_futures() {$/;"	f	module:test
test_different_sizes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn test_different_sizes() {$/;"	f	module:test
test_generations_assert_same	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^fn test_generations_assert_same() {$/;"	f
test_id_not_broken	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    fn test_id_not_broken() {$/;"	f	module:tests
test_level_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/mod.rs	/^    fn test_level_for() {$/;"	f	module:test
test_local_queue_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^fn test_local_queue_capacity() {$/;"	f
test_pseudo_text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    fn test_pseudo_text() {$/;"	f	module:tests
test_sleep	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/tests/mod.rs	/^mod test_sleep;$/;"	n
test_slot_for	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/wheel/level.rs	/^    fn test_slot_for() {$/;"	f	module:test
test_splitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^    fn test_splitter() {$/;"	f	module:tests
test_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^fn test_state() {$/;"	f
test_zero_sized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    fn test_zero_sized() {$/;"	f	module:test
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/chain.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_buf.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/empty.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/lines.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/repeat.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/sink.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/split.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/take.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/mod.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/windows/sys.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mod.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^mod tests {$/;"	n
then	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) const fn then(&self, width: u32) -> Pack {$/;"	P	implementation:Pack
thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^pub(crate) mod thread;$/;"	n
thread_cap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    thread_cap: usize,$/;"	m	struct:Inner
thread_keep_alive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn thread_keep_alive(&mut self, duration: Duration) -> &mut Self {$/;"	P	implementation:Builder
thread_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/mod.rs	/^mod thread_local;$/;"	n
thread_local	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/thread_local.rs	/^macro_rules! thread_local {$/;"	M
thread_name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    thread_name: ThreadNameFn,$/;"	m	struct:Inner
thread_name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn thread_name(&mut self, val: impl Into<String>) -> &mut Self {$/;"	P	implementation:Builder
thread_name_fn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn thread_name_fn<F>(&mut self, f: F) -> &mut Self$/;"	P	implementation:Builder
thread_rng_n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^pub fn thread_rng_n(n: u32) -> u32 {$/;"	f
thread_stack_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn thread_stack_size(&mut self, val: usize) -> &mut Self {$/;"	P	implementation:Builder
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    tick: u8,$/;"	m	struct:Driver
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    tick: u8,$/;"	m	struct:ReadyEvent
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    tick: u8,$/;"	m	struct:Inner
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn tick(&self) -> usize {$/;"	P	implementation:Runtime
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn tick(&mut self) {$/;"	P	implementation:Core
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    tick: u8,$/;"	m	struct:Core
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn tick(&self) -> bool {$/;"	P	implementation:LocalSet
tick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/interval.rs	/^    pub async fn tick(&mut self) -> Instant {$/;"	P	implementation:Interval
tick_max	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^    fn tick_max(&self, max: usize) -> usize {$/;"	P	implementation:Runtime
tick_to_duration	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    pub(self) fn tick_to_duration(&self, t: u64) -> Duration {$/;"	P	implementation:ClockTime
time_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    pub(super) fn time_source(&self) -> &ClockTime {$/;"	P	implementation:Handle
time_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/handle.rs	/^    time_source: ClockTime,$/;"	m	struct:Handle
time_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    time_source: ClockTime,$/;"	m	struct:Driver
time_source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    time_source: ClockTime,$/;"	m	struct:InnerState
timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/mod.rs	/^mod timeout;$/;"	n
timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^pub fn timeout<T>(duration: Duration, future: T) -> Timeout<T>$/;"	f
timeout_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/timeout.rs	/^pub fn timeout_at<T>(deadline: Instant, future: T) -> Timeout<T>$/;"	f
to_mio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/interest.rs	/^    pub(crate) const fn to_mio(self) -> mio::Interest {$/;"	P	implementation:Interest
to_mio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn to_mio(&self) -> mio::net::TcpSocket {$/;"	P	implementation:TcpStream
to_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/atomic_cell.rs	/^fn to_raw<T>(data: Option<Box<T>>) -> *mut T {$/;"	f
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^        fn to_socket_addrs(&self, internal: Internal) -> Self::Future;$/;"	P	interface:sealed::ToSocketAddrsPriv
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    fn to_socket_addrs(&self, _: sealed::Internal) -> Self::Future {$/;"	P	implementation:SocketAddr
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    fn to_socket_addrs(&self, _: sealed::Internal) -> Self::Future {$/;"	P	implementation:SocketAddrV4
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    fn to_socket_addrs(&self, _: sealed::Internal) -> Self::Future {$/;"	P	implementation:SocketAddrV6
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    fn to_socket_addrs(&self, _: sealed::Internal) -> Self::Future {$/;"	P	implementation:u16
to_socket_addrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^    fn to_socket_addrs(&self, _: sealed::Internal) -> Self::Future {$/;"	f
total_kills	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        total_kills: usize,$/;"	m	struct:test::MockWait
total_polls	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        total_polls: usize,$/;"	m	struct:test::MockStream
total_waits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        total_waits: Rc<Cell<usize>>,$/;"	m	struct:test::MockWait
total_waits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        total_waits: usize,$/;"	m	struct:test::MockWait
trace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/mod.rs	/^pub(crate) mod trace;$/;"	n
track	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^fn track<T: Future>(f: T) -> Track<T> {$/;"	f
trailer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    fn trailer(&self) -> &Trailer {$/;"	f
transfer_one_direction	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy_bidirectional.rs	/^fn transfer_one_direction<A, B>($/;"	f
transition_from_parked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn transition_from_parked(&mut self, worker: &Worker) -> bool {$/;"	P	implementation:Core
transition_from_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn transition_from_searching(&mut self, worker: &Worker) {$/;"	P	implementation:Core
transition_to_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_complete(&self) -> Snapshot {$/;"	P	implementation:State
transition_to_idle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_idle(&self) -> TransitionToIdle {$/;"	P	implementation:State
transition_to_notified_and_cancel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_notified_and_cancel(&self) -> bool {$/;"	P	implementation:State
transition_to_notified_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_notified_by_ref(&self) -> TransitionToNotifiedByRef {$/;"	P	implementation:State
transition_to_notified_by_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_notified_by_val(&self) -> TransitionToNotifiedByVal {$/;"	P	implementation:State
transition_to_parked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn transition_to_parked(&mut self, worker: &Worker) {$/;"	P	implementation:Core
transition_to_running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_running(&self) -> TransitionToRunning {$/;"	P	implementation:State
transition_to_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn transition_to_searching(&mut self, worker: &Worker) -> bool {$/;"	P	implementation:Core
transition_to_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_shutdown(&self) -> bool {$/;"	P	implementation:State
transition_to_terminal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn transition_to_terminal(&self, count: usize) -> bool {$/;"	P	implementation:State
transition_worker_from_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn transition_worker_from_searching(&self) -> bool {$/;"	P	implementation:Idle
transition_worker_from_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn transition_worker_from_searching(&self) {$/;"	P	implementation:Shared
transition_worker_to_parked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn transition_worker_to_parked(&self, worker: usize, is_searching: bool) -> bool /;"	P	implementation:Idle
transition_worker_to_searching	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn transition_worker_to_searching(&self) -> bool {$/;"	P	implementation:Idle
true_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    pub(super) fn true_when(&self) -> u64 {$/;"	P	implementation:TimerShared
true_when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    true_when: AtomicU64,$/;"	m	struct:TimerSharedPadded
truncate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn truncate(&mut self, truncate: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
try_acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    pub(crate) fn try_acquire(&self, num_permits: u32) -> Result<(), TryAcquireError> {$/;"	P	implementation:Semaphore
try_acquire	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn try_acquire(&self) -> Result<SemaphorePermit<'_>, TryAcquireError> {$/;"	P	implementation:Semaphore
try_acquire_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn try_acquire_many(&self, n: u32) -> Result<SemaphorePermit<'_>, TryAcquireError> {$/;"	P	implementation:Semaphore
try_acquire_many_available	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn try_acquire_many_available() {$/;"	f
try_acquire_many_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn try_acquire_many_owned($/;"	P	implementation:Semaphore
try_acquire_many_unavailable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn try_acquire_many_unavailable() {$/;"	f
try_acquire_one_available	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn try_acquire_one_available() {$/;"	f
try_acquire_one_unavailable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn try_acquire_one_unavailable() {$/;"	f
try_acquire_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/semaphore.rs	/^    pub fn try_acquire_owned(self: Arc<Self>) -> Result<OwnedSemaphorePermit, TryAcquireError> {$/;"	P	implementation:Semaphore
try_advancing_head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/list.rs	/^    fn try_advancing_head(&mut self) -> bool {$/;"	P	implementation:Rx
try_clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub async fn try_clone(&self) -> io::Result<File> {$/;"	P	implementation:File
try_current	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/handle.rs	/^    pub fn try_current() -> Result<Self, TryCurrentError> {$/;"	P	implementation:Handle
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    fn try_from(stream: net::TcpListener) -> Result<Self, Self::Error> {$/;"	P	implementation:TcpListener
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    fn try_from(stream: std::net::TcpStream) -> Result<Self, Self::Error> {$/;"	P	implementation:TcpStream
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    fn try_from(stream: std::net::UdpSocket) -> Result<Self, Self::Error> {$/;"	P	implementation:UdpSocket
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    fn try_from(stream: std::os::unix::net::UnixDatagram) -> Result<Self, Self::Error> {$/;"	P	implementation:UnixDatagram
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/listener.rs	/^    fn try_from(stream: std::os::unix::net::UnixListener) -> io::Result<Self> {$/;"	P	implementation:UnixListener
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    fn try_from(stream: net::UnixStream) -> io::Result<Self> {$/;"	P	implementation:UnixStream
try_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn try_into(self) -> Result<Stdio, Self::Error> {$/;"	P	implementation:ChildStderr
try_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn try_into(self) -> Result<Stdio, Self::Error> {$/;"	P	implementation:ChildStdin
try_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    fn try_into(self) -> Result<Stdio, Self::Error> {$/;"	P	implementation:ChildStdout
try_into_panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/error.rs	/^    pub fn try_into_panic(self) -> Result<Box<dyn Any + Send + 'static>, JoinError> {$/;"	P	implementation:JoinError
try_into_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file.rs	/^    pub fn try_into_std(mut self) -> Result<StdFile, Self> {$/;"	P	implementation:File
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn try_io<R>($/;"	P	implementation:AsyncFdReadyGuard
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn try_io<R>($/;"	P	implementation:AsyncFdReadyMutGuard
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/registration.rs	/^    pub(crate) fn try_io<R>($/;"	P	implementation:Registration
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn try_io<R>($/;"	P	implementation:TcpStream
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn try_io<R>($/;"	P	implementation:UdpSocket
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn try_io<R>($/;"	P	implementation:UnixDatagram
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn try_io<R>($/;"	P	implementation:UnixStream
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_io<R>($/;"	P	implementation:NamedPipeClient
try_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_io<R>($/;"	P	implementation:NamedPipeServer
try_join	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/try_join.rs	/^macro_rules! try_join {$/;"	M
try_join3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/future/try_join.rs	/^pub(crate) fn try_join3<T1, F1, T2, F2, T3, F3, E>($/;"	f
try_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/mocked.rs	/^        pub(crate) fn try_lock(&self) -> Option<MutexGuard<'_, T>> {$/;"	P	implementation:sync::Mutex
try_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mutex.rs	/^    pub(crate) fn try_lock(&self) -> Option<MutexGuard<'_, T>> {$/;"	P	implementation:Mutex
try_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn try_lock(&self) -> Option<MutexGuard<'_, T>> {$/;"	P	implementation:Mutex
try_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn try_lock(&self) -> Result<MutexGuard<'_, T>, TryLockError> {$/;"	P	implementation:Mutex
try_lock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/try_lock.rs	/^    pub(crate) fn try_lock(&self) -> Option<LockGuard<'_, T>> {$/;"	P	implementation:TryLock
try_lock_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn try_lock_owned(self: Arc<Self>) -> Result<OwnedMutexGuard<T>, TryLockError> {$/;"	P	implementation:Mutex
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn try_map<U, F>(mut this: Self, f: F) -> Result<MappedMutexGuard<'a, U>, Self>$/;"	P	implementation:MappedMutexGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mutex.rs	/^    pub fn try_map<U, F>(mut this: Self, f: F) -> Result<MappedMutexGuard<'a, U>, Self>$/;"	P	implementation:MutexGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_read_guard.rs	/^    pub fn try_map<F, V: ?Sized>(mut this: Self, f: F) -> Result<OwnedRwLockReadGuard<T, V>, Sel/;"	P	implementation:OwnedRwLockReadGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard.rs	/^    pub fn try_map<F, U: ?Sized>($/;"	P	implementation:OwnedRwLockWriteGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/owned_write_guard_mapped.rs	/^    pub fn try_map<F, V: ?Sized>($/;"	P	implementation:OwnedRwLockMappedWriteGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/read_guard.rs	/^    pub fn try_map<F, U: ?Sized>(this: Self, f: F) -> Result<RwLockReadGuard<'a, U>, Self>$/;"	P	implementation:RwLockReadGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard.rs	/^    pub fn try_map<F, U: ?Sized>($/;"	P	implementation:RwLockWriteGuard
try_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock/write_guard_mapped.rs	/^    pub fn try_map<F, U: ?Sized>($/;"	P	implementation:RwLockMappedWriteGuard
try_push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn try_push($/;"	P	implementation:Block
try_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn try_read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream
try_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn try_read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixStream
try_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeClient
try_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeServer
try_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn try_read(&self) -> Result<RwLockReadGuard<'_, T>, TryLockError> {$/;"	P	implementation:RwLock
try_read_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn try_read_output(self, dst: &mut Poll<super::Result<T::Output>>, waker: &Waker)/;"	f
try_read_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^    pub(super) unsafe fn try_read_output(self, dst: *mut (), waker: &Waker) {$/;"	P	implementation:RawTask
try_read_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^unsafe fn try_read_output<T: Future, S: Schedule>($/;"	f
try_read_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn try_read_owned(self: Arc<Self>) -> Result<OwnedRwLockReadGuard<T>, TryLockError> {$/;"	P	implementation:RwLock
try_read_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn try_read_vectored(&self, bufs: &mut [io::IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream
try_read_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn try_read_vectored(&self, bufs: &mut [io::IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:UnixStream
try_read_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_read_vectored(&self, bufs: &mut [io::IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeClient
try_read_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_read_vectored(&self, bufs: &mut [io::IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeServer
try_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn try_recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
try_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn try_recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram
try_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    pub fn try_recv(&mut self) -> Result<T, TryRecvError> {$/;"	P	implementation:Receiver
try_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^            macro_rules! try_recv {$/;"	M	method:Rx::recv
try_recv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    pub fn try_recv(&mut self) -> Result<T, TryRecvError> {$/;"	P	implementation:Receiver
try_recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn try_recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket
try_recv_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn try_recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UnixDatagram
try_reserve	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn try_reserve(&self) -> Result<Permit<'_, T>, TrySendError<()>> {$/;"	P	implementation:Sender
try_reserve_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn try_reserve_owned(self) -> Result<OwnedPermit<T>, TrySendError<Self>> {$/;"	P	implementation:Sender
try_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn try_send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
try_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn try_send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram
try_send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/bounded.rs	/^    pub fn try_send(&self, message: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:Sender
try_send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn try_send_to(&self, buf: &[u8], target: SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket
try_send_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn try_send_to<P>(&self, buf: &[u8], target: P) -> io::Result<usize>$/;"	P	implementation:UnixDatagram
try_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/reusable_box.rs	/^    pub(crate) fn try_set<F>(&mut self, future: F) -> Result<(), F>$/;"	P	implementation:ReusableBoxFuture
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Child
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:StdChild
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    pub(crate) fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Child
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:test::MockWait
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:T
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^    fn try_wait(&mut self) -> io::Result<Option<ExitStatus>>;$/;"	P	interface:Wait
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:test::MockWait
try_wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    pub(crate) fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Child
try_with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>$/;"	P	implementation:LocalKey
try_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn try_write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream
try_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn try_write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UnixStream
try_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeClient
try_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeServer
try_write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn try_write(&self) -> Result<RwLockWriteGuard<'_, T>, TryLockError> {$/;"	P	implementation:RwLock
try_write_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn try_write_owned(self: Arc<Self>) -> Result<OwnedRwLockWriteGuard<T>, TryLockError> {$/;"	P	implementation:RwLock
try_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn try_write_vectored(&self, bufs: &[io::IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream
try_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub fn try_write_vectored(&self, buf: &[io::IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:UnixStream
try_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_write_vectored(&self, buf: &[io::IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeClient
try_write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn try_write_vectored(&self, buf: &[io::IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:NamedPipeServer
ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/listener.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:TcpListener
ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:TcpStream
ttl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket
turn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn turn(&mut self, max_wait: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:Driver
two	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/rand.rs	/^    two: Cell<u32>,$/;"	m	struct:FastRand
tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    tx: *mut Option<oneshot::Sender<()>>,$/;"	m	struct:Waiting
tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^    tx: Arc<oneshot::Sender<()>>,$/;"	m	struct:Sender
tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/registry.rs	/^    tx: watch::Sender<()>,$/;"	m	struct:EventInfo
tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    tx: list::Tx<T>,$/;"	m	struct:Chan
tx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/loom_oneshot.rs	/^    tx: &'a mut oneshot::Sender<i32>,$/;"	m	struct:OnClose
tx_close	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn tx_close(&self) {$/;"	P	implementation:Block
tx_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    tx_count: AtomicUsize,$/;"	m	struct:Chan
tx_release	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn tx_release(&self, tail_position: usize) {$/;"	P	implementation:Block
tx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    tx_task: Task,$/;"	m	struct:Inner
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for (IpAddr, u16) {}$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for (Ipv4Addr, u16) {}$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl ToSocketAddrs for (Ipv6Addr, u16) {}$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for (IpAddr, u16) {$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for (Ipv4Addr, u16) {$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/addr.rs	/^impl sealed::ToSocketAddrsPriv for (Ipv6Addr, u16) {$/;"	c
u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_buf_read.rs	/^impl AsyncBufRead for &[u8] {$/;"	c
u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_read.rs	/^impl AsyncRead for &[u8] {$/;"	c
ucred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/mod.rs	/^mod ucred;$/;"	n
uid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    pub fn uid(&self) -> uid_t {$/;"	P	implementation:UCred
uid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/ucred.rs	/^    uid: uid_t,$/;"	m	struct:UCred
uid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub fn uid(&mut self, id: u32) -> &mut Command {$/;"	P	implementation:Command
um	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^pub mod um {$/;"	n
unbound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub fn unbound() -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram
unbounded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/mod.rs	/^mod unbounded;$/;"	n
unbounded_channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/unbounded.rs	/^pub fn unbounded_channel<T>() -> (UnboundedSender<T>, UnboundedReceiver<T>) {$/;"	f
unconstrained	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^    const fn unconstrained() -> Budget {$/;"	P	implementation:Budget
unconstrained	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/unconstrained.rs	/^pub fn unconstrained<F>(inner: F) -> Unconstrained<F> {$/;"	f
unfilled_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub unsafe fn unfilled_mut(&mut self) -> &mut [MaybeUninit<u8>] {$/;"	P	implementation:ReadBuf
uninit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/read_buf.rs	/^    pub fn uninit(buf: &'a mut [MaybeUninit<u8>]) -> ReadBuf<'a> {$/;"	P	implementation:ReadBuf
uninitialized	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    unsafe fn uninitialized() -> Values<T> {$/;"	P	implementation:Values
uninterruptibly	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^macro_rules! uninterruptibly {$/;"	M
unix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^pub(crate) mod unix {$/;"	n
unix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^pub mod unix;$/;"	n
unowned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/mod.rs	/^    pub(crate) fn unowned<T>(task: T) -> (Notified<NoopSchedule>, JoinHandle<T::Output>)$/;"	f	module:unowned_wrapper
unowned_poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn unowned_poll() {$/;"	f
unowned_wrapper	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/mod.rs	/^mod unowned_wrapper {$/;"	n
unpack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/queue.rs	/^fn unpack(n: u32) -> (u16, u16) {$/;"	f
unpack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) fn unpack(&self, src: usize) -> usize {$/;"	P	implementation:Pack
unpack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^pub(crate) const fn unpack(src: usize, mask: usize, shift: u32) -> usize {$/;"	f
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:Driver
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn unpark(&self) {$/;"	P	implementation:Handle
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	f
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/either.rs	/^    fn unpark(&self) {$/;"	f
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn unpark(&self) -> Self::Unpark;$/;"	P	interface:Park
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn unpark(&self) {$/;"	P	implementation:Arc
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn unpark(&self) {$/;"	P	implementation:Box
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/mod.rs	/^    fn unpark(&self);$/;"	P	interface:Unpark
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:CachedParkThread
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:ParkThread
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn unpark(&self) {$/;"	P	implementation:Inner
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn unpark(&self) {$/;"	P	implementation:UnparkThread
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/driver.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:Driver
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    unpark: Box<dyn Unpark>,$/;"	m	struct:Shared
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/driver.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:Driver
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn unpark(&self) -> Unparker {$/;"	P	implementation:Parker
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn unpark(&self) {$/;"	P	implementation:Inner
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn unpark(&self) {$/;"	P	implementation:Unparker
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    unpark: Unparker,$/;"	m	struct:Remote
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix/driver.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	P	implementation:Driver
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn unpark(&self) -> Self::Unpark {$/;"	f
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    fn unpark(&self) {$/;"	P	implementation:TimerUnpark
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    unpark: Box<dyn Unpark>,$/;"	m	struct:InnerState
unpark	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/tests/mod.rs	/^    fn unpark(&self) {}$/;"	P	implementation:MockUnpark
unpark_condvar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn unpark_condvar(&self) {$/;"	P	implementation:Inner
unpark_driver	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/park.rs	/^    fn unpark_driver(&self) {$/;"	P	implementation:Inner
unpark_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    fn unpark_one(cell: &AtomicUsize) {$/;"	P	implementation:State
unpark_worker_by_id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn unpark_worker_by_id(&self, worker_id: usize) {$/;"	P	implementation:Idle
unparker_to_raw_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^unsafe fn unparker_to_raw_waker(unparker: Arc<Inner>) -> RawWaker {$/;"	f
unsafe_cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/mod.rs	/^mod unsafe_cell;$/;"	n
unset_join_interested	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn unset_join_interested(&mut self) {$/;"	P	implementation:Snapshot
unset_join_interested	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn unset_join_interested(&self) -> UpdateResult {$/;"	P	implementation:State
unset_join_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn unset_join_waker(&mut self) {$/;"	P	implementation:Snapshot
unset_notified	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn unset_notified(&mut self) {$/;"	P	implementation:Snapshot
unset_running	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    fn unset_running(&mut self) {$/;"	P	implementation:Snapshot
unset_rx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn unset_rx_task(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
unset_tx_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    fn unset_tx_task(cell: &AtomicUsize) -> State {$/;"	P	implementation:State
unset_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    pub(super) fn unset_waker(&self) -> UpdateResult {$/;"	P	implementation:State
unsplit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/split.rs	/^    pub fn unsplit(self, wr: WriteHalf<T>) -> T {$/;"	P	implementation:ReadHalf
unsync_load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_u16.rs	/^    pub(crate) unsafe fn unsync_load(&self) -> u16 {$/;"	P	implementation:AtomicU16
unsync_load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    pub(crate) unsafe fn unsync_load(&self) -> usize {$/;"	P	implementation:AtomicUsize
used	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    used: AtomicUsize,$/;"	m	struct:Page
used	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    used: usize,$/;"	m	struct:Slots
user_defined1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn user_defined1() -> Self {$/;"	P	implementation:SignalKind
user_defined2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn user_defined2() -> Self {$/;"	P	implementation:SignalKind
usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^impl From<State> for usize {$/;"	c
usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^impl Semaphore for (crate::sync::batch_semaphore::Semaphore, usize) {$/;"	c
util	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/lib.rs	/^mod util;$/;"	n
val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^            val: *const (),$/;"	m	struct:ScopedKey::set::Reset
val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/state.rs	/^    val: AtomicUsize,$/;"	m	struct:State
val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    val: UnsafeCell<Option<T>>,$/;"	m	struct:Slot
val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/linked_list.rs	/^        val: i32,$/;"	m	struct:tests::Entry
validates_max_permits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/semaphore_batch.rs	/^fn validates_max_permits() {$/;"	f
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_oneshot.rs	/^    value: Mutex<Option<T>>,$/;"	m	struct:Inner
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_pool.rs	/^    value: std::sync::Arc<atomic_take::AtomicTake<oneshot::Sender<T>>>,$/;"	m	struct:AtomicOneshot
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    value: UnsafeCell<MaybeUninit<T>>,$/;"	m	struct:OnceCell
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    value: UnsafeCell<Option<T>>,$/;"	m	struct:Inner
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    value: RwLock<T>,$/;"	m	struct:Shared
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/pad.rs	/^    value: T,$/;"	m	struct:CachePadded
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    value: *const Value<T>,$/;"	m	struct:Ref
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    value: T,$/;"	m	struct:Value
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/slab.rs	/^    value: UnsafeCell<Value<T>>,$/;"	m	struct:Slot
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/sync_wrapper.rs	/^    value: T,$/;"	m	struct:SyncWrapper
value_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/once_cell.rs	/^    value_set: AtomicBool,$/;"	m	struct:OnceCell
values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/reap.rs	/^        values: Vec<Option<()>>,$/;"	m	struct:test::MockStream
values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    values: Values<T>,$/;"	m	struct:Block
variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/instant.rs	/^mod variant {$/;"	n
vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/vec_with_initialized.rs	/^    vec: V,$/;"	m	struct:VecWithInitialized
version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^        pub(super) fn version(self) -> Version {$/;"	P	implementation:state::StateSnapshot
version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    version: Version,$/;"	m	struct:Receiver
vtable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/raw.rs	/^pub(super) fn vtable<T: Future, S: Schedule>() -> &'static Vtable {$/;"	f
wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn wait<'a, T>($/;"	P	implementation:Condvar
wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub async fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Child
wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/shutdown.rs	/^    pub(crate) fn wait(&mut self, timeout: Option<Duration>) -> bool {$/;"	P	implementation:Receiver
wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    pub async fn wait(&self) -> BarrierWaitResult {$/;"	P	implementation:Barrier
wait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    wait: watch::Receiver<usize>,$/;"	m	struct:Barrier
wait_complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task_combinations.rs	/^        wait_complete: Option<oneshot::Receiver<()>>,$/;"	m	struct:test_combination::Signals
wait_object	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    wait_object: HANDLE,$/;"	m	struct:Waiting
wait_timeout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn wait_timeout<'a, T>($/;"	P	implementation:Condvar
wait_with_output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^    pub async fn wait_with_output(mut self) -> io::Result<Output> {$/;"	P	implementation:Child
waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    waiter: UnsafeCell<Waiter>,$/;"	m	struct:Recv
waiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    waiter: UnsafeCell<Waiter>,$/;"	m	struct:Notified
waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    waiters: Mutex<Waiters>,$/;"	m	struct:ScheduledIo
waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    waiters: Mutex<Waitlist>,$/;"	m	struct:Semaphore
waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    waiters: LinkedList<Waiter, <Waiter as linked_list::Link>::Target>,$/;"	m	struct:Tail
waiters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    waiters: Mutex<WaitList>,$/;"	m	struct:Notify
waiting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/windows.rs	/^    waiting: Option<Waiting>,$/;"	m	struct:Child
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    pub(super) fn wake(&self, ready: Ready) {$/;"	P	implementation:ScheduledIo
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^unsafe fn wake(raw: *const ()) {$/;"	f
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn wake(self: Arc<Self>) {$/;"	P	implementation:Shared
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn wake(self) {$/;"	P	implementation:Waker
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    fn wake(self);$/;"	P	interface:WakerRef
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    pub(crate) fn wake(&self) {$/;"	P	implementation:AtomicWaker
wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    fn wake(self: Arc<Self>);$/;"	P	interface:Wake
wake0	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    fn wake0(&self, ready: Ready, shutdown: bool) {$/;"	P	implementation:ScheduledIo
wake_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake_list.rs	/^    pub(crate) fn wake_all(&mut self) {$/;"	P	implementation:WakeList
wake_arc_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^unsafe fn wake_arc_raw<T: Wake>(data: *const ()) {$/;"	f
wake_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^unsafe fn wake_by_ref(raw: *const ()) {$/;"	f
wake_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn wake_by_ref(arc_self: &Arc<Self>) {$/;"	P	implementation:Shared
wake_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn wake_by_ref(&self) {$/;"	f
wake_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^unsafe fn wake_by_ref<T, S>(ptr: *const ())$/;"	f
wake_by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    fn wake_by_ref(arc_self: &Arc<Self>);$/;"	P	interface:Wake
wake_by_ref_arc_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^unsafe fn wake_by_ref_arc_raw<T: Wake>(data: *const ()) {$/;"	f
wake_by_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/harness.rs	/^    pub(super) fn wake_by_val(self) {$/;"	f
wake_by_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^unsafe fn wake_by_val<T, S>(ptr: *const ())$/;"	f
wake_during_shutdown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/loom_local.rs	/^fn wake_during_shutdown() {$/;"	f
wake_join	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn wake_join(&self) {$/;"	P	implementation:Trailer
wake_list	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/mod.rs	/^mod wake_list;$/;"	n
wake_rx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/chan.rs	/^    pub(crate) fn wake_rx(&self) {$/;"	P	implementation:Tx
wake_without_register	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/tests/atomic_waker.rs	/^fn wake_without_register() {$/;"	f
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    waker: mio::Waker,$/;"	m	struct:Inner
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^mod waker;$/;"	n
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^    waker: ManuallyDrop<Waker>,$/;"	m	struct:WakerRef
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/barrier.rs	/^    waker: watch::Sender<usize>,$/;"	m	struct:BarrierState
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/batch_semaphore.rs	/^    waker: UnsafeCell<Option<Waker>>,$/;"	m	struct:Waiter
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/broadcast.rs	/^    waker: Option<Waker>,$/;"	m	struct:Waiter
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/notify.rs	/^    waker: Option<Waker>,$/;"	m	struct:Waiter
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/task/atomic_waker.rs	/^    waker: UnsafeCell<Option<Waker>>,$/;"	m	struct:AtomicWaker
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    waker: AtomicWaker,$/;"	m	struct:Shared
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    waker: CachePadded<AtomicWaker>,$/;"	m	struct:StateCell
waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^    waker: ManuallyDrop<Waker>,$/;"	m	struct:WakerRef
waker_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn waker_ref(&self) -> WakerRef<'_> {$/;"	P	implementation:Spawner
waker_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/waker.rs	/^pub(super) fn waker_ref<T, S>(header: &Header) -> WakerRef<'_, S>$/;"	f
waker_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^pub(crate) fn waker_ref<W: Wake>(wake: &Arc<W>) -> WakerRef<'_> {$/;"	f
waker_vtable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/wake.rs	/^fn waker_vtable<W: Wake>() -> &'static RawWakerVTable {$/;"	f
wakeup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/mod.rs	/^    fn wakeup(&self) {$/;"	P	implementation:Handle
was_woken	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    fn was_woken(&self) -> bool {$/;"	P	implementation:Spawner
watch_borrow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn watch_borrow() {$/;"	f	module:tests
watch_spurious_wakeup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/watch.rs	/^    fn watch_spurious_wakeup() {$/;"	f	module:tests
wheel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^    wheel: wheel::Wheel,$/;"	m	struct:InnerState
wheel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/mod.rs	/^mod wheel;$/;"	n
when	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/time/driver/entry.rs	/^    fn when(&self) -> Option<u64> {$/;"	P	implementation:StateCell
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/bit.rs	/^    pub(crate) const fn width(&self) -> u32 {$/;"	P	implementation:Pack
will_wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) unsafe fn will_wake(&self, waker: &Waker) -> bool {$/;"	P	implementation:Trailer
will_wake	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    unsafe fn will_wake(&self, cx: &mut Context<'_>) -> bool {$/;"	P	implementation:Task
winapi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/mod.rs	/^pub mod winapi;$/;"	n
winbase	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^    pub mod winbase {$/;"	n	module:um
window_change	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/unix.rs	/^    pub fn window_change() -> Self {$/;"	P	implementation:SignalKind
windows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/os.rs	/^pub mod windows {$/;"	n
windows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/signal/mod.rs	/^pub mod windows;$/;"	n
winerror	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/doc/winapi.rs	/^    pub mod winerror {$/;"	n	module:shared
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/unsafe_cell.rs	/^    pub(crate) fn with<R>(&self, f: impl FnOnce(*const T) -> R) -> R {$/;"	P	implementation:UnsafeCell
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/macros/scoped_tls.rs	/^    pub(crate) fn with<F, R>(&'static self, f: F) -> R$/;"	P	implementation:ScopedKey
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/tests/task.rs	/^fn with(f: impl FnOnce(Runtime)) {$/;"	f
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/local.rs	/^    fn with<T>(&self, f: impl FnOnce() -> T) -> T {$/;"	P	implementation:LocalSet
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    pub fn with<F, R>(&'static self, f: F) -> R$/;"	P	implementation:LocalKey
with_budget	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^fn with_budget<R>(budget: Budget, f: impl FnOnce() -> R) -> R {$/;"	f
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn with_capacity(n: usize) -> Buf {$/;"	P	implementation:Buf
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_reader.rs	/^    pub fn with_capacity(capacity: usize, inner: R) -> Self {$/;"	P	implementation:BufReader
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_stream.rs	/^    pub fn with_capacity($/;"	P	implementation:BufStream
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/buf_writer.rs	/^    pub fn with_capacity(cap: usize, inner: W) -> Self {$/;"	P	implementation:BufWriter
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    pub(crate) fn with_capacity(cap: usize) -> Self {$/;"	P	implementation:VecDequeCell
with_current	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/park/thread.rs	/^    fn with_current<F, R>(&self, f: F) -> Result<R, ParkError>$/;"	P	implementation:CachedParkThread
with_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/orphan.rs	/^        fn with_err() -> Self {$/;"	P	implementation:test::MockWait
with_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/list.rs	/^    fn with_inner<F, T>(&self, f: F) -> T$/;"	P	implementation:LocalOwnedTasks
with_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/util/vec_deque_cell.rs	/^    unsafe fn with_inner<F, R>(&self, f: F) -> R$/;"	P	implementation:VecDequeCell
with_interest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub fn with_interest(inner: T, interest: Interest) -> io::Result<Self>$/;"	P	implementation:AsyncFd
with_max_readers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub fn with_max_readers(value: T, max_reads: u32) -> RwLock<T>$/;"	P	implementation:RwLock
with_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/atomic_usize.rs	/^    pub(crate) fn with_mut<R>(&mut self, f: impl FnOnce(&mut usize) -> R) -> R {$/;"	P	implementation:AtomicUsize
with_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/unsafe_cell.rs	/^    pub(crate) fn with_mut<R>(&self, f: impl FnOnce(*mut T) -> R) -> R {$/;"	P	implementation:UnsafeCell
with_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/core.rs	/^    pub(super) fn with_mut<R>(&self, f: impl FnOnce(*mut Stage<T>) -> R) -> R {$/;"	P	implementation:CoreStage
with_result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/mod.rs	/^        fn with_result(result: Poll<Result<(), ()>>) -> Self {$/;"	P	implementation:test::Mock
with_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/oneshot.rs	/^    unsafe fn with_task<F, R>(&self, f: F) -> R$/;"	P	implementation:Task
with_task	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/task/task_local.rs	/^    fn with_task<F2: FnOnce(Pin<&mut F>) -> R, R>(self: Pin<&mut Self>, f: F2) -> R {$/;"	P	implementation:TaskLocalFuture
with_unconstrained	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/coop.rs	/^pub(crate) fn with_unconstrained<R>(f: impl FnOnce() -> R) -> R {$/;"	f
woken	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/basic_scheduler.rs	/^    woken: AtomicBool,$/;"	m	struct:Shared
worker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/mod.rs	/^mod worker;$/;"	n
worker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    worker: Arc<Worker>,$/;"	m	struct:Context
worker_thread_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    worker_thread_index: usize,$/;"	m	struct:Shared
worker_threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/blocking/pool.rs	/^    worker_threads: HashMap<usize, thread::JoinHandle<()>>,$/;"	m	struct:Shared
worker_threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    pub fn worker_threads(&mut self, val: usize) -> &mut Self {$/;"	P	implementation:Builder
worker_threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/builder.rs	/^    worker_threads: Option<usize>,$/;"	m	struct:Builder
worker_to_notify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/idle.rs	/^    pub(super) fn worker_to_notify(&self) -> Option<usize> {$/;"	P	implementation:Idle
workers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    pub fn workers(&self) -> impl Iterator<Item = &WorkerStats> {$/;"	P	implementation:RuntimeStats
workers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/stats/stats.rs	/^    workers: Box<[WorkerStats]>,$/;"	m	struct:RuntimeStats
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub async fn writable<'a>(&'a self) -> io::Result<AsyncFdReadyGuard<'a, T>> {$/;"	P	implementation:AsyncFd
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/tcp/stream.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:TcpStream
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/udp.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:UdpSocket
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/datagram/socket.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:UnixDatagram
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/unix/stream.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:UnixStream
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeClient
writable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub async fn writable(&self) -> io::Result<()> {$/;"	P	implementation:NamedPipeServer
writable_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/async_fd.rs	/^    pub async fn writable_mut<'a>(&'a mut self) -> io::Result<AsyncFdReadyMutGuard<'a, T>> {$/;"	P	implementation:AsyncFd
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mocks.rs	/^    fn write(&mut self, src: &[u8]) -> io::Result<usize> {$/;"	P	implementation:MockFile
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/mod.rs	/^mod write;$/;"	n
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/open_options.rs	/^    pub fn write(&mut self, write: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/write.rs	/^pub async fn write(path: impl AsRef<Path>, contents: impl AsRef<[u8]>) -> io::Result<()> {$/;"	f
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    write: Arc<Mutex<Pipe>>,$/;"	m	struct:DuplexStream
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write.rs	/^pub(crate) fn write<'a, W>(writer: &'a mut W, buf: &'a [u8]) -> Write<'a, W>$/;"	f
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/loom/std/parking_lot.rs	/^    pub(crate) fn write(&self) -> LockResult<RwLockWriteGuard<'_, T>> {$/;"	P	implementation:RwLock
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/net/windows/named_pipe.rs	/^    pub fn write(&mut self, allowed: bool) -> &mut Self {$/;"	P	implementation:ClientOptions
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/process/unix/mod.rs	/^    fn write(&mut self, bytes: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Pipe
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/mpsc/block.rs	/^    pub(crate) unsafe fn write(&self, slot_index: usize, value: T) {$/;"	P	implementation:Block
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub async fn write(&self) -> RwLockWriteGuard<'_, T> {$/;"	P	implementation:RwLock
write_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all.rs	/^pub(crate) fn write_all<'a, W>(writer: &'a mut W, buf: &'a [u8]) -> WriteAll<'a, W>$/;"	f
write_all_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_all_buf.rs	/^pub(crate) fn write_all_buf<'a, W, B>(writer: &'a mut W, buf: &'a mut B) -> WriteAllBuf<'a, W, B/;"	f
write_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_buf.rs	/^pub(crate) fn write_buf<'a, W, B>(writer: &'a mut W, buf: &'a mut B) -> WriteBuf<'a, W, B>$/;"	f
write_guard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod write_guard;$/;"	n
write_guard_mapped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^pub(crate) mod write_guard_mapped;$/;"	n
write_history	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/stdio_common.rs	/^        write_history: Vec<usize>,$/;"	m	struct:tests::LoggingMockWriter
write_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/sync/rwlock.rs	/^    pub async fn write_owned(self: Arc<Self>) -> OwnedRwLockWriteGuard<T> {$/;"	P	implementation:RwLock
write_read_flush_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_read_flush_err() {$/;"	f
write_read_write_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_read_write_err() {$/;"	f
write_seek_flush_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_seek_flush_err() {$/;"	f
write_seek_write_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_seek_write_err() {$/;"	f
write_to	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/blocking.rs	/^    pub(crate) fn write_to<T: Write>(&mut self, wr: &mut T) -> io::Result<()> {$/;"	P	implementation:Buf
write_twice_before_dispatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_twice_before_dispatch() {$/;"	f
write_vectored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_vectored.rs	/^pub(crate) fn write_vectored<'a, 'b, W>($/;"	f
write_waker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/mem.rs	/^    write_waker: Option<Waker>,$/;"	m	struct:Pipe
write_with_buffer_larger_than_max	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_with_buffer_larger_than_max() {$/;"	f
write_write_err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/fs/file/tests.rs	/^fn write_write_err() {$/;"	f
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/driver/scheduled_io.rs	/^    writer: Option<Waker>,$/;"	m	struct:Waiters
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/copy.rs	/^    writer: &'a mut W,$/;"	m	struct:Copy
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_int.rs	/^macro_rules! writer {$/;"	M
writer8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/io/util/write_int.rs	/^macro_rules! writer8 {$/;"	M
yield_now	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/task/mod.rs	/^    fn yield_now(&self, task: Notified<Self>) {$/;"	P	interface:Schedule
yield_now	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.11.0/src/runtime/thread_pool/worker.rs	/^    fn yield_now(&self, task: Notified) {$/;"	P	implementation:Arc
